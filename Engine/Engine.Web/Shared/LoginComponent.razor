@namespace Caspian.Engine.Shared
@using Caspian.Engine.Web
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.Data.SqlClient
@inherits BasePage
@inject AuthenticationStateProvider stateProvider
@inject NavigationManager navigationManager
@inject ProtectedSessionStorage Storege
@inject IHostEnvironment host
<div class="c-login">
    <span class="c-icon"></span>
    <div class="c-form">
        <div class="c-container">
            <StringTextBox @bind-Value="@userName" placeholder="Username..." />
        </div>
        <div class="c-container">
            <StringTextBox @bind-Value="@password" type="password" placeholder="Password..." />
        </div>
        <div>
            <span class="error-message">@message</span>
        </div>
        <div class="c-action">
            <button @onclick="Login">Login</button>
            <span @onclick="LoginAsGuest" class="c-guest">Guest</span>
        </div>
    </div>
</div>
@code 
{
    string message;
    string userName;
    string password;

    async Task Login()
    {

        if (!userName.HasValue() || !password.HasValue())
            message = "Username or password is invalid.";
        else
        {
            using var service = CreateScope().GetService<UserService>();
            var user = await service.UserIsvalidAsync(userName, password);
            if (user == null)
                message = "Username or password is invalid.";
            else
            {
                await Storege.DeleteAsync("CurentShowUrl");
                await ((CustomAuthenticationStateProvider)stateProvider).Login(user.Id.ToString());
                var url = new Uri(navigationManager.Uri).LocalPath;
                if (url.StartsWith("/login", StringComparison.OrdinalIgnoreCase))
                    navigationManager.NavigateTo("/Demo", true);

            }
        }
    }

    async Task LoginAsGuest()
    {
        using var service = CreateScope().GetService<UserService>();
        var user = await service.GetGuest();
        if (user == null)
            message = "Guest user not defind";
        else
        {
            await ((CustomAuthenticationStateProvider)stateProvider).Login(user.Id.ToString());
            navigationManager.NavigateTo("/Demo", true);
        }
    }
}
