@using Caspian.Engine.Service
@using Caspian.Engine.Navigation
@using Microsoft.AspNetCore.Components.Authorization
@namespace Caspian.Engine.Shared
@inject IServiceScopeFactory ServiceScopeFactory
@inject SingletonMenuService MenuService
@inject NavigationManager navigationManager
<AuthorizeView>
    <Authorized>
        <div class="page">
            @if (menusId != null)
            {
                var className = "content";
                <div class="sidebar">
                    <div class="c-menu-icon">
                        <div>
                            <i class="fa fa-bars" />
                        </div>
                        <div>
                            <i class="fa fa-sign-out" />
                        </div>
                        <div>
                            <i class="fa fa-th" />
                        </div>
                    </div>
                    <DataMenu MenusId="menusId" />
                </div>
                <div class="@className">
                    @if (userId == 1 || menusId.Contains(menuId))
                    {
                        <div class="c-main-head">
                            <div>
                                <i class="fa fa-user" />
                                <span>@userName</span>
                            </div>
                            <div>
                                <i class="fa fa-calendar" />
                                <span>@date</span>
                            </div>
                            <div>
                                <i class="fa fa-clock-o" />
                                <span>@time</span>
                            </div>
                            <div>
                                <i class="fa fa-wpforms" />
                                <span>@title</span>
                            </div>
                        </div>
                        @ChildContent
                    }
                    else
                    {
                        <h1 style="color:red">شما مجاز به ورود به این صفحه نیستید</h1>
                    }
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <h1 style="color:red">شما مجاز به ورود به این صفحه نیستید</h1>
    </NotAuthorized>
</AuthorizeView>
@code
{
    string date;
    string userName;
    IList<int> menusId;
    int userId;
    string time;
    string title;
    int menuId;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            if (menusId == null)
            {
                var result = await authenticationStateTask;
          
                userId = Convert.ToInt32(result.User.Claims.FirstOrDefault()?.Value);
                using var scope = ServiceScopeFactory.CreateScope();
                var user = await new UserService(scope).SingleAsync(userId);
                userName = user.FName + " " + user.LName;
                menusId = await new MenuAccessibilityService(scope).GetUserMenus(userId);
            }
        }
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        date = DateTime.Now.Date.ToPersianDateString();
        time = DateTime.Now.TimeOfDay.ShortString();
        var uri = new Uri(navigationManager.Uri);
        var url = "";
        foreach (var segment in uri.Segments)
        {
            if (!Int64.TryParse(segment, out _))
                url += segment;
        }
        if (url.EndsWith('/'))
            url = url.Substring(0, url.Length - 1);
        var menu = MenuService.GetMenu(url);
        menuId = menu.Id;
        title = menu.Title;
        base.OnParametersSet();
    }

    [Parameter]
    public RenderFragment ChildContent{ get; set; }
}