@namespace Caspian.Engine.ReportGenerator
@inherits BasePage
@inject IJSRuntime runTime
@{
    base.BuildRenderTree(__builder);
}

<div class="ps-4 pe-4 pt-2">
    <div class="row r-level-head">
        <div class="col-md-2 c-operator">
            <button class="r-button" @onclick='() =>
                                  {
                                      NavigationManager.NavigateTo($"/{Subsystem.ToString()}/ReportEngine/Report");
                                  }'>
                <span>Reports</span><span class="fa fa-pie-chart"></span>
            </button>
        </div>
        <div class="col-md-2 c-operator">
            <button class="r-button" title="Report parameters" @onclick="() =>
                                  {
                                      Status = WindowStatus.Open;
                                      reportParamShowType = ReportParamShowType.Simple;
                                    }">
                <span>Parameters</span>
                <span class="fa fa-pie-chart"></span>
            </button>
        </div>
        <div class="col-md-2 c-operator">
            <button class="r-button" title="Aggregate report parameters" @onclick="() =>
                                  {
                                      Status = WindowStatus.Open;
                                      reportParamShowType = ReportParamShowType.Manager;
                                  }">
                <span>Aggregate</span>
                <span class="fa fa-pie-chart"></span>
            </button>
        </div>
        <div class="col-md-2 c-operator">
            <button class="r-button" title="Aggregate report parameters" @onclick="() =>
                                  {
                                      Status = WindowStatus.Open;
                                      reportParamShowType = ReportParamShowType.Alias;
                                  }">
                <span>Alias</span>
                <span class="fa fa-pie-chart"></span>
            </button>
        </div>
        <div class="col-md-4 c-title">
            <span> @report?.Title</span>
        </div>

    </div>
    <hr />
    <div class="r-level row align-items-center">
        <div class="col-md-4">
            <div class="r-title">
                <span>First level fields</span>
            </div>
            <DataGrid @ref="grid1" TEntity="ReportParam" HidePageSize HideInsertIcon OnDataBinding="(query) => { return query.Where(t => t.ReportId == ReportId && !t.IsKey && t.DataLevel == 1); }">
                <Columns>
                    <GridColumn Field="t => t.RuleId != null ? t.Rule.Title : t.DynamicParameterId != null ? t.DynamicParameter.Title : t.TitleEn" />
                    <GridCommandColumns HideEdit />
                </Columns>
            </DataGrid>
        </div>
        <div class="col-md-1 text-center" style="width:70px">
            <IconButton IconType="IconType.AngleRight"
                        @onclick="async () =>
                               {
                                   await ChangeParameterLevel(grid1.SelectedRowId, 1);
                               }" />
            <div style="padding-top:10px">
                <IconButton IconType="IconType.AngleLeft" @onclick="async () =>
                               {
                                   await ChangeParameterLevel(grid2.SelectedRowId, 1, true);
                               }" />
            </div>
        </div>
        <div class="col-md-3">
            <div class="r-title">
                <span>Second level fields</span>
            </div>
            <DataGrid @ref="grid2" TEntity="ReportParam" HideInsertIcon HidePageSize
                  OnDataBinding="(query) => { return query.Where(t => t.ReportId == ReportId && !t.IsKey && t.DataLevel == 2); }">
                <Columns>
                    <GridColumn Field="t => t.TitleEn">
                        <span>@ReportFieldName(context.Data.TitleEn)</span>
                    </GridColumn>
                </Columns>
            </DataGrid>
        </div>
        <div class="col-md-1 text-center" style="width:70px">
            <IconButton IconType="IconType.AngleRight"
                        @onclick="async () =>
                        {
                            await ChangeParameterLevel(grid2.SelectedRowId, 2);
                        }" />
            <div class="pt-2">
                <IconButton IconType="IconType.AngleLeft"
                            @onclick="async () =>
                        {
                            await ChangeParameterLevel(grid3.SelectedRowId, 2, true);
                        }" />
            </div>
        </div>
        <div class="col-md-3">
            <div class="r-title">
                <span>Thired </span>
            </div>
            <DataGrid  @ref="grid3" TEntity="ReportParam" HideInsertIcon HidePageSize
                  OnDataBinding="(query) => { return query.Where(t => t.ReportId == ReportId && !t.IsKey && t.DataLevel == 3); }">
                <Columns>
                    <GridColumn Field="t => t.TitleEn">
                        <span>@ReportFieldName(context.Data.TitleEn)</span>
                    </GridColumn>
                </Columns>
            </DataGrid>
        </div>
    </div>
</div>

<Window @bind-Status="Status" Title="Report parameters">
    @switch (reportParamShowType)
    {
        case ReportParamShowType.Simple:
            <SimpleReportParam @bind-Status="Status" ReportId="ReportId.Value"
                               OnParameterSave="() =>
                        {
                            grid1.EnableLoading();
                        }" />
            break;
        case ReportParamShowType.Manager:
            <ManagementReportComponent ReportId="ReportId.Value" />
            break;
        case ReportParamShowType.Alias:
            <ReportParamAlias ReportId="ReportId.Value" />
            break;
    }
</Window>


@code
{
    Report report;
    DataGrid<ReportParam> grid1;
    DataGrid<ReportParam> grid2;
    DataGrid<ReportParam> grid3;
    //IList<ReportNode> Nodes;
    WindowStatus Status;
    ReportParamShowType? reportParamShowType;
    Type Type;
    string message;

    async Task ChangeParameterLevel(int? parameterId, int buttonLevel, bool isDecreas = false)
    {
        if (parameterId == null)
            message = "Please select a row";
        else
        {
            try
            {
                using var scope = ServiceScopeFactory.CreateScope();
                var parameterService = new ReportParamService(scope.ServiceProvider);
                if (isDecreas)
                    await parameterService.DecDataLevel(parameterId.Value);
                else
                    await parameterService.IncDataLevel(parameterId.Value);
                await parameterService.SaveChangesAsync();
                grid2.EnableLoading();
                if (buttonLevel == 1)
                    grid1.EnableLoading();
                else
                    grid3.EnableLoading();
                StateHasChanged();
            }
            catch (CaspianException ex)
            {
                message = ex.Message;
            }
        }
    }

    string ReportFieldName(string enTitle)
    {
        var info = Type.GetMyProperty(enTitle);
        var attr = info.GetCustomAttribute<ReportFieldAttribute>();
        if (attr.Title.HasValue())
            return attr.Title;
        var attr1 = info.GetCustomAttribute<DisplayNameAttribute>();
        if (attr1 != null && attr1.DisplayName.HasValue())
            return attr1.DisplayName;
        return enTitle;
    }

    [Parameter]
    public int? ReportId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        using var service = CreateScope().GetService<ReportService>();
        report = await service.GetAll().Include(t => t.ReportGroup).SingleAsync(ReportId.Value);
        Type = new AssemblyInfo().GetReturnType(report.ReportGroup);
        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (message.HasValue())
        {
            runTime.InvokeVoidAsync("caspian.common.showMessage", message);
            message = null;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    [Parameter]
    public SubSystemKind Subsystem { get; set; }


    enum ReportParamShowType
    {
        Simple,

        Manager,

        Alias
    }
}
