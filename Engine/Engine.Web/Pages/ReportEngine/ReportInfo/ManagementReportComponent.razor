@namespace Caspian.Engine.ReportGenerator
@inherits BasePage

<TreeView @ref="Tree" OnExpanded="@(async item => await OnExpand(item))" style="width: 500px; margin: 10px auto; height: calc(100vh - 170px); padding: 6px 12px 0 0" TEntity="NodeView" Source="Nodes" />

@code
{
    IList<NodeView> Nodes;
    TreeView<NodeView> Tree;

    async Task OnExpand(NodeView node)
    {
        using var service = ServiceScopeFactory.CreateScope().GetService<ReportService>();
        var report = await service.GetAll().Include(t => t.ReportGroup).Include(t => t.ReportParams)
            .SingleAsync(ReportId);
        node.Children = new ReportTree().CreateTreeForGroupBy(report, node.Value).Select(t => new NodeView()
            {
                Value = t.TitleEn,
                Selected = t.Selected,
                Selectable = !t.Grouping,
                Expanded = false,
                Collabsable = t.Grouping,
                Text = t.TitleFa,
            }).ToList();
    }

    void PostParams()
    {

    }

    protected async override Task OnInitializedAsync()
    {
        var tree = new ReportTree();
        using var service = ServiceScopeFactory.CreateScope().GetService<ReportService>();
        var report = await service.GetAll().Include(t => t.ReportGroup).Include(t => t.ReportParams)
            .SingleAsync(ReportId);
        Nodes = tree.CreateTreeForGroupBy(report, null).Select(t => new NodeView()
        {
            Value = t.TitleEn,
            Selected = t.Selected,
            Selectable = !t.Grouping,
            Expanded = false,
            Collabsable = t.Grouping,
            Text = t.TitleFa,
        }).ToList();
        await base.OnInitializedAsync();
    }

    [Parameter]
    public int ReportId { get; set; }
}