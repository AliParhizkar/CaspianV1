@namespace Caspian.Engine.ReportPrint
@inject IJSRuntime jSRuntime
@inject IServiceScopeFactory ServiceScopeFactory
@{
    var style = "width: 300px; height: 360px;background-size:";
    if (PrintParam.Stretch)
        style += "100% 100%";
    else
        style += "auto";
}
<Window @bind-Status="Status" Title="Add/Remove image" Style="width:335px">
    <div class="row p-2 c-controls">
        @if (Params == null)
        {
            <div class="ustify-content-center d-flex pt-2 pb-2">
                <Fileupload Style="width:300px;height:360px;" OnChange="ViewFile">
                    <PictureBox style="@style" class="c-image-frame" NoContentTitle="Click to upload" Data="fileContent" />
                </Fileupload>
            </div>
        }
        else
        {
            <div class="col-md-5">
                <label>Data field</label>
            </div>
            <div class="col-md-7">
                <ComboBox TEntity="SelectListItem" TValue="string" @bind-Value="PrintParam.TitleEn" Source="Params" />
            </div>
        }
        <div class="col-md-5">
            <label>Stretch</label>
        </div>
        <div class="col-md-7">
            <CheckBox @bind-Value="PrintParam.Stretch" />
        </div>
        <div class="col-md-5"></div>
        <div class="justify-content-center col-md-7 d-flex pt-3 pb-2">
            <button @onclick="async () => await StatusChanged.InvokeAsync(WindowStatus.Close)" class="c-btn c-danger">Cancel</button>
            <button @onclick="SaveFile" class="c-btn c-primary">Save</button>
        </div>
    </div>

</Window>
@code
{
    string message;
    bool updateData;
    byte[] fileContent;
    IEnumerable<SelectListItem> Params;

    async Task ViewFile(InputFileChangeEventArgs args)
    {
        fileContent = await args.File.GetByteArrayAsync();
        PrintParam.ImageFileName = Path.GetRandomFileName().Replace(".", "") + Path.GetExtension(args.File.Name);

        StateHasChanged();
    }

    async Task SaveFile()
    {
        if (Params == null)
        {
            if (!PrintParam.ImageFileName.HasValue())
                message = "لطفا فایل تصوبر را مشخص نمایید.";
            else
            {
                var path = Assembly.GetExecutingAssembly().GetMapPath() + "\\Data\\Report\\Images\\" + PrintParam.ImageFileName;
                await File.WriteAllBytesAsync(path, fileContent);
                updateData = true;
                Status = WindowStatus.Close;
            }
        }
        else
        {
            if (PrintParam.TitleEn.HasValue())
            {
                updateData = true;

                Status = WindowStatus.Close;
            }
            else
                message = "لطفا فیلد داده را مشخص نمایید.";
        }
    }

    [Parameter]
    public PrintParam PrintParam { get; set; }


    protected async override Task OnParametersSetAsync()
    {
        if (PrintParam.DataLevel.HasValue)
        {
            using var scope = ServiceScopeFactory.CreateScope();
            Params = (await new PrintReport(scope).GetFiledsProperty(PrintParam.ReportId.Value, PrintParam.DataLevel.Value))
            .Select(t => new SelectListItem(t.Key, t.Value));
        }
        else
            Params = null;
        if (PrintParam.ImageFileName.HasValue())
        {
            var path = Assembly.GetExecutingAssembly().GetMapPath() + "\\Data\\Report\\Images\\" + PrintParam.ImageFileName;
            fileContent = await File.ReadAllBytesAsync(path);
        }
        await base.OnParametersSetAsync();
    }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (message.HasValue())
        {
            await jSRuntime.InvokeVoidAsync("$.caspian.showMessage", message);
            message = null;
        }
        if (updateData)
        {
            string image = null;
            if (fileContent != null)
                image = Convert.ToBase64String(fileContent);
            if (Params != null && PrintParam.TitleEn.HasValue())
                PrintParam.TitleFa = Params.Single(testc => testc.Value == PrintParam.TitleEn).Text;
            await jSRuntime.InvokeVoidAsync("$.report.setImage", image, PrintParam);
            updateData = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
