@namespace Caspian.Engine.ReportPrint
@inject IJSRuntime jsRundTime

<Window Status="Status" Style="width:400px" Title="Columns properties">
    <div class="row p-2 c-controls">
        <div class="col-md-5">
            <label>New page before Bond</label>
        </div>
        <div class="col-md-7">
            <CheckBox @bind-Value="Bond.NewPageAfter" />
        </div>
        <div class="col-md-5">
            <label>New page after Bond</label>
        </div>
        <div class="col-md-7 ">
            <CheckBox @bind-Value="Bond.NewPageBefore" />
        </div>
        @if (MinDataLevel.HasValue && Bond.BondType == BondType.DataBond)
        {
            if (MinDataLevel == Bond.DataLevel)
            {
                <div class="col-md-5">
                    <label>Columns count</label>
                </div>
                <div class="col-md-7">
                    <DropdownList @bind-Value="Bond.ColumnsCount" />
                </div>
                <div class="col-md-5">
                    <label>Columns margin</label>
                </div>
                <div class="col-md-7">
                    <NumericTextBox @bind-Value="Bond.ColumnsMargin" />
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center d-flex pt-3 pb-3">
                    <span style="font-weight:bold;color:red">In each page of the report, only the last level of data can have multiple columns.</span>
                    <span style="display:block;font-weight:bold">If you want more than one level of data to have several columns, use the sub-report</span>
                </div>
            }
        }
        <div class="col-md-5"></div>
        <div class="col-md-7 justify-content-center d-flex pt-3 pb-2">
            <button style="width:70px;" @onclick="async () => await StatusChanged.InvokeAsync(WindowStatus.Close)" class="c-btn c-danger">Cancel</button>
            <button style="width:70px;" @onclick="UpdateData" class="c-btn c-primary">Save</button>
        </div>
    </div>
</Window>
@code
{
    bool isUpdate;
    async Task UpdateData()
    {
        isUpdate = true;
        await StatusChanged.InvokeAsync(WindowStatus.Close);
    }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }

    [Parameter]
    public Bond Bond { get; set; }

    [Parameter]
    public int? MinDataLevel { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isUpdate)
        {
            var count = Bond.ColumnsCount.ConvertToInt().GetValueOrDefault(1);
            var margin = Bond.ColumnsMargin.GetValueOrDefault(0);
            await jsRundTime.InvokeVoidAsync("$.report.updateColumnsData", count, margin, Bond.NewPageAfter, Bond.NewPageBefore);
            isUpdate = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
