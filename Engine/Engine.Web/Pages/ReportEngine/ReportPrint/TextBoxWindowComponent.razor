@namespace Caspian.Engine.ReportPrint
@inject IJSRuntime jsRundTime
@inherits BasePage
<Window @bind-Status="Status" Style="width:400px;" Id="newEditForm" Title="Textbox Control">
    <div class="row c-controls p-2">
        <div class="col-md-4">
            <label>Textbox text</label>
        </div>
        <div class="col-md-8">
            <StringTextBox @bind-Value="PrintParam.TitleFa"
                           Disabled="PrintParam.TotalFuncType.HasValue || PrintParam.TitleEn.HasValue() || PrintParam.SystemVariable.HasValue || PrintParam.SystemFiledType.HasValue" />
        </div>
        @if (PrintParam.BondType == BondType.DataFooter)
        {
            <div class="col-md-4">
                <label>Method name</label>
            </div>
            <div class="col-md-8">
                <DropdownList TValue="TotalFuncType?" Value="PrintParam.TotalFuncType"
                              Disabled="PrintParam.TitleFa.HasValue() && PrintParam.TotalFuncType == null || PrintParam.SystemFiledType.HasValue"
                              ValueChanged="@(value =>
                                                          {
                                                              PrintParam.TotalFuncType = value;
                                                              PrintParam.TitleFa = '{' + PrintParam.TotalFuncType.EnumText() + '}';
                                                          })" />
            </div>
            <div class="col-md-4">
                <label>Alias</label>
            </div>
            <div class="col-md-8">
                <StringTextBox @bind-Value="PrintParam.EqualName" Disabled="PrintParam.TotalFuncType == null" />
            </div>
            @if (Params != null)
            {
                <div class="col-md-4">
                    <label>Data field</label>
                </div>
                <div class="col-md-8">
                    <ComboBox TEntity="SelectListItem" TValue="string" Source="Params" @bind-Value="PrintParam.TitleEn"
                              Disabled="PrintParam.TitleFa.HasValue() && PrintParam.TotalFuncType == null || PrintParam.SystemFiledType.HasValue || PrintParam.TotalFuncType == null" />
                </div>
            }
        }
        else if (Params != null)
        {
            <div class="col-md-4">
                <label>Data field</label>
            </div>
            <div class="col-md-8">
                <ComboBox TEntity="SelectListItem" TValue="string" Source="Params" Value="PrintParam.TitleEn"
                          Disabled="PrintParam.TitleFa.HasValue() && PrintParam.TitleEn == null || PrintParam.SystemFiledType.HasValue || PrintParam.TotalFuncType.HasValue"
                          ValueChanged="value =>
                                                    {
                                                        PrintParam.TitleEn =  value;
                                                        if (PrintParam.TitleEn.HasValue())
                                                             PrintParam.TitleFa = '{' + Params.Single(t => t.Value == PrintParam.TitleEn).Text + '}';
                                                         else
                                                            PrintParam.TitleFa = null;
                                                    }" />
            </div>
        }
        @if (PrintParam.BondType == BondType.ReportTitle)
        {
            <div class="col-md-4">
                <label>System variable</label>
            </div>
            <div class="col-md-8">
                <DropdownList TValue="SystemVariable?" Value="PrintParam.SystemVariable"
                              Disabled="PrintParam.TitleFa.HasValue() && PrintParam.SystemVariable == null"
                              ValueChanged="value =>
                                                        {
                                                            PrintParam.SystemVariable = value;
                                                            PrintParam.TitleFa =  PrintParam.SystemVariable.HasValue ? ('{' + PrintParam.SystemVariable.EnumText() + '}') : null;
                                                        }" />
            </div>
        }
        else if (PrintParam.BondType != BondType.DataHeader)
        {
            <div class="col-md-4">
                <label>System filed</label>
            </div>
            <div class="col-md-8">
                <DropdownList TValue="SystemFiledType?" Value="PrintParam.SystemFiledType"
                              Disabled="PrintParam.TitleFa.HasValue() && PrintParam.SystemFiledType == null || PrintParam.TotalFuncType.HasValue"
                              ValueChanged="value =>
                                                        {
                                                            PrintParam.SystemFiledType = value;
                                                            PrintParam.TitleFa = '{' + PrintParam.SystemFiledType.EnumText() + '}';
                                                             StateHasChanged();
                                                        }" />
            </div>
        }
        <div class="col-md-4"></div>
        <div class="col-md-8 justify-content-center d-flex pt-3 pb-2">
            <button style="width:70px;" @onclick="async () => await StatusChanged.InvokeAsync(WindowStatus.Close)" class="c-btn c-danger">Cancel</button>
            <button style="width:70px;" @onclick="() => updateData = true" class="c-btn c-primary">Save</button>
        </div>
    </div>
</Window>

@code
{
    string member;
    bool updateData;
    IEnumerable<SelectListItem> Params;

    [Parameter]
    public PrintParam PrintParam { get; set; }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }


    protected async override Task OnParametersSetAsync()
    {
        if (PrintParam.DataLevel.HasValue || PrintParam.BondType == BondType.DataFooter)
        {
            if (PrintParam.BondType == BondType.DataFooter)
                PrintParam.DataLevel = 1;
            using var scope = CreateScope();
            
            Params = (await new PrintReport(scope).GetFiledsProperty(PrintParam.ReportId.Value, PrintParam.DataLevel.Value))
                .Select(t => new SelectListItem(t.Key, t.Value));
            if (PrintParam.TitleEn.HasValue() && !Params.Any(t => t.Value == PrintParam.TitleEn))
                PrintParam.TitleEn = null;
        }
        else
            Params = null;

        if (!PrintParam.TitleFa.HasValue())
        {
            if (PrintParam.SystemFiledType.HasValue)
                PrintParam.TitleFa = $"{{{PrintParam.SystemFiledType.EnumText()}}}";
            if (PrintParam.SystemVariable.HasValue)
                PrintParam.TitleFa = $"{{{PrintParam.SystemVariable.EnumText()}}}";
        }
        if (PrintParam.TitleFa == "{}")
            PrintParam.TitleFa = "";
        await base.OnParametersSetAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (updateData)
        {
            if (PrintParam.SystemVariable.HasValue)
            {
                PrintParam.Member = '{' + PrintParam.SystemVariable.Value.ToString() + '}';
                PrintParam.TitleFa = '{' + PrintParam.SystemVariable.EnumText() + '}';
            }
            if (PrintParam.SystemFiledType.HasValue)
            {
                PrintParam.Member = '{' + PrintParam.SystemFiledType.Value.ToString() + '}';
                PrintParam.TitleFa = '{' + PrintParam.SystemFiledType.EnumText() + '}';
            }
            if (PrintParam.TitleEn.HasValue())
            {
                PrintParam.TitleFa = '{' + Params.Single(t => t.Value == PrintParam.TitleEn).Text + '}';
                PrintParam.Member = PrintParam.TitleEn;
            }
            updateData = false;
            var json = System.Text.Json.JsonSerializer.Serialize(PrintParam);
            await jsRundTime.InvokeVoidAsync("$.report.updateTextWindowData", PrintParam);
            Status = WindowStatus.Close;
            await StatusChanged.InvokeAsync(Status);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
