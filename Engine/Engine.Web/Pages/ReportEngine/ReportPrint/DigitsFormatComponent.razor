@namespace Caspian.Engine.ReportPrint

@inject IJSRuntime jsRundTime

@{
    if (!Param.DigitGroup)
        Param.GroupNumberChar = null;
    if (Param.DecimalChar == null)
        Param.NumberDigits = null;
}

<Window Status="Status" Style="width:400px" Title="Digit formats">
    <div class="row p-2 c-controls">
        <div class="col-md-5">
            <label>Digit grouping</label>
        </div>
        <div class="col-md-7">
            <CheckBox @bind-Value="Param.DigitGroup" />
        </div>
        <div class="col-md-5">
            <label>Grouping character</label>
        </div>
        <div class="col-md-7">
            <DropdownList @bind-Value="Param.GroupNumberChar" Disabled="!Param.DigitGroup" />
        </div>
        <div class="col-md-5">
            <label>Point character</label>
        </div>
        <div class="col-md-7">
            <DropdownList @bind-Value="Param.DecimalChar" />
        </div>
        <div class="col-md-5">
            <label>Number of decimal</label>
        </div>
        <div class="col-md-7">
            <NumericTextBox @bind-Value="Param.NumberDigits" Disabled="Param.DecimalChar == null" />
        </div>
        <div class="col-md-5"></div>
        <div class="col-md-7 justify-content-center d-flex pt-3 pb-2">
            <button class="c-btn c-danger" @onclick="async () => await StatusChanged.InvokeAsync(WindowStatus.Close)">Cancel</button>
            <button class="c-btn c-primary" @onclick="SetFormat">Save</button>
        </div>
    </div>
</Window>


@code
{
    bool isUpdated;
    string message;

    async void SetFormat()
    {
        if (Param.DigitGroup && Param.GroupNumberChar == null)
            message = "Please specify the separator character";
        if (Param.DecimalChar.HasValue && Param.NumberDigits == null)
            message = "Please specify the number of decimal places";
        if (!message.HasValue())
        {
            isUpdated = true;
            await StatusChanged.InvokeAsync(WindowStatus.Close);
        }
    }

    [Parameter]
    public PrintParam Param { get; set; }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (isUpdated)
        {
            await jsRundTime.InvokeVoidAsync("$.report.setFormat", Param);
            isUpdated = false;
        }
        if (message.HasValue())
        {
            await jsRundTime.InvokeVoidAsync("caspian.common.showMessage", message);
            message = null;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
