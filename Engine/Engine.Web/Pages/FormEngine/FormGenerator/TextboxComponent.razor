@namespace Caspian.Engine.FormGenerator

@inject IJSRuntime JSRuntime

<Window @bind-Status="Status" Style="width:500px;" Title="جعبه متن">
    <Content>
        <table style="width:90%;margin:0 auto">
            <tr>
                <td><label>عنوان</label></td>
                <td>
                    <StringTextBox @bind-Value="Control.Text" />
                </td>
            </tr>
            <tr>
                <td><label>نوع کنترل</label></td>
                <td>
                    <DropdownList @bind-Value="Control.InputControlType" />
                </td>
            </tr>
            <tr>
                <td><label>اجباری داده</label></td>
                <td>
                    <CheckBox @bind-Value="Control.IsRequired" />
                </td>
            </tr>
            <tr>
                <td><label>چند خطی</label></td>
                <td>
                    <CheckBox @bind-Value="Control.MultiLine" Disabled="Control.InputControlType != InputControlType.String" />
                </td>
            </tr>
            <tr>
                <td></td>
                <td style="text-align:center;height:60px;">
                    <button class="c-btn c-primary" style="width:75px;margin-left:15px" @onclick="InitTextBox">ثبت</button>
                    <button class="c-btn c-danger" style="width:75px;"
                            @onclick="async () =>
                                      {
                                          await StatusChanged.InvokeAsync(WindowStatus.Close);
                                      }">
                        انصراف
                    </button>
                </td>
            </tr>
        </table>
    </Content>
</Window>
@code
{
    bool isUpdated;
    string message;
    async void InitTextBox()
    {
        if (!Control.Text.HasValue())
            message = "لطفا عنوان کنترل را مشخص نمایید";
        else if (Control.InputControlType == null)
            message = "لطفا نوع کنترل را مشخص نمایید";
        else
        {
            isUpdated = true;
            await StatusChanged.InvokeAsync(WindowStatus.Close);
        }
    }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }

    [Parameter]
    public FormControl Control { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (message.HasValue())
        {
            await JSRuntime.InvokeVoidAsync("$.telerik.showMessage", message);
            message = null;
        }
        if (isUpdated)
        {
            await JSRuntime.InvokeVoidAsync("$.form.updateTextbox", Control);
            isUpdated = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
