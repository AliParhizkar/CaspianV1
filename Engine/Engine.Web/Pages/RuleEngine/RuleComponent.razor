@namespace Caspian.Engine.RuleGenerator
@using Caspian.Common.Attributes
@inherits SimplePage<Rule>
@{
    base.BuildRenderTree(__builder);
}
<div class="p-4">
    <div class="row c-controls ps-4 pe-4">
        <div class="col-md-4">
            <label>عنوان</label>
        </div>
        <div class="col-md-8">
            <StringTextBox @bind-Value="SearchData.Title" />
        </div>
    </div>
    <DataGrid @ref="CrudGrid" TEntity="Rule" ConditionExpr="t => t.SystemKind == Subsystem" Search="SearchData" ContentHeight="300">
        <Columns>
            <GridColumn Field="t => t.Title" />
            <GridColumn Field="t => t.ResultType.EnumText()" Title="نوع خروجی" />
            <GridColumn Field="t => t.Priority" />
            <GridColumn Field="t => t.IsValid" Title="نهایی" />
            <GridColumn Title="ایجاد" style="width:80px">
                <Template>
                    <a href="/Engine/RuleEngine/@(context.Data.Id)" target="_blank">...</a>
                </Template>
            </GridColumn>
            <GridColumn Title="بررسی" style="width:60px">
                <Template>
                    <span class="c-btn c-primary r-check" @onclick="async () => await SetPriority(context.Data.Id)">
                        <i class="fa fa-check"></i>
                    </span>
                </Template>
            </GridColumn>
            <GridCommandColumns />
        </Columns>
    </DataGrid>

</div>

<Window @ref="UpsertWindow" Title="فرمول" Style="width:450px">
    <Content>
        <CaspianForm @ref="UpsertForm" Model="UpsertData" OnSubmit="() => UpsertData.SystemKind = Subsystem">
            @{
                var disable = UpsertData.Priority != null;
            }
            <div class="row c-controls ps-4 pe-4">
                <div class="col-md-4">
                    <label>نوع فرمول</label>
                </div>
                <div class="col-md-8">
                    <ComboBox TEntity="SelectListItem" TValue="string" @bind-Value="UpsertData.TypeName"
                              Disabled="disable" Source="RuleTypes" />
                </div>
                <div class="col-md-4">
                    <label>نوع خروجی</label>
                </div>
                <div class="col-md-8">
                    <DropdownList @bind-Value="UpsertData.ResultType" Disabled="disable" />
                </div>
                @if (UpsertData.ResultType == ValueTypeKind.Enum)
                {
                    <div class="col-md-4">
                        <label>نوع شمارشی</label>
                    </div>
                    <div class="col-md-8">
                        <DropdownList @bind-Value="UpsertData.EnumTypeName" Source="modelEnums" Disabled="disable" />
                    </div>
                }
                <div class="col-md-4">
                    <label>قانون فرم</label>
                </div>
                <div class="col-md-8">
                    <CheckBox @bind-Value="UpsertData.FormRule" Disabled="disable" />
                </div>
                <div class="col-md-4">
                    <label>عنوان</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.Title" />
                </div>
                <div class="col-md-4">
                    <label>شرح</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.Descript" MultiLine Rows="3" />
                </div>
                <div class="col-md-4"></div>
                <div class="col-md-8">
                    <FormCommandButton />
                </div>
            </div>
        </CaspianForm>
    </Content>
</Window>


@code
{
    IList<SelectListItem> RuleTypes;
    IList<SelectListItem> modelEnums;

    [Parameter]
    public SubSystemKind Subsystem { get; set; }

    protected override void OnInitialized()
    {
        RuleTypes = new AssemblyInfo().GetRuleTypes(Subsystem).Select(t => new SelectListItem(t.Key, t.Value)).ToList();
        modelEnums = Subsystem.GetEntityAssembly().GetTypes().Where(t => t.IsEnum).Select(t => new SelectListItem
            {
                Value = t.Name,
                Text = t.GetCustomAttribute<EnumTypeAttribute>()?.Title ?? t.Name
            }).ToList();
        base.OnInitialized();
    }

    async Task SetPriority(int ruleId)
    {
        var scope = CreateScope();
        var service = new RuleService(scope.ServiceProvider);
        var rule = await service.GetAll().Include(t => t.Tokens).Include("Tokens.DynamicParameter")
            .Include("Tokens.RuleValue").SingleAsync(ruleId);
        rule.Priority = service.CalculateRulePriority(rule);
        await service.SaveChangesAsync();
        await CrudGrid.ReloadAsync();
    }
}
