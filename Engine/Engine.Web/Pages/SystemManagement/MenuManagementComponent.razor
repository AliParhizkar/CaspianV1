@namespace Caspian.Engine.SystemManagement
@inherits SimplePage<Menu>
@inject SingletonMenuService service


<div class="row c-controls">
    <div class="col-md-2">
        <label>Main menu</label>
    </div>
    <div class="col-md-4 pe-4">
        <ComboBox TValue="int?" TEntity="MenuCategory" @bind-Value="SearchData.MenuCategoryId"
                  TextExpression="t => t.Title" ConditionExpression="t => t.SubSystemKind == Subsystem" />
    </div>
    <div class="col-md-2 ps-4">
        <label>Menu</label>
    </div>
    <div class="col-md-4 pe-4">
        <StringTextBox @bind-Value="SearchData.Title" />
    </div>
    <div class="col-md-2">
        <label>Only untitled menus</label>
    </div>
    <div class="col-md-2">
        <CheckBox @bind-Value="OnlyUntitledMenus" OnChange="() => CrudGrid.EnableLoading()" />
    </div>
    <div class="col-md-2">
        <label>Show in menu</label>
    </div>
    <div class="col-md-2">
        <CheckBox @bind-Value="ShowInMenu" OnChange="() => CrudGrid.EnableLoading()" />
    </div>
    <div class="col-md-2">
        <label>Invalid address</label>
    </div>
    <div class="col-md-2">
        <CheckBox @bind-Value="InvalidAddress" OnChange="() => CrudGrid.EnableLoading()" />
    </div>
    <div class="col-md-2">
        <label>Source</label>
    </div>
    <div class="col-md-4 pe-4">
        <StringTextBox @bind-Value="SearchData.Source" />
    </div>
    <div class="col-md-3 text-center">
        <IconButton @onclick="async () => await UpdateMenus()" IconType="IconType.Refresh" title="Update menus" />
    </div>
    <div class="col-md-3 text-center">
        <IconButton @onclick="async () => await LoadMenus()" IconType="IconType.Refresh" title="Load menus" />
    </div>
    <div class="pt-4">
        <DataGrid @ref="CrudGrid" TEntity="Menu" TableHeight="300" HideInsertIcon ConditionExpr='t => (InvalidAddress == null || t.InvalidAddress == InvalidAddress) && (ShowInMenu == null || t.ShowonMenu == ShowInMenu.Value) && (!OnlyUntitledMenus || t.Title == null) && t.SubSystemKind == Subsystem'>
            <Columns>
                <GridColumn Field="t => t.Id" Title="Id" />
                <GridColumn Field="t => t.MenuCategory.Title" Title="main menu" />
                <GridColumn Field="t => t.Title" />
                <GridColumn Field="t => t.Source" />
                <GridColumn Field="t => t.Ordering" style="width:100px;" />
                <GridColumn Field="t => t.ShowonMenu" style="width:100px;" />
                <GridCommandColumns HideDelete />
            </Columns>
        </DataGrid>
    </div>
    <Window @ref="UpsertWindow" Title="Menu" Style="width:500px;">
        <Content>
            <CaspianForm @ref="UpsertForm" Model="UpsertData">
                <CaspianValidationValidator ValidatorType="typeof(MenuService)" />
                @{
                    var path = $"/{Subsystem}/Engin";
                    var disable = UpsertData.Source?.StartsWith(path) == true;
                }
                <div class="row c-controls ps-4 pe-4">
                    <div class="col-md-4">
                        <label>Source</label>
                    </div>
                    <div class="col-md-8">
                         <StringTextBox @bind-Value="UpsertData.Source" readonly Disabled="disable" />
                    </div>
                    <div class="col-md-4">
                        <label>Menu category</label>
                    </div>
                    <div class="col-md-8">
                        <ComboBox TValue="int?" TEntity="MenuCategory" @bind-Value="UpsertData.MenuCategoryId"
                                  TextExpression="t => t.Title" Disabled="disable"
                                  ConditionExpression='t => t.SubSystemKind == Subsystem && t.Title != "Engin"' />
                    </div>
                    <div class="col-md-4">
                        <label>Title</label>
                    </div>
                    <div class="col-md-8">
                        <StringTextBox @bind-Value="UpsertData.Title" Disabled="disable" />
                    </div>
                    <div class="col-md-4"></div>
                    <div class="col-md-8 ps-2">
                        <CheckBox @bind-Value="UpsertData.ShowonMenu" Title="Show on menu" Disabled="disable" />
                    </div>
                    <div class="col-md-12 ps-5 text-center">
                        <FormCommandButton disabled="@disable" />
                    </div>
                </div>
            </CaspianForm>
        </Content>
    </Window>
</div>

@code
{
    bool? ShowInMenu;
    bool? InvalidAddress;
    bool OnlyUntitledMenus;

    [Parameter]
    public SubSystemKind Subsystem { get; set; }

    string ClearSource(string str)
    {
        var index = str.IndexOf('{');
        if (index >= 0)
            str = str.Substring(0, index - 1);
        index = str.IndexOf('?');
        if (index >= 0)
            str = str.Substring(0, index);
        return str;
    }

    async Task LoadMenus()
    {
        var scope = CreateScope();
        service.Categories = await new MenuCategoryService(scope.ServiceProvider).GetAll().ToListAsync();
        service.Menus = await new MenuService(scope.ServiceProvider).GetAll().ToListAsync();
    }

    async Task UpdateMenus()
    {
        var components = new AssemblyInfo().GetWebTypes(Subsystem);
        var list = new List<string>();
        foreach (var component in components)
        {
            var routeAttribute = component.GetCustomAttributes<RouteAttribute>().FirstOrDefault();
            if (routeAttribute != null)
            {
                var source = ClearSource(routeAttribute.Template);

                if (source.StartsWith("/" + Subsystem, StringComparison.OrdinalIgnoreCase))
                    list.Add(source);
                else
                    throw new CaspianException("خطا: On type " + component.Name + " path shold start with /" + Subsystem + " but is " + source, null);
            }
        }
        using var scope = ServiceScopeFactory.CreateScope();
        var service = new MenuService(scope.ServiceProvider);
        var menus = await service.GetAll().Where(t => t.Source.ToLower().StartsWith("/" + Subsystem.ToString().ToLower())).ToListAsync();
        foreach (var item in list)
        {
            var menu = menus.SingleOrDefault(t => t.Source.Equals(item, StringComparison.OrdinalIgnoreCase));
            if (menu == null)
            {
                ///Insert menu
                await service.AddAsync(new Menu()
                    {
                        Source = item,
                        SubSystemKind = Subsystem
                    });
                await service.SaveChangesAsync();
            }
            else if (menu.Source != item)
            {
                ///Update source
                var old = await service.SingleAsync(menu.Id);
                if (old.Title.HasValue())
                {
                    old.Source = item;
                    old.SubSystemKind = Subsystem;
                    await service.UpdateAsync(old);
                    await service.SaveChangesAsync();
                }
            }
        }
        await CrudGrid.ResetGrid();
    }
}
