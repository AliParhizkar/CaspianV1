@namespace Caspian.Engine.UserManagement
@inherits BasePage
@if (user != null)
{
    <div class="c-data-containner row c-controls">
        <div class="col-md-2">
            <label>Role title</label>
        </div>
        <div class="col-md-7">
            <span>@user.Title</span>
        </div>
        <div class="col-md-3 text-center">
            <button @onclick="SaveData" class="c-btn c-primary">Save All</button>
        </div>
    </div>
    <TreeView @ref="tree" TEntity="NodeView" OnChange="Change" style="height:calc(100vh - 105px);margin-right:5px;" Source="source" />
}
@code
{
    TreeView<NodeView> tree;
    IList<NodeView> source;
    Role user;

    async Task SaveData()
    {
        using var service = CreateScope().GetService<MenuAccessibilityService>();
        var ids = tree.GetSeletcedItems().Where(t => t.Depth == 2).Select(t => Convert.ToInt32(t.Value)).ToList();
        ///منوهایی که در پایگاه داده به نقش تخصیص داده شده اند
        var oldMenusId = await service.GetAll().Where(t => t.RoleId == RoleId && t.Menu.MenuCategory.SubSystemKind == SubSystem).Select(t => t.MenuId).ToListAsync();
        ///منوهایی که در درخت انتخاب شده اند ولی در پایگاه داده وجود ندارند
        var menusShouldAdded = ids.Where(t => !oldMenusId.Contains(t));
        ///منوهایی که در پایگاه داده وجود دارند ولی در درخت انتخاب نشده اند
        var menusShouldRemoved = oldMenusId.Where(t => !ids.Contains(t));
        await service.AddRangeAsync(menusShouldAdded.Select(t => new MenuAccessibility()
            {
                MenuId = t,
                RoleId = RoleId
            }));
        var query = service.GetAll().Where(t => menusShouldRemoved.Contains(t.MenuId) && t.RoleId == RoleId);
        service.RemoveRange(query);
        await service.SaveChangesAsync();
        ShowMessage("Registration was done successfully");
    }

    void Change(NodeView item)
    {
        if (item.Children != null)
        {
            foreach (var child in item.Children)
                child.Selected = item.Selected;
        }
        var parent = item.Parent;
        if (parent != null)
        {
            var siblings = parent.Children;
            if (siblings.All(t => t.Selected == true))
                parent.Selected = true;
            else if (siblings.All(t => t.Selected == false))
                parent.Selected = false;
            else
                parent.Selected = null;
            parent = parent.Parent;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var scope = CreateScope();
        user = await new RoleService(scope.ServiceProvider).SingleAsync(RoleId);
        await InitializData();
        await base.OnInitializedAsync();
    }

    async Task InitializData()
    {
        using var scope = CreateScope();
        source = await new MenuCategoryService(scope.ServiceProvider).GetAll().Where(t => t.SubSystemKind == SubSystem)
            .Select(t => new NodeView()
                {
                    Text = t.Title,
                    Expanded = true,
                    Selectable = true,
                    Value = t.Id.ToString(),
                    Children = t.Menus.Select(u => new NodeView()
                    {
                        Collabsable = false,
                        Text = u.Title,
                        Selected = u.Accessibilities.Any(x => x.RoleId == RoleId),
                        Value = u.Id.ToString(),
                        Selectable = true,
                        Expanded = true
                    }).ToList()
                }).ToListAsync();
        foreach (var item in source)
        {
            var items = item.Children;
            if (items != null)
            {
                if (items.All(t => t.Selected == true))
                    item.Selected = true;
                else if (items.All(t => t.Selected == false))
                    item.Selected = false;
                else
                    item.Selected = null;
            }
        }
    }

    [Parameter]
    public int RoleId { get; set; }

    [Parameter]
    public SubSystemKind? SubSystem { get; set; }
}
                                                    