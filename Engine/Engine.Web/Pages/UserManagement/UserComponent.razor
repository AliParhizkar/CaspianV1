@namespace Caspian.Engine.UserManagement
@inherits SimplePage<User>
@{
    base.BuildRenderTree(__builder);
}
<div class="row c-controls">
    <div class="col-md-2">
        <label>Last name</label>
    </div>
    <div class="col-md-4 pe-3">
        <StringTextBox @bind-Value="SearchData.LName" />
    </div>
    <div class="col-md-2 ps-3">
        <label>Username</label>
    </div>
    <div class="col-md-4">
        <StringTextBox @bind-Value="SearchData.UserName" />
    </div>
</div>
<DataGrid @ref="CrudGrid" TEntity="User" ContentHeight="400">
    <Columns>
        <GridColumn Field="t => t.FName" />
        <GridColumn Field="t => t.LName" />
        <GridColumn Field="t => t.UserName" />
        <GridColumn Field="t => t.Email" />
        <GridColumn Field="t => t.MobileNumber" />
        <GridColumn Title="Menus" style="width:80px">
            <Template>
                <IconButton Href='@($"/{SubSystemKind.ToString()}/UserManagement/UserAccess/{context.Data.Id}")' IconType="IconType.Wpforms" />
            </Template>
        </GridColumn>
        <GridColumn Title="Menus-Tree" style="width:90px">
            <Template>
                <IconButton Href='@($"/{SubSystemKind.ToString()}/UserManagement/UserAccessTree/{context.Data.Id}")' IconType="IconType.Wpforms" />
            </Template>
        </GridColumn>
        <GridCommandColumns />
    </Columns>
</DataGrid>
<Window @ref="UpsertWindow" Title="User properties" Style="width:500px">
    <Content>
        <CaspianForm @ref="UpsertForm" Model="UpsertData" OnSubmit="SetPasswordForUpdate" OnValidSubmit="CheckConfirmPassword">
            <div class="row c-controls ps-3 pe-3">
                <div class="col-md-4">
                    <label>First name</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.FName" />
                </div>
                <div class="col-md-4">
                    <label>Last name</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.LName" />
                </div>
                <div class="col-md-4">
                    <label>User name</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.UserName" Disabled="UpsertData.Id > 0" />
                </div>
                @if (UpsertData.Id == 0)
                {
                    <div class="col-md-4">
                        <label>Password</label>
                    </div>
                    <div class="col-md-8">
                        <StringTextBox @bind-Value="UpsertData.Password" type="password" />
                    </div>
                    <div class="col-md-4">
                        <label>Confirm password</label>
                    </div>
                    <div class="col-md-8">
                        <StringTextBox @bind-Value="confirmPassword" type="password" />
                    </div>
                }
                <div class="col-md-4">
                    <label>Email</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.Email" type="password" />
                </div>
                <div class="col-md-4">
                    <label>Mobile number</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.MobileNumber" />
                </div>
                <div class="col-md-4"></div>
                <div class="col-md-8 text">
                    <FormCommandButton />
                </div>
            </div>
        </CaspianForm>
    </Content>
</Window>


@code
{
    string confirmPassword;

    protected override void OnParametersSet()
    {
        if (SubSystemKind == null)
            throw new CaspianException("خطا: SubSystemKind must initialized");
        base.OnParametersSet();
    }

    async Task SetPasswordForUpdate(EditContext context)
    {
        if (UpsertData.Id > 0)
        {
            var scope = CreateScope();
            var old = await new UserService(scope.ServiceProvider).SingleAsync(UpsertData.Id);
            UpsertData.UserName = old.UserName;
            ///In update password should be and in service not changed
            UpsertData.Password = null;
        }
    }

    Task<bool> CheckConfirmPassword(EditContext context)
    {
        if (confirmPassword != UpsertData.Password)
        {
            ShowMessage("Password and Confirm password is not equal");
            StateHasChanged();
            return Task.FromResult(false);
        }
        return Task.FromResult(true);
    }

    [Parameter]
    public SubSystemKind? SubSystemKind { get; set; }
}
