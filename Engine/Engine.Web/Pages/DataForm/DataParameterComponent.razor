@inherits BasePage
@namespace Caspian.Engine.RuleGenerator
@{
    base.BuildRenderTree(__builder);
}

<CrudComponent UpsertData="dataParameter">
    <div class="p-4">
        <DataGrid TEntity="DataParameter" Search="search" ConditionExpr="t => t.ResultParameterId == ParameterId">
            <Columns>
                <GridColumn Field="t => t.ParameterType.EnumText()" />
                <GridColumn Field="t => t.PropertyName">
                    <Template>
                        <span>@properties.SingleOrDefault(t => t.Value == context.Data.PropertyName)?.Text</span>
                    </Template>
                </GridColumn>
                <GridColumn Field="@(t => t.DynamicParameter.Title)" Title="پارامتر" />
                <GridColumn Field="@(t => t.Rule.Title)" Title="قانون" />
                <GridCommandColumns />
            </Columns>
        </DataGrid>

    </div>
    <Window Title="فرم داده ای" Style="width:500px"
            OnOpen="() =>
                    {
                        if (dataParameter.Id == 0)
                        {
                            dataParameter.ResultParameterId = ParameterId;
                            dataParameter.ParameterType = DataParameterType.EntityProperties;
                        }

                    }">
        <Content>
            <CaspianForm Model="dataParameter">
                <CaspianValidationValidator ValidatorType="typeof(DataParameterService)" />
                <div class="row ps-3 pe-3 c-controls">
                    <div class="col-md-2">
                        <label>نوع پارامتر</label>
                    </div>
                    <div class="col-md-10">
                        <RadioList @bind-Value="dataParameter.ParameterType" />
                    </div>
                    @if (dataParameter.ParameterType == DataParameterType.DynamicParameters)
                    {
                        <div class="col-md-2">
                            <label>پارامتر</label>
                        </div>
                        <div class="col-md-10">
                            <ComboBox TEntity="DynamicParameter" TValue="int?" @bind-Value="dataParameter.DynamicParameterId" TextExpression="t => t.Title" />
                        </div>
                    }
                    else if (dataParameter.ParameterType == DataParameterType.EntityProperties)
                    {
                        <div class="col-md-2">
                            <label>خصیصه</label>
                        </div>
                        <div class="col-md-10">
                            <ComboBox TEntity="SelectListItem" TValue="string" @bind-Value="dataParameter.PropertyName" Source="properties" />
                        </div>
                    }
                    else
                    {
                        <div class="col-md-2">
                            <label>قانون</label>
                        </div>
                        <div class="col-md-10">
                            <ComboBox TEntity="Rule" TValue="int?" @bind-Value="dataParameter.RuleId" TextExpression="t => t.Title" ConditionExpression="t => t.FormRule" />
                        </div>
                    }
                    <div class="col-md-2"></div>
                    <div class="col-md-10">
                        <FormCommandButton />
                    </div>
                </div>
            </CaspianForm>
        </Content>
    </Window>

</CrudComponent>

@code
{
    DataParameter search = new DataParameter();
    DataParameter dataParameter = new DataParameter();
    IList<SelectListItem> properties;

    protected override async Task OnInitializedAsync()
    {
        using var service = CreateScope().GetService<DynamicParameterService>();
        var param = await service.SingleAsync(ParameterId);
        properties = param.SubSystem.GetEntityAssembly().GetTypes().Single(t => t.Name == param.EntityName).GetProperties()
            .Where(t => t.GetCustomAttribute<RuleAttribute>() != null).Select(t => new SelectListItem(t.Name, t.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? t.Name)).ToList();
        await base.OnInitializedAsync();
    }

    [Parameter]
    public int ParameterId { get; set; }
}
