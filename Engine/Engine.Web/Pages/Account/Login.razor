@page "/Account/Login"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IServiceScopeFactory Scopefactory 

<PageTitle>Log in</PageTitle>


<div class="c-login-container">
    <div class="c-login">
        <div class="c-login-img">
            <img src="/_content/Engine.Web/Content/Images/login.svg" alt="Image" class="img-fluid">
        </div>
    </div>
    <div class="c-login">
        <div class="c-login-form">
            <section>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" style="display:inline" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <div class="p-3 mb-2 bg-info text-white">
                        <p>If you do not have any account you can sign in as guest user and <em>press Gust button</em></p>
                    </div>
                    <h2>Sign in</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                        <label for="username" class="form-label">Username</label>
                        <ValidationMessage For="() => Input.Username" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                            Remember me
                        </label>
                    </div>
                    <div class="c-login-submit">
                        <button type="submit" class="btn-lg btn-primary">Log in</button>
                    </div>
                </EditForm>

                <EditForm Model="gustModel" style="display:inline" method="post" OnSubmit="GuestLogin" FormName="guestlogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3" style="display:none">
                        <InputText @bind-Value="gustModel.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                        <label for="username" class="form-label">Username</label>
                        <ValidationMessage For="() => gustModel.Username" class="text-danger" />
                    </div>

                    <div class="c-login-submit">
                        <button type="submit" class="btn-lg btn-primary">Guest</button>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
</div>

@code {
    private string errorMessage;


    [SupplyParameterFromForm(FormName = "guestlogin")]
    private InputModel gustModel { get; set; } = new() { Username = "guest", Password = "Ali123456" };

    [CascadingParameter]
    private HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm(FormName = "login")]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        if (HttpContext is not null)
        {
            var queryStr = HttpContext.Request.QueryString.Value;


            if (!string.IsNullOrEmpty(queryStr) &&
                    queryStr.Contains("pitch", StringComparison.InvariantCultureIgnoreCase))
            {
                Input.Username = "pitch";
                Input.Password = "Ali123456";

                await LoginUser();
            }
        }
    }

    async Task GuestLogin()
    {
        Input.Username = "guest";
        Input.Password = "Ali123456";

        await LoginUser();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true

        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            using var scope = Scopefactory.CreateScope();
            var user = await scope.GetService<UserService>().GetAll().SingleAsync(t => t.UserName == Input.Username);
            string ip = null, agent = null;
            if (HttpContext != null)
            {
                if (HttpContext.Request.Headers.ContainsKey("User-Agent"))
                    agent = HttpContext.Request.Headers["User-Agent"].ToString();
                agent = agent.Substring(0, Math.Min(agent.Length, 200));
                ip = HttpContext.Connection.RemoteIpAddress?.ToString();
            }
            var service = scope.GetService<UserLoginService>();
            await service.AddAsync(new UserLogin()
            {
                LoginDate = DateTime.Now,
                UserId = user.Id,
                IPAddress = ip,
                UserAgent = agent
            });
            await service.SaveChangesAsync();
            if (!ReturnUrl.HasValue() || ReturnUrl.Contains("pitch", StringComparison.InvariantCultureIgnoreCase))
                ReturnUrl = "/Demo";
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
