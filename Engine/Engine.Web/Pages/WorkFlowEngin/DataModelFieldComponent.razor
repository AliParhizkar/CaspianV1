@using Microsoft.EntityFrameworkCore.Metadata.Internal
@namespace Caspian.Engine.WorkFlow
@inherits SimplePage<DataModelField>
@{
    base.BuildRenderTree(__builder);
    if (UpsertData.EntityFullName.HasValue())
        UpsertData.FieldType = null;
    if (UpsertData.FieldType.HasValue)
        UpsertData.EntityFullName = null;
}

<div class="p-4">
    <DataGrid @ref="CrudGrid" TEntity="DataModelField" ContentHeight="300" ConditionExpr="t => t.DataModelId == DataModelId">
        <Columns>
            <GridColumn Field="t => t.Title" />
            <GridColumn Field="t => t.EntityFullName" />
            <GridColumn Field="t => t.FieldName" />
            <GridColumn Field="t => t.FieldType.EnumText()" />
            <GridColumn Field="t => t.EntityType.Title" Title="Entity type" />
            <GridColumn Field="t => t.IsDetails" style="text-align:center" Title="Collection" />
            <GridColumn style="width:80px;" Title="Options">
                <Template>
                    <IconButton Disabled="context.Data.FieldType != DataModelFieldType.MultiOptions" Href='@($"/{Subsystem.ToString()}/WorkflowEngine/DataModelOption/{context.Data.Id}")' IconType="IconType.Wpforms"  />
                </Template>
            </GridColumn>
            <GridCommandColumns />
        </Columns>
    </DataGrid>
</div>

<Window @ref="UpsertWindow" Title="Data model fields" Style="width:500px" OnOpen="FormOpen">
    <Content>
        <CaspianForm @ref="UpsertForm" Model="UpsertData">
            <div class="row ps-4 pe-4 c-controls">
                <div class="col-md-4">
                    <label>Entity name</label>
                </div>
                <div class="col-md-8">
                    <ComboBox TEntity="SelectListItem" TValue="string" @bind-Value="UpsertData.EntityFullName"
                              Source="workflowEntityTypes" Disabled="UpsertData.FieldType.HasValue" OnChanged="SetFieldData" />
                </div>
                <div class="col-md-4">
                    <label>Field type</label>
                </div>
                <div class="col-md-8">
                    <DropdownList @bind-Value="UpsertData.FieldType" Disabled="UpsertData.EntityFullName.HasValue()" />
                </div>
                <div class="col-md-4">
                    <label>Title</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox @bind-Value="UpsertData.Title" />
                </div>
                <div class="col-md-4">
                    <label>Field name</label>
                </div>
                <div class="col-md-8">
                    <StringTextBox Style="direction:ltr" @bind-Value="UpsertData.FieldName" />
                </div>
                <div class="col-md-4">
                    <label>Entity type</label>
                </div>
                <div class="col-md-8">
                    <ComboBox TEntity="Caspian.Engine.EntityType" TValue="int?" @bind-Value="UpsertData.EntityTypeId"
                        TextExpression="t => t.Title" Disabled="UpsertData.FieldType != DataModelFieldType.Relational"/>
                </div>
                <div class="col-md-4">
                    <label>Collection</label>
                </div>
                <div class="col-md-8">
                    <CheckBox @bind-Value="UpsertData.IsDetails" />
                </div>
                <div class="col-md-4"></div>
                <div class="col-md-8">
                    <FormCommandButton />
                </div>
            </div>
        </CaspianForm>
    </Content>
</Window>

@code
{
    IList<SelectListItem> workflowEntityTypes;

    protected override async Task OnInitializedAsync()
    {
        using var scope = CreateScope();
        var workflow = await new WorkflowGroupService(scope.ServiceProvider).SingleAsync(DataModelId);
        workflowEntityTypes = new AssemblyInfo().GetModelTypes(workflow.SubSystemKind)
            .Where(t => t.CustomAttributes.Any(u => u.AttributeType == typeof(WorkflowEntityAttribute)))
            .Select(t => new SelectListItem(t.Name, t.GetCustomAttribute<WorkflowEntityAttribute>()!.Title)).ToList();
        await base.OnInitializedAsync();
    }

    void SetFieldData()
    {
        if (UpsertData.EntityFullName.HasValue())
        {
            UpsertData.Title = workflowEntityTypes.Single(t => t.Value == UpsertData.EntityFullName).Text;
            UpsertData.FieldName = UpsertData.EntityFullName[0].ToString().ToLower() + UpsertData.EntityFullName.Substring(1);
        }
        else
        {
            UpsertData.Title = null;
            UpsertData.FieldName = null;
        }
    }

    [Parameter]
    public int DataModelId { get; set; }

    [Parameter]
    public SubSystemKind Subsystem { get; set; }

    void FormOpen()
    {
        UpsertData.DataModelId = DataModelId;
    }
}
