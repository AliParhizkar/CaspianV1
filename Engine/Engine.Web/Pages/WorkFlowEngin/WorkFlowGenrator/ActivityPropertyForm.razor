@namespace Caspian.Engine.WorkFlowGenrator
@inject IJSRuntime JSRuntime
<Window @bind-Status="Status" Title="متن و نوع عامل" Style="width:400px">
    <Content>
        <table style="width:90%;margin:0 auto;">
            <tr>
                <td style="width:80px;">
                    <label>عنوان</label>
                </td>
                <td>
                    <StringTextBox @bind-Value="Activity.Title" />
                </td>
            </tr>
            <tr>
                <td>
                    <label>نوع عامل</label>
                </td>
                <td>
                    <DropdownList @bind-Value="Activity.ActorType" />
                </td>
            </tr>
            <tr>
                <td></td>
                <td style="height:60px;text-align:center">
                    <button style="width: 75px;" class="c-btn c-primary" @onclick="SetData">ثبت</button>
                    <button style="width: 75px; margin-left: 15px;" class="c-btn c-danger"
                            @onclick="async () => 
                            { 
                                await StatusChanged.InvokeAsync(WindowStatus.Close); 
                            }" >انصراف</button>
                </td>
            </tr>
        </table>
    </Content>
</Window>

@code
{
    string? message;
    bool DataUpdated;

    async void SetData()
    {
        if (!Activity.Title.HasValue())
            message = "لطفا عنوان فعالیت را مشخص نمایید";
        else if (Activity.ActorType == null)
            message = "لطفا نوع عامل را مشخص نمایید.";
        else
        {
            DataUpdated = true;
            await StatusChanged.InvokeAsync(WindowStatus.Close);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    [Parameter]
    public Activity Activity { get; set; }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataUpdated)
        {
            DataUpdated = false;
            await JSRuntime.InvokeVoidAsync("$.workflow.updateSelectedNodeData", Activity.Title, Activity!.ActorType!.ConvertToInt());
        }
        if (message.HasValue())
        {
            await JSRuntime.InvokeVoidAsync("$.telerik.showMessage", message);
            message = null;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
