@namespace Caspian.Engine.WorkFlowGenrator
@inject IJSRuntime jSRuntime
<Window Status="Status" Style="width:400px">
    <Content>
        <div style="border:1px solid #5d8cc9;margin:5px auto;width:210px">
            <div style="border-bottom: 1px solid lightgray">
                <span style="display:block;text-align:center">متدهای چک</span>
            </div>
            <div style="height: 220px;border-bottom:1px solid lightgray;">
                <RadioList @bind-Value="value" Source="@(Actions.Select(t => new SelectListItem(t.Id.ToString(), t.FaTitle)).ToList())" />
            </div>
        </div>
        <fieldset class="t-widget" style="border-radius:7px;padding:0 10px 8px 17px;margin:0 4px 5px 4px">
            <legend style="color:blue">عملیات</legend>
            <div dir="rtl">
                <button style="width:60px;margin-right:10px;" class="t-button" @onclick="RegisterMethod">ثبت</button>
                <button style="width:60px;" class="t-button" @onclick=" async () => { await StatusChanged.InvokeAsync(WindowStatus.Close); }">انصراف</button>
            </div>
        </fieldset>
    </Content>
</Window>

@code
{
    string value;
    bool isUpdate;
    string message;
    Caspian.Engine.Action selectedAction;

    async void RegisterMethod()
    {
        if (value.HasValue())
        {
            isUpdate = true;
            selectedAction = Actions.Single(t => t.Id.ToString() == value);
            await StatusChanged.InvokeAsync(WindowStatus.Close);
        }
        else
            message = "لطفا یک متد را انتخاب نمایید";
    }

    protected override Task OnParametersSetAsync()
    {
        foreach(var item in Actions)
        {
            if (item.Selected)
                value = item.Id.ToString();
        }
        return base.OnParametersSetAsync();
    }

    [Parameter]
    public IList<Caspian.Engine.Action> Actions { get; set; }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (message.HasValue())
        {
            await jSRuntime.InvokeVoidAsync("$.telerik.showMessage", message);
            message = null;
        }
        if (isUpdate)
        {
            isUpdate = false;
            await jSRuntime.InvokeVoidAsync("$.workflow.updateProcessActivity", selectedAction);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
