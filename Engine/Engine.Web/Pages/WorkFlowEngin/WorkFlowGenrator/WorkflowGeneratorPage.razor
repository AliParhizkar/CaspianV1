@page "/Engine/WorkflowGenerator/{WorkflowId:int}"
@using Newtonsoft.Json
@inherits BasePage
@inject IHostEnvironment Environment 
<div class="c-workflow">
    <div class="c-property-window">

    </div>
    <div id="workflowDesigner" class="c-workflow-designer">
         
    </div>
    <div id="workflowPalette" class="c-workflow-pallete">
    </div>
</div>


@code
{
    [Parameter]
    public int WorkflowId{ get; set; }
    IList<Activity> Activities;

    protected override async Task OnInitializedAsync()
    {
        var scope = CreateScope();
        Activities = await new ActivityService(scope.ServiceProvider).GetAll().Where(t => t.WorkflowId == WorkflowId).ToListAsync();
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public async Task<string> GetActivityCodebehindString(int activityId)
    {
        var scope = CreateScope();
        var code = await new ActivityService(scope.ServiceProvider).GetCodebehindAsync(activityId);
        return code;
    }

    [JSInvokable]
    public async Task<string> getActivitySourceCodeString(int activityId)
    {
        var scope = CreateScope();
        var basePath = Environment.ContentRootPath + "Data\\Code\\";
        var code = await new ActivityService(scope.ServiceProvider).GetSourceCodeAsync(activityId, basePath);
        return code;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var json = JsonConvert.SerializeObject(Activities);
            await jsRuntime.InvokeVoidAsync("$.workflow.init", DotNetObjectReference.Create(this), json);
        }
        await base.OnAfterRenderAsync(firstRender);

    }
}
