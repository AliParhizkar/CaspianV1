@page "/Engine/WorkflowGenerator/{WorkflowId:int}"
@namespace Caspian.Engine.WorkFlow
@using Newtonsoft.Json
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using System.Collections.ObjectModel;
@using global::Engine.Web.Services;
@inherits BasePage
@inject IHostEnvironment Environment 
<div class="c-workflow">
    <div class="c-property-window">
        <div>
            <span @onclick="SaveOnclick" class="fa fa-save"></span>
        </div>
        <WFPropertyWindow Nodes="nodes" Node="selectedNode" connectorsData="connectorsData" Connector="selectedConnector" />
    </div>
    <div id="workflowDesigner" class="c-workflow-designer">
        <SfDiagramComponent ConnectorCreating="ConnectorCreating" Connectors="connectors" Nodes="nodes" NodeCreating="NodeCreating" @ref="diagram" SelectionChanged="NodeSelected" />

    </div>
    <div id="workflowPalette" class="c-workflow-pallete">
        <PaletteComponent @ref="palette" />
    </div>
</div>


@code
{
    Node selectedNode;
    Connector newConnector;
    PaletteComponent palette;
    SfDiagramComponent diagram;
    Connector selectedConnector;
    DiagramObjectCollection<Node> nodes;
    DiagramObjectCollection<Connector> connectors;
    IDictionary<string, ConnectorData> connectorsData;
    string errorMessage;

    async Task SaveOnclick()
    {
        using var scope = CreateScope();
        var service = new ActivityService(scope.ServiceProvider);
        var oldIds = await service.GetActivities(WorkflowId).Select(t => t.Id).ToListAsync();
        var transaction = await service.Context.Database.BeginTransactionAsync();
        foreach(var node in nodes)
        {
            ///Insert & update nodes
            var activity = node.ConvertToActivity();
            activity.WorkflowId = WorkflowId;


            if (node.ID.StartsWith("CNode"))
            {
                var id = Convert.ToInt32(node.ID.Substring(5));
                var old = await service.SingleAsync(id);
                oldIds.Remove(id);
                activity.Id = id;
                old.CopyEntity(activity);
            }
            else
                await service.AddAsync(activity);
            errorMessage = (await service.ValidateAsync(activity)).Errors.FirstOrDefault()?.ErrorMessage;
            if (errorMessage.HasValue())
            {
                diagram.Select(new ObservableCollection<IDiagramObject> { node });
                return;
            }
            await service.SaveChangesAsync();
        }
        ///remove nodes
        foreach(var id in oldIds)
        {
            var old = await service.SingleAsync(id);
            await service.RemoveAsync(old);
            await service.SaveChangesAsync();
        }
        var connectorService = new ConnectorService(scope.ServiceProvider);
        oldIds = await connectorService.GetConnectors(WorkflowId).Select(t => t.Id).ToListAsync();
        foreach(var connector in connectors)
        {
            var con = connector.ConvertToNodeConnector(connectorsData, nodes.ToList());
            if (connector.ID.StartsWith("Connector"))
            {
                var id = Convert.ToInt32(connector.ID.Substring(9));
                var old = await connectorService.SingleAsync(id);
                oldIds.Remove(id);
                con.Id = id;
                old.CopyEntity(con);
            }
            else
                await connectorService.AddAsync(con);
            errorMessage = (await connectorService.ValidateAsync(con)).Errors.FirstOrDefault()?.ErrorMessage;
            if (errorMessage.HasValue())
            {
                diagram.Select(new ObservableCollection<IDiagramObject> { connector });
                return;
            }
            await connectorService.SaveChangesAsync();
        }
        await transaction.CommitAsync();
        ShowMessage("ثبت با موفقیت انجام شد");
    }

    [Parameter]
    public int WorkflowId { get; set; }

    void NodeSelected(SelectionChangedEventArgs e)
    {
        if (e.NewValue.Count == 1 && e.NewValue[0] is Node)
        {
            selectedNode = e.NewValue[0] as Node;
            if (selectedNode.Data == null)
                selectedNode.Data = new NodeData();
        }
        else
            selectedNode = null;
        if (e.NewValue.Count == 1 && e.NewValue[0] is Connector)
            selectedConnector = e.NewValue[0] as Connector;
        else
            selectedConnector = null;
            
    }

    async void ConnectorCreating(IDiagramObject obj)
    {
        newConnector = obj as Connector;
        if (!connectorsData.ContainsKey(newConnector.ID))
            connectorsData[newConnector.ID] = new ConnectorData();
        /// syncfusion bug
        await Task.Delay(1);
        newConnector.Type = ConnectorSegmentType.Straight;
        newConnector.CanAutoLayout = true;
    }

    void NodeCreating(IDiagramObject obj)
    {
        var node = obj as Node;
        node.Style.StrokeColor = "#b200ff";
        node.Constraints = NodeConstraints.Default & ~(NodeConstraints.Rotate | NodeConstraints.Resize);
        if (node.Shape is BpmnActivity)
        {
            node.Width = 120; 
            if (node.Annotations.Count == 0)
                node.Annotations.Add(new ShapeAnnotation()
                {
                    HorizontalAlignment = HorizontalAlignment.Right,
                    Offset = new DiagramPoint(0.95, 0.5)
                });
        }
        if (node.Shape is BpmnEvent)
            node.Width = node.Height = 40;
        if (node.Shape is BpmnGateway)
        {
            node.Width = 50;
            node.Height = 50;
        }
        //Node added from palette
        if (node.Data == null)
        {
            ///Unselect and select node for change (bug of syncfusion)
            diagram.UnSelect(node);
            diagram.Select(new ObservableCollection<IDiagramObject> { node });
            selectedNode = node;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var scope = CreateScope();
        nodes = new DiagramObjectCollection<Node>();
        var actvities = await new ActivityService(scope.ServiceProvider).GetAll().Where(t => t.WorkflowId == WorkflowId).ToListAsync();
        nodes = new DiagramObjectCollection<Node>();
        foreach (var activity in actvities)
        {
            var bpmNode = activity.ConvertToBpmNode();
            nodes.Add(bpmNode);
        }
        var connectors1 = await new ConnectorService(scope.ServiceProvider).GetAll()
            .Where(t => t.Activity.WorkflowId == WorkflowId).ToListAsync();
        connectors = new DiagramObjectCollection<Connector>();
        connectorsData = new Dictionary<string, ConnectorData>();
        foreach (var connector in connectors1)
        {
            var bpmnConnector = connector.ConvertToBpmnConnector(connectorsData);
            connectors.Add(bpmnConnector);
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (palette != null)
        {
            var temp = palette.GetPalettes();
            temp.Targets = new DiagramObjectCollection<SfDiagramComponent>
            {
                diagram
            };
        }
        if (errorMessage.HasValue())
        {
            ShowMessage(errorMessage);
            errorMessage = null;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
