@namespace Caspian.Engine.WorkFlow
@using Syncfusion.Blazor.Diagram
@using global::Engine.Web.Services

<div class="w-property-window">
    <div>
        <label class="pe-3">عنوان</label>
        @if (nodeConnector == null)
        {
            <StringTextBox @bind-Value="activity.Title" OnChange="ActivityUpdated" />
        }
        else
        {
            <StringTextBox @bind-Value="nodeConnector.Title" OnChange="ConnectorUpdated" />
        }
    </div>
    <div>
        <label class="pe-3">شرح</label>
        @if (nodeConnector == null)
        {
            <StringTextBox @bind-Value="activity.Description" MultiLine Rows="4" OnChange="ActivityUpdated" />
        }
        else
        {
            <StringTextBox @bind-Value="nodeConnector.Description" OnChange="ConnectorUpdated" />
        }
    </div>
    @if (activity.ActivityType == ActivityType.Task)
    {
        <div>
            <label class="pe-3">نوع فعالیت</label>
            <DropdownList @bind-Value="activity.TaskType" OnChange="ActivityUpdated" />
        </div>
        <div>
            <label class="pe-3">فرم</label>
            <ComboBox TValue="int?"  TEntity="WorkflowForm" @bind-Value="activity.WorkflowFormId" 
                TextExpression="t => t.Title" ConditionExpression="t => t.DataModel.WorkflowForms.Any()" 
                OnChange="ActivityUpdated" />
        </div>
    }
    @if (activity.ActivityType == ActivityType.Gateway)
    {
        <div>
            <label class="pe-3">نوع درگاه</label>
            <DropdownList @bind-Value="activity.GatewayType" OnChange="ActivityUpdated" />
        </div>
    }
    @if (activity.ActivityType == ActivityType.Event)
    {
        <div>
            <label class="pe-3">محرک</label>
            <DropdownList @bind-Value="activity.EventTriggerType" OnChange="ActivityUpdated" />
        </div>
    }
</div>
@code 
{
    Activity activity;
    NodeConnector nodeConnector;
    [Parameter]
    public Node Node { get; set; }

    [Parameter]
    public Connector Connector { get; set; }

    [Parameter]
    public IDictionary<string, ConnectorData> connectorsData { get; set; }

    [Parameter]
    public IList<Node> Nodes { get; set; }

    protected override void OnParametersSet()
    {
        activity = Node?.ConvertToActivity() ?? new Activity();
        nodeConnector = Connector?.ConvertToNodeConnector(connectorsData, Nodes);
        base.OnParametersSet();
    }

    void ActivityUpdated()
    {
        if (Node == null)
            return;    
        Node.Style.StrokeColor = "#b200ff";

        if (Node.Annotations.Count > 0)
            Node.Annotations[0].Content = activity.Title;
        var date = Node.Data as NodeData;
        date.Title = activity.Title;
        date.Description = activity.Description;
        date.WorkflowFormId = activity.WorkflowFormId;
        if (activity.ActivityType == ActivityType.Task)
            (Node.Shape as BpmnActivity).TaskType = activity.TaskType.ConvertToBpmnTask();
        if (activity.ActivityType == ActivityType.Gateway)
            (Node.Shape as BpmnGateway).GatewayType = activity.GatewayType.ConvertToBpmnGateway();
        if (activity.ActivityType == ActivityType.Event)
            (Node.Shape as BpmnEvent).Trigger = activity.EventTriggerType.ConvertToBpmnEventTrigger();
    }

    void ConnectorUpdated()
    {
        if (Connector != null)
        {
            (connectorsData[Connector.ID] as ConnectorData).Title = nodeConnector.Title;
            (connectorsData[Connector.ID] as ConnectorData).Description = nodeConnector.Description;
            Connector.Annotations[0].Content = nodeConnector.Title;
        }
    }
}
