@namespace Caspian.Engine.WorkflowEngine
@inherits BasePage
<div style="height:54px;">
    <button @onclick="() => showEntityType = !showEntityType" class="w-button w-controls-entity" title="فیلدهای پایگاه داده ها"></button>
    <div class="c-add-control">
        @if (showEntityType)
        {
            <ul>
                @foreach(var item in entityFields)
                {
                    var className = item.EntityFullName == EntityTypeFullName ? "c-selected" : null;
                    <li @onclick="async () => await EntityType(item.EntityFullName)" @onclick:stopPropagation="true" class="@className">
                        @item.Title
                        @if (showEntityProperties && item.EntityFullName == EntityTypeFullName)
                        {
                            <ul class="c-property">
                                @if (dynamicParameters != null && dynamicParameters.Count > 0)
                                {
                                    <li style="direction:rtl">
                                        پارامترهای پویا
                                    </li>
                                }
                                @foreach(var info in workflowEntityProperties)
                                {
                                    className = info == selectedPropertyInfo ? "c-selected" : null;
                                    <li @onclick:stopPropagation="true" class="@className" @onclick="async () => await EntityProperty(info, item.Id)">@info.Name</li>            
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code 
{
    bool showEntityType;
    bool showEntityProperties;
    string EntityTypeFullName;
    PropertyInfo selectedPropertyInfo;
    IList<WfFormEntityField> entityFields;
    IList<PropertyInfo> workflowEntityProperties;
    SubSystemKind subSystemKind;
    int? wfEntityFieldId;
    IList<DynamicParameter> dynamicParameters;

    async Task EntityType(string key)
    {
        EntityTypeFullName = key;
        showEntityProperties = true;
        workflowEntityProperties = new AssemblyInfo().GetModelType(subSystemKind, key).GetProperties()
            .Where(t => !t.CustomAttributes.Any(t => t.AttributeType == typeof(KeyAttribute) || 
            t.AttributeType == typeof(ForeignKeyAttribute)) || t.PropertyType.IsCollectionType()).ToList();
        var scope = CreateScope();
        dynamicParameters = await new DynamicParameterService(scope).GetAll().Where(t => t.EntityName == key).ToListAsync();
    }

    async Task EntityProperty(PropertyInfo info, int wfEntityFieldId)
    {
        selectedPropertyInfo = info;
        showEntityProperties = false;
        showEntityType = false;
        this.wfEntityFieldId = wfEntityFieldId;
        if (OnSelect.HasDelegate)
            await OnSelect.InvokeAsync(info);
    }

    public int? GetSelectedWfEntityFieldId()
    {
        return wfEntityFieldId;
    }

    protected async override Task OnInitializedAsync()
    {
        var scope = CreateScope();
        var form = await new Caspian.Engine.Service.WorkflowFormService(scope).SingleAsync(WorkflowFormId);
        subSystemKind = form.SubSystemKind;
        entityFields = new WfFormEntityFieldService(scope).GetAll().Where(t => t.WorkflowFormId == WorkflowFormId).ToList();
        await base.OnInitializedAsync();
    }

    [Parameter]
    public int WorkflowFormId{ get; set; }

    [Parameter]
    public EventCallback<PropertyInfo> OnSelect{ get; set; }
}
