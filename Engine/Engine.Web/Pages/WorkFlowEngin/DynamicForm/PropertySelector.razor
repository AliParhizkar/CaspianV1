@namespace Caspian.Engine.WorkflowEngine
@inherits BasePage
<div style="height:54px;">
    <button @onclick="() => showEntityType = !showEntityType" class="w-button w-controls-entity" title="فیلدهای پایگاه داده ها"></button>
    <div class="c-add-control auto-hide">
        @if (showEntityType)
        {
            <ul>
                @foreach(var item in dataModelFields)
                {
                    var className = item.FieldName == SelectedFieldName ? "c-selected" : null;
                    <li @onclick="async () => await EntityType(item.FieldName)" @onclick:stopPropagation @onclick:preventDefault class="@className">
                        @item.Title
                        @if (showEntityProperties && item.FieldName == SelectedFieldName)
                        {
                            <ul class="c-property">
                                @if (dynamicParameters != null && dynamicParameters.Count > 0)
                                {
                                    className = showParameter ? "c-selected" : null;
                                    <li class="@className" @onclick="ShowDynamicParameter">
                                        پارامترهای پویا
                                        @if (showParameter)
                                        {
                                            <ul class="dynamic-parameter">
                                                @foreach(var param in dynamicParameters)
                                                {
                                                    className = selectedDynamicParameterId == param.Id ? "c-selected" : null;
                                                    <li class="@className" @onclick="() => SelecteDynamicParameter(param.Id, item.Id)" @onclick:preventDefault @onclick:stopPropagation>@param.Title</li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                }
                                @foreach(var info in workflowEntityProperties)
                                {
                                    className = info == selectedPropertyInfo ? "c-selected" : null;
                                    var attr = info.GetCustomAttribute<DisplayNameAttribute>();
                                    var faName = attr == null ? info.Name : attr.DisplayName;
                                    <li @onclick:stopPropagation="true" class="@className" @onclick="async () => await EntityProperty(info, item.Id)">@faName</li>            
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code 
{
    bool showEntityType;
    bool showEntityProperties;
    string SelectedFieldName;
    PropertyInfo? selectedPropertyInfo;
    IList<DataModelField> dataModelFields;
    IList<PropertyInfo> workflowEntityProperties;
    SubSystemKind subSystemKind;
    int? DataModelFieldId;
    IList<DynamicParameter> dynamicParameters;
    int? selectedDynamicParameterId;
    bool showParameter;

    void ShowDynamicParameter()
    {
        selectedPropertyInfo = null;
        showParameter = true;
    }

    async Task SelecteDynamicParameter(int parameterId, int dataModelFieldId)
    {
        selectedDynamicParameterId = parameterId;
        this.DataModelFieldId = dataModelFieldId;
        var param = dynamicParameters.Single(t => t.Id == parameterId);
        await OnDynamicParameterSelect.InvokeAsync(param);
        HideSelector();
    }

    async Task EntityType(string key)
    {
        SelectedFieldName = key;
        var field = dataModelFields.Single(t => t.FieldName == key);
        var entityName = field.EntityFullName;
        if (entityName.HasValue())
        {
            showEntityProperties = true;
            workflowEntityProperties = new AssemblyInfo().GetModelType(subSystemKind, entityName).GetProperties()
                .Where(t => !t.CustomAttributes.Any(t => t.AttributeType == typeof(KeyAttribute) ||
                t.AttributeType == typeof(ForeignKeyAttribute)) || t.PropertyType.IsCollectionType()).ToList();
            var scope = CreateScope();
            dynamicParameters = await new DynamicParameterService(scope.ServiceProvider).GetAll().Where(t => t.EntityName == entityName).ToListAsync();
        }
        else
        {
            showEntityProperties = false;
            dynamicParameters = null;
            HideSelector();
            await OnFieldSelect.InvokeAsync(field);
        }
    }

    async Task EntityProperty(PropertyInfo info, int dataModelFieldId)
    {
        selectedPropertyInfo = info;
        HideSelector();
        this.DataModelFieldId = dataModelFieldId;
        await OnPropertySelect.InvokeAsync(info);
        selectedDynamicParameterId = null;
    }

    public void HideSelector()
    {
        showEntityProperties = false;
        showEntityType = false;
        showParameter = false;
    }

    public int? GetSelectedDataModelFieldId()
    {
        return DataModelFieldId;
    }

    protected async override Task OnInitializedAsync()
    {
        var scope = CreateScope();
        var form = await new WorkflowFormService(scope.ServiceProvider).GetAll().Include(t => t.WorkflowGroup).SingleAsync(t => t.Id == WorkflowFormId);

        subSystemKind = form.WorkflowGroup.SubSystemKind;
        dataModelFields = new DataModelFieldService(scope.ServiceProvider).GetAll().Where(t => t.DataModelId == form.DataModelId).ToList();
        await base.OnInitializedAsync();
    }

    [Parameter]
    public int WorkflowFormId{ get; set; }

    [Parameter]
    public EventCallback<PropertyInfo> OnPropertySelect { get; set; }

    [Parameter]
    public EventCallback<DataModelField> OnFieldSelect { get; set; }

    [Parameter]
    public EventCallback<DynamicParameter> OnDynamicParameterSelect{ get; set; }
}
