@namespace Caspian.Engine.WorkflowEngine  
@inherits BasePage
@{
    var windowClassName = "c-property-window";
    if (minimized)
        windowClassName += " c-minimize";
}
<div class="@(windowClassName)">
    <div class="c-icons">
        <div>
            <span @onclick="() => minimized = !minimized">1</span>
        </div>
        <div>
            <span >2</span>
        </div>
        <div>
            <span>3</span>
        </div>
    </div>
    <div class="c-properties">
        <EditForm Model="this">
            <table cellpadding="0" cellspacing="0">
                <tr>
                    <td>
                        <label>Id</label>
                    </td>
                    <td>
                        <StringTextBox readonly Style="direction:ltr;font-weight:bold;font-style:oblique" Value="@Id" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>عنوان</label>
                    </td>
                    <td>
                        <StringTextBox @bind-Value="@(Control.Caption)" @onblur="async () => await StateChanged()" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>مقدار</label>
                    </td>
                    <td>
                        <StringTextBox @bind-Value="Value" @onchange="async () => await StateChanged()" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>شرح</label>
                    </td>
                    <td>
                        <StringTextBox @bind-Value="Control.Description" MultiLine @onchange="async () => await StateChanged()" />
                    </td>
                </tr>

            @if (Control.ControlType == ControlType.ComboBox)
                {
                    <tr>
                        <td>
                            <label style="font-size:10px;white-space:nowrap">Text Expr</label>
                        </td>
                        <td>
                            <StringTextBox Style="direction:ltr" @onclick="TextExpressionSelected" readonly @bind-Value="Control.TextExpression" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label style="font-size:10px;">Filter Expr</label>
                        </td>
                        <td>
                            <StringTextBox Style="direction:ltr" @onclick="FilterExpressionSelected" readonly @bind-Value="Control.FilterExpression" />
                        </td>
                    </tr>
                }
                else if (Control.ControlType == ControlType.String)
                {
                    <tr>
                        <td>
                            <label>Multi line</label>
                        </td>
                        <td>
                            <CheckBox Value="Control.MultiLine" ValueChanged="EventCallback.Factory.Create<bool>(this, async value => 
                                {
                                    Control.MultiLine = value;
                                    if (!value)
                                        Control.Height = 1;
                                    await StateChanged();
                                })" />
                        </td>
                    </tr>    
                }
                @if (Control.MultiLine)
                {
                    if (Control.Height == null)
                        Control.Height = 1;
                    <tr>
                        <td>
                            <label>Height</label>
                        </td>
                        <td>
                            <DropdownList Value="Control.Height.Value" ValueChanged="EventCallback.Factory.Create<byte?>(this, async value => 
                                {  
                                    Control.Height = value;
                                    await StateChanged();
                                })" Source="source" />
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <label>OnChange</label>
                    </td>
                    <td>
                        <StringTextBox Style="direction:ltr" @bind-Value="Control.OnChange" @onclick="AddEventHandler" @onchange="async () => await StateChanged()" />
                    </td>
                </tr>
            </table>
        </EditForm>
    </div>
</div>

@code 
{
    bool minimized;
    string? propertyName;
    string? eventName;
    IList<SelectListItem> source;

    [Parameter]
    public BlazorControl Control{ get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Value{ get; set; }

    [Parameter]
    public string FormName{ get; set; }

    protected override void OnInitialized()
    {
        source = base.GetSelectList("یک", "دو", "سه", "چهار", "پنج", "شش");
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Control == null)
            Control = new BlazorControl();
        base.OnParametersSet();
    }

    void FilterExpressionSelected()
    {
        propertyName = "FilterExpression";
    }

    async Task StateChanged()
    {
        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();
    }

    async void AddEventHandler()
    {
        if (!Control.OnChange.HasValue())
        {
            Control.OnChange = Id + "OnChange";
            await StateChanged();
        }
        eventName = Control.OnChange;
    }

    [Parameter]
    public EventCallback OnChange{ get; set; }

    void TextExpressionSelected()
    {
        propertyName = "TextExpression";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (propertyName.HasValue())
        {
            var name = propertyName;
            propertyName = null;
            await jsRuntime.InvokeVoidAsync("$.workflow.findCode", FormName, Id, name);
        }
        if (eventName.HasValue())
        {
            var name = eventName;
            eventName = null;
            await jsRuntime.InvokeVoidAsync("$.workflow.findEventHandler", FormName, Id, name);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
