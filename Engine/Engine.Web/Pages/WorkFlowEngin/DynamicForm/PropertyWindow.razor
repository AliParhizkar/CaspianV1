@namespace Caspian.Engine.WorkflowEngine  
@inherits BasePage
@{
    var windowClassName = "c-property-window";
    if (minimized)
        windowClassName += " c-minimize";
}
<div class="@(windowClassName)">
    <EditForm Model="this">
        <div>
            <label class="pe-3">Id</label>
            <StringTextBox readonly Style="direction:ltr;font-weight:bold;font-style:oblique" Value="@Id" />
        </div>
        <div class="pt-2">
            <label class="pe-3">عنوان</label>
            <StringTextBox @bind-Value="@(Control.Caption)" @onblur="async () => await StateChanged()" />
        </div>
        <div class="pt-2">
            <label class="pe-3">مقدار</label>
            <StringTextBox @bind-Value="Value" OnChange="async () => await StateChanged()" />
        </div>
        <div class="pt-2">
            <label class="pe-3">شرح</label>
            <StringTextBox @bind-Value="Control.Description" Rows="4" MultiLine OnChange="async () => await StateChanged()" />
        </div>
        @if (Control.ControlType == ControlType.ComboBox)
        {
            <div class="pt-2">
                <label class="pe-3">Text Expression</label>
                <StringTextBox Style="direction:ltr" @onclick="TextExpressionSelected" readonly @bind-Value="Control.TextExpression" />
            </div>
            <div class="pt-2">
                <label class="pe-3">Filter Expression</label>
                <StringTextBox Style="direction:ltr" @onclick="FilterExpressionSelected" readonly @bind-Value="Control.FilterExpression" />
            </div>
        }
        else if (Control.ControlType == ControlType.String)
        {
            <div class="pt-2">
                <label class="pe-3">Multiline</label>
                <CheckBox Value="Control.MultiLine" ValueChanged="EventCallback.Factory.Create<bool>(this, async value =>
                                {
                                    Control.MultiLine = value;
                                    if (!value)
                                        Control.Height = 1;
                                    await StateChanged();
                                })" />
            </div>
        }
        @if (Control.MultiLine)
        {
            Control.Height = Control.Height ?? 1;
            <div class="pt-2">
                <label class="pe-3">Height</label>
                <DropdownList Value="Control.Height.Value" ValueChanged="EventCallback.Factory.Create<byte?>(this, async value =>
                                {
                                    Control.Height = value;
                                    await StateChanged();
                                })" Source="source" />
            </div>
        }
        <div class="pt-2">
            <label class="pe-3">Onchange</label>
            <StringTextBox Style="direction:ltr" @bind-Value="Control.OnChange" @onclick="AddEventHandler" OnChange="async () => await StateChanged()" />
        </div>
    </EditForm>
</div>

@code 
{
    bool minimized;
    string propertyName;
    string eventName;
    IList<SelectListItem> source;

    [Parameter]
    public BlazorControl Control{ get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Value{ get; set; }

    [Parameter]
    public string FormName{ get; set; }

    protected override void OnInitialized()
    {
        source = base.GetSelectList("یک", "دو", "سه", "چهار", "پنج", "شش");
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Control == null)
            Control = new BlazorControl();
        base.OnParametersSet();
    }

    void FilterExpressionSelected()
    {
        propertyName = "FilterExpression";
    }

    async Task StateChanged()
    {
        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();
    }

    async void AddEventHandler()
    {
        if (!Control.OnChange.HasValue())
        {
            Control.OnChange = Id + "OnChange";
            await StateChanged();
        }
        eventName = Control.OnChange;
    }

    [Parameter]
    public EventCallback OnChange{ get; set; }

    void TextExpressionSelected()
    {
        propertyName = "TextExpression";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (propertyName.HasValue())
        {
            var name = propertyName;
            propertyName = null;
            await jsRuntime.InvokeVoidAsync("$.workflowForm.findCode", FormName, Id, name);
        }
        if (eventName.HasValue())
        {
            var name = eventName;
            eventName = null;
            await jsRuntime.InvokeVoidAsync("$.workflowForm.findEventHandler", FormName, Id, name);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
