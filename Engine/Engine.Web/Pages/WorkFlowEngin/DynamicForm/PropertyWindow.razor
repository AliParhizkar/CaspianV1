@namespace Caspian.Engine.WorkflowEngine  
@inherits BasePage
@{
    var windowClassName = "c-property-window";
    if (minimized)
        windowClassName += " c-minimize";
    string typeName = "";
    if (Control.ControlType == ControlType.List && Control.DataModelField?.EntityFullName.HasValue() == true)
    {
        var entityType = new AssemblyInfo().GetModelType(SubSystem, Control.DataModelField.EntityFullName);
        typeName = entityType.GetProperty(Control.PropertyName).GetForeignKey().PropertyType.Name;
    }
}
<div class="@(windowClassName)">
    <EditForm Model="this">
        <div>
            <label class="pe-3">Id</label>
            <StringTextBox readonly Style="direction:ltr;font-weight:bold;font-style:oblique" Value="@Id" />
        </div>
        <div class="pt-1">
            <label class="pe-3">عنوان</label>
            <StringTextBox @bind-Value="@(Control.Caption)" @onblur="StateChanged" />
        </div>
        <div class="pt-1">
            <label class="pe-3">شرح</label>
            <StringTextBox @bind-Value="Control.Description" Rows="4" MultiLine OnChange="StateChanged" />
        </div>
        @if (Control.ControlType == ControlType.List)
        {
            <div class="pt-1">
                <label class="pe-3">Text Expression</label>
                <StringTextBox Style="direction:ltr" @onclick="TextExpressionSelected" readonly @bind-Value="Control.TextExpression" />
            </div>
            @if (typeName.HasValue())
            {
                <div class="pt-2">
                    <label class="pe-3">Lookup</label>
                    <ComboBox TValue="int?" TEntity="LookupType" @bind-Value="Control.LookupTypeId" TextExpression="t => t.Title"
                            ConditionExpression="t => t.EntityTypeName == typeName" />
                </div>
            }

            @if (Control.LookupTypeId == null)
            {
                <div class="pt-2">
                    <label class="pe-3">Condition Expression</label>
                    <StringTextBox Style="direction:ltr" @onclick="ConditionExpressionSelected" readonly @bind-Value="Control.ConditionExpression" />
                </div>
            }
        }
        else if (Control.ControlType == ControlType.String)
        {
            <div class="pt-1">
                <label class="pe-3">Multiline</label>
                <CheckBox @bind-Value="Control.MultiLine" OnChange="ToggleMultiLine" />
            </div>
        }
        @if (Control.MultiLine)
        {
            Control.Height = Control.Height ?? 1;
            <div class="pt-1">
                <label class="pe-3">Height</label>
                <DropdownList @bind-Value="Control.Height" OnChange="StateChanged" Source="source" />
            </div>
        }
        <div class="pt-1">
            <label class="pe-3">Onchange</label>
            <StringTextBox @bind-Value="Control.OnChange" @onclick="AddEventHandler" 
                Style="direction:ltr" OnChange="StateChanged" />
        </div>
    </EditForm>
</div>

@code 
{
    bool minimized;
    string propertyName;
    IList<SelectListItem> source;

    async Task ToggleMultiLine()
    {
        if (!Control.MultiLine)
            Control.Height = 1;
        await StateChanged();
    }

    [Parameter]
    public BlazorControl Control{ get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string FormName{ get; set; }

    protected override void OnInitialized()
    {
        source = base.GetSelectList("یک", "دو", "سه", "چهار", "پنج", "شش");
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Control == null)
            Control = new BlazorControl();
        base.OnParametersSet();
    }

    void ConditionExpressionSelected()
    {
        propertyName = "ConditionExpression";
    }

    async Task StateChanged()
    {
        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();
    }

    async Task AddEventHandler()
    {
        if (!Control.OnChange.HasValue())
        {
            var index = 0;
            while (index < Id.Length && Id[index] == Id[index].ToString().ToLower()[0])
                index++;
            Control.OnChange = Id.Substring(index) + "_OnChange";
            await StateChanged();
            await OnEventHandlerCreated.InvokeAsync(Control.OnChange);
        }
    }

    [Parameter]
    public EventCallback OnChange{ get; set; }

    [Parameter]
    public EventCallback<string> OnEventHandlerCreated { get; set; }

    [Parameter]
    public SubSystemKind SubSystem { get; set; }

    void TextExpressionSelected()
    {
        propertyName = "TextExpression";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (propertyName.HasValue())
        //{
        //    var name = propertyName;
        //    propertyName = null;
        //    await jsRuntime.InvokeVoidAsync("$.workflowForm.findCode", FormName, Id, name);
        //}
        //if (eventName.HasValue())
        //{
        //    var name = eventName;
        //    eventName = null;
        //    await jsRuntime.InvokeVoidAsync("$.workflowForm.findEventHandler", FormName, Id, name);
        //}
        await base.OnAfterRenderAsync(firstRender);
    }
}
