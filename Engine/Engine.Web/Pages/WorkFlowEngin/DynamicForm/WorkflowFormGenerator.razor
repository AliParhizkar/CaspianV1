@page "/Engine/FormGenerator/{WorkflowFormId:int}"
@inherits BasePage
@inject IHostEnvironment Host
@namespace Caspian.Engine.WorkflowEngine
@using Microsoft.CodeAnalysis.CSharp.Syntax;
<div class="pt-1 pb-1 ps-2 pe-2" style="direction:ltr;text-align:left">
    <TabPanel TabIndex="tabIndex" TabIndexChanged="TabIndexChanged">
        <Tabs>
            <TabPanelItem Title="Form generator">
                <FormGeneratorComponent OnEventHandlerCreated="AddOrSelectEventHandler" WorkflowFormId="WorkflowFormId" Source="@source" />
            </TabPanelItem>
            <TabPanelItem Title="Code behind">
                <Engine.CaspianCodeEditor.CodeEditorComponent Source="@codeBehind" Readonly />
            </TabPanelItem>
            <TabPanelItem Title="Code">
                <Engine.CaspianCodeEditor.CodeEditorComponent Assemblies="assemblies" Source="@source" 
                    CodeBehind="@codeBehind" SourceChanged="t => source = t" LineNumber="lineNumber" 
                    Column="column" />
            </TabPanelItem>
        </Tabs>
    </TabPanel>
</div>


@code
{
    bool flag;
    string source, codeBehind;
    string[] assemblies;
    int tabIndex = 1;
    string className;
    int lineNumber = 0;
    int column = 0;

    async Task AddOrSelectEventHandler(string eventHandlerName)
    {
        tabIndex = 3;
        var manager = new CodeManager();
        ClassDeclarationSyntax mainClass = manager.GetClassOfForm(className, source);
        MethodDeclarationSyntax methodSyntax = manager.GetEventHandler(mainClass, eventHandlerName);
        if (codeBehind == null)
        {
            using var service = CreateScope().GetService<WorkflowFormService>();
            var form = await service.GetWorkflowForm(WorkflowFormId);
            codeBehind = form.CreateCodebehind();
        }
        if (methodSyntax == null)
        {
            var close = mainClass.GetLastToken();
            var line = mainClass.SyntaxTree.GetLineSpan(close.FullSpan).StartLinePosition.Line;
            var lineSpan = mainClass.SyntaxTree.GetText().Lines[line].Span;
            var strStart = source.Substring(0, lineSpan.Start);
            var strMethod = "\n\t\tpublic void " + eventHandlerName + "()\n\t\t{\n\t\t\t\n\t\t}\n";
            var strEnd = source.Substring(lineSpan.Start);
            source = strStart + strMethod + strEnd;
            lineNumber = line + 4;
            column = 4;
            //codeEditor.Select(strStart.Length + strMethod.Length - 5, 1);
        }
        else
        {
            var close = methodSyntax.GetLastToken();
            var line = methodSyntax.SyntaxTree.GetLineSpan(close.Span).StartLinePosition.Line;
            lineNumber = line;
            column = 4;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var service = CreateScope().GetService<WorkflowFormService>();
        var form = await service.GetAll().Include(t => t.WorkflowGroup).SingleAsync(WorkflowFormId);
        var systemName = form.WorkflowGroup.SubSystemKind.ToString();
        className = form.Name;
        assemblies = new string[] { $"{systemName}.Model", $"{systemName}.Service", "Caspian.common", "FluentValidation", "Engine.Model", "Microsoft.Extensions.DependencyInjection.Abstractions" };
        var basePath = Host.ContentRootPath;
        source = await form.GetSourceCode(basePath);
        await base.OnInitializedAsync();
    }

    async Task TabIndexChanged(int tabIndex)
    {
        using var service = CreateScope().GetService<WorkflowFormService>();
        if (tabIndex > 1)
        {
            var form = await service.GetWorkflowForm(WorkflowFormId);
            codeBehind = form.CreateCodebehind();
        }
        this.tabIndex = tabIndex;
        await Task.Delay(100);
    }

    [Parameter]
    public int WorkflowFormId { get; set; }
}
