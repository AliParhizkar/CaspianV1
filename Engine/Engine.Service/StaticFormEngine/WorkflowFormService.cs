using System.Text;
using Caspian.Common;
using System.Reflection;
using Caspian.Common.Service;
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations.Schema;

namespace Caspian.Engine.Service
{
    public class WorkflowFormService : SimpleService<Engine.WorkflowForm>, ISimpleService<Engine.WorkflowForm>
    {
        public WorkflowFormService(IServiceScope scope)
            :base(scope)
        {
            RuleFor(t => t.Title).Required().UniqAsync("فرمی با این عنوان در سیستم ثبت شده است");
            RuleFor(t => t.ColumnCount).CustomValue(t => t < 1, "حداقل یک ستون باید وجود داشته باشد")
                .CustomValue(t => t > 4, "جداکثر چهار ستون می تواند وجود داشته باشد");
            RuleFor(t => t.Name).UniqAsync("فرمی با این نام در سیستم ثبت شده است").CustomValue(t => t.IsValidIdentifire(), "برای تعریف کلاس فقط از کاراکترهای لاتین و اعداد استفاده نمایید.");
        }

        public async Task<string> GetCodebehindAsync(int workflowFormId)
        {
            var str = new StringBuilder();
            var form = await SingleAsync(workflowFormId);
            str.Append("/// This code is generated by caspian generator and can not be changed\n\n");
            str.Append("using Demo.Model;\n");
            str.Append("using Capian.Dynamicform.Component;\n\n");
            str.Append("namespace Caspian.Dynamic.WorkflowForm\n{\n");
            str.Append("\tpublic partial class " + form.Name + "\n\t{\n");
            
            foreach(var row in form.Rows)
            {
                foreach(var col in row.Columns)
                {
                    var ctr = col.Component;
                    if (ctr != null)
                    {
                        switch (ctr.ControlType)
                        {
                            case ControlType.DropdownList:
                                var typeName = new AssemblyInfo().GetModelType(form.SubSystemKind, ctr.WfFormEntityField.EntityFullName)
                                    .GetProperty(ctr.PropertyName).PropertyType.Name;
                                str.Append("\t\tDropdownList<" + typeName + "> ddl" + ctr.PropertyName + ";\n");
                                break;
                            case ControlType.ComboBox:
                                var entityType = new AssemblyInfo().GetModelType(form.SubSystemKind, ctr.WfFormEntityField.EntityFullName);
                                var info = entityType.GetProperties().Single(t => t.GetCustomAttribute<ForeignKeyAttribute>()?.Name == ctr.PropertyName);
                                str.Append("\t\tComboBox<" + info.PropertyType.Name + ">cmb" + info.Name + ";\n");
                                break;
                            case ControlType.String:
                                str.Append("\t\tStringTextBox txt" + ctr.PropertyName + ";\n");
                                break;
                            case ControlType.Date:
                                str.Append("\t\tDatePicker dpk" + ctr.PropertyName + ";\n");
                                break;
                        }
                    }
                }
            }
            str.Append("\n\t\tpublic void InitializeComponent()\n\t\t{\n");
            foreach(var row in form.Rows)
            {
                foreach(var col in row.Columns)
                {
                    var ctr = col.Component;
                    if (ctr != null)
                    {
                        switch (ctr.ControlType)
                        {
                            case ControlType.DropdownList:
                                var typeName = new AssemblyInfo().GetModelType(form.SubSystemKind, ctr.WfFormEntityField.EntityFullName)
                                    .GetProperty(ctr.PropertyName).PropertyType.Name;
                                str.Append("\t\t\tddl" + ctr.PropertyName + " = new DropdownList<" + typeName + ">();\n");
                                break;
                            case ControlType.ComboBox:
                                var entityType = new AssemblyInfo().GetModelType(form.SubSystemKind, ctr.WfFormEntityField.EntityFullName);
                                var info = entityType.GetProperties().Single(t => t.GetCustomAttribute<ForeignKeyAttribute>()?.Name == ctr.PropertyName);
                                str.Append("\t\t\tcmb" + info.Name + " = new ComboBox<" + info.PropertyType.Name + ">();\n");
                                break;
                            case ControlType.String:
                                str.Append("\t\t\ttxt" + ctr.PropertyName + " = new StringTextBox();\n");
                                break;
                            case ControlType.Date:
                                str.Append("\t\t\tdpk" + ctr.PropertyName + " = new DatePicker();\n");
                                break;
                        }
                    }
                }
            }
            str.Append("\t\t}\n");
            str.Append("\t}\n}");
            return str.ToString();
        }
    }
}
