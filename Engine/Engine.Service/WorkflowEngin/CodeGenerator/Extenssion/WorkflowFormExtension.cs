using System.Text;
using Caspian.Common;
using Microsoft.CodeAnalysis;


namespace Caspian.Engine.Service
{
    public static class WorkflowFormExtension
    {
        public static string CreateCodebehind(this WorkflowForm form)
        {
            var str = new StringBuilder();
            str.Append("/// This code is generated by caspian generator and can not be changed\n\n");
            str.Append("using System;\n");
            str.Append($"using {form.WorkflowGroup.SubSystemKind}.Model;\n");
            str.Append("using Caspian.Dynamicform.Component;\n\n");
            str.Append("using System.ComponentModel.DataAnnotations;\n\n");
            str.Append("namespace Caspian.Dynamic.WorkflowForm\n{\n");
            str.Append($"\tpublic partial class {form.Name}: BasePage\n\t{{");
            str.Append(form.DataModel.GetFieldsCode());
            str.Append('\n');
            str.Append(form.GetControlsCode(false));
            str.Append("\t}");
            str.Append("\n\n");
            str.Append(form.CreateEnumesCode());
            str.Append("\n}");
            return str.ToString();
        }

        public static async Task<string> GetSourceCode(this WorkflowForm form, string rootPath)
        {
            if (form.SourceFileName.HasValue())
            {
                var path = $"{rootPath}\\Data\\Code\\{form.SourceFileName}.cs";
                var result = await File.ReadAllTextAsync(path);
                if (result.HasValue())
                    return result;
            }
            var str = new StringBuilder();
            str.Append($"using {form.WorkflowGroup.SubSystemKind}.Model;\n");
            str.Append($"using {form.WorkflowGroup.SubSystemKind}.Service;\n");
            str.Append("using Caspian.Dynamicform.Component;\n\n");
            str.Append("namespace Caspian.Dynamic.WorkflowForm\n{\n");
            str.Append($"\tpublic partial class {form.Name}\n\t{{\n");
            str.Append("\t\tpublic void Initialize()\n\t\t{\n\n");
            str.Append("\t\t}\n");
            str.Append("\t}\n}");
            return str.ToString();
        }

        public static string CreateEnumesCode(this WorkflowForm form)
        {
            StringBuilder str = new StringBuilder();
            var controls = new List<BlazorControl>();
            foreach (var row in form.Rows)
                foreach (var col in row.Columns)
                {
                    if (col.Component != null)
                        controls.Add(col.Component);
                    foreach (var row1 in col.InnerRows)
                        foreach (var col1 in row1.HtmlColumns)
                        {
                            if (col1.Component != null)
                                controls.Add(col1.Component);
                        }
                }
            foreach (var ctr in controls)
                str.Append(ctr.DataModelField.GetEnumCode());
            return str.ToString();
        }

        public static async Task<string> GetSourceFile(this WorkflowForm form, string rootPath)
        {
            if (form.SourceFileName.HasValue())
            {
                var path = $"{rootPath}\\Data\\Code\\{form.SourceFileName}.cs";
                var content = await File.ReadAllTextAsync(path);
                if (!content.HasValue())
                    return null;
                return new CodeManager().FindSourceCode(content);
            }
            return null;
        }

        public static string GetControlsCode(this WorkflowForm form, bool isServer)
        {
            var str = new StringBuilder();
            str.Append("\t\t/// Form controls\n");
            foreach (var row in form.Rows)
                foreach (var col in row.Columns)
                {
                    var ctr = col.Component;
                    if (ctr != null)
                        str.Append(ctr.GetControlType(form.WorkflowGroup.SubSystemKind, isServer));
                    foreach (var row1 in col.InnerRows)
                        foreach (var col1 in row1.HtmlColumns)
                        {
                            ctr = col1.Component;
                            if (ctr != null)
                                str.Append(ctr.GetControlType(form.WorkflowGroup.SubSystemKind, isServer));
                        }
                }
            return str.ToString();
        }

        public static string GetCode(this WorkflowForm form, string userCode)
        {
            var str = new StringBuilder();
            str.Append($"public partial class {form.Name}: BasePage\n");
            str.Append("\t{\n");
            str.Append(form.DataModel.GetFieldsCode());
            str.Append(form.GetControlsCode(true));
            str.Append("\t\tprotected override void OnInitialized()\n\t\t{\n");
            str.Append(form.DataModel.GetFieldInitializeCode());
            str.Append("\t\t\tbase.OnInitialized();\n");
            str.Append("\t\t}\n\n");
            str.Append("\t\tprotected override void BuildRenderTree(RenderTreeBuilder builder)\n\t\t{\n");
            //Create MessageBox Component
            str.Append("\t\t\tbuilder.OpenComponent<MessageBox>(2);\n");
            str.Append("\t\t\tbuilder.AddComponentReferenceCapture(1, msg => MessageBox = msg as MessageBox);\n");
            str.Append("\t\t\tbuilder.CloseComponent();\n");
            foreach (var row in form.Rows)
                str.Append(row.GetCode(form, userCode));
            str.Append("\t\t}\n\t}");
            return str.ToString();
        }
    }
}
