@namespace Caspian.Report
@using Caspian.Common
@{
    bool alignmentEnabled = Alignment != null;
    var verticalAlign = Alignment?.VerticalAlign;
    var horizontalAlign = Alignment?.HorizontalAlign;
    var fontEnabled = Font != null;
    var borderEnabled = Border != null;
    var leftBorder = Border != null && (Border.BorderKind & BorderKind.Left) == BorderKind.Left;
    var rightBorder = Border != null && (Border.BorderKind & BorderKind.Right) == BorderKind.Right;
    var topBorder = Border != null && (Border.BorderKind & BorderKind.Top) == BorderKind.Top;
    var bottomBorder = Border != null && (Border.BorderKind & BorderKind.Bottom) == BorderKind.Bottom;
    var foramtingEnabled = Page.SelectedControl != null || Page.SelectedTable != null;
}
<div class="tools-bar">
    <div id="toolsBar1">
        <span class="toolsbar" style="width:7px;"></span>
        <ToolsbarIcon XPosition="319" />
        <span class="toolsbar" style="width:2px;background-position:-279px 0px"></span>
        <SelectableIcon Enabled="alignmentEnabled" Selected="verticalAlign == VerticalAlign.Bottom" XPosition="254" 
            OnMouseDown="async () => await ChangeVerticalAlignment(VerticalAlign.Bottom)"/>
        <SelectableIcon Enabled="alignmentEnabled" Selected="verticalAlign == VerticalAlign.Middle" XPosition="229"
            OnMouseDown="async () => await ChangeVerticalAlignment(VerticalAlign.Middle)"/>
        <SelectableIcon Enabled="alignmentEnabled" Selected="verticalAlign == VerticalAlign.Top" XPosition="204"
            OnMouseDown="async () => await ChangeVerticalAlignment(VerticalAlign.Top)"/>
        <span class="toolsbar toolsbar" style="width:2px;background-position:-202px 0px"></span>
        <SelectableIcon Enabled="alignmentEnabled" Selected="horizontalAlign == HorizontalAlign.Justify"  XPosition="177" 
            OnMouseDown="async () => await ChangeHorizontalAlignment(HorizontalAlign.Justify)"/>
        <SelectableIcon Enabled="alignmentEnabled" Selected="horizontalAlign == HorizontalAlign.Left" XPosition="102"
            OnMouseDown="async () => await ChangeHorizontalAlignment(HorizontalAlign.Left)"/>
        <SelectableIcon Enabled="alignmentEnabled" Selected="horizontalAlign == HorizontalAlign.Center" XPosition="127"
            OnMouseDown="async () => await ChangeHorizontalAlignment(HorizontalAlign.Center)"/>
        <SelectableIcon Enabled="alignmentEnabled" Selected="horizontalAlign == HorizontalAlign.Right" XPosition="152"
            OnMouseDown="async () => await ChangeHorizontalAlignment(HorizontalAlign.Right)"/>
        <span class="toolsbar toolsbar" style="width:2px;background-position:-100px 0px"></span>
        <SelectableIcon Enabled="fontEnabled" Selected="Font?.UnderLine == true" XPosition="75" 
            OnMouseDown="async () => await ChangeFont(!Font.UnderLine, null, null)" />
        <SelectableIcon Enabled="fontEnabled" Selected="Font?.Italic == true" XPosition="50" 
            OnMouseDown="async () => await ChangeFont(null, null, !Font.Italic)"/>
        <SelectableIcon Enabled="fontEnabled" Selected="Font?.Bold == true" XPosition="25" 
            OnMouseDown="async () => await ChangeFont(null, !Font.Bold, null)"/>
        <CollorPicker Enabled="fontEnabled" Color="@Font?.Color?.ColorString" XPosition="281" 
            ColorChanged="async color => await ChangeFont(null, null, color)"/>
        <span class="toolsbar-list" style="width:62px;">
            <input disabled="disabled" class="toolsbar-list-input" value="12" style="width:40px" />
            <span id="_14" class="toolsbar" style="width:17px;background-position:-8px 0px;"></span>
        </span>
        <span class="toolsbar-list" style="width:142px;">
            <input disabled="disabled" class="toolsbar-list-input" value="B1Nazanin" style="width:120px" />
            <span id="_15" class="toolsbar" style="width:17px;background-position:-8px 0px;"></span>
        </span>
        <span class="toolsbar" style="width:13px;background-position:-344px 0px"></span>
    </div>
    <div id="toolsBar2">
        <span class="toolsbar" style="width:7px;background-position:-358px 0px"></span>
        <DropdownIcon @ref="borderStyle" BorderStyle Enabled="borderEnabled" Value="(int?)Border?.BorderStyle"
            OnChange="async style => await ChangeBorder((BorderStyle)style)" />
        <DropdownIcon @ref="borderWidth" Enabled="borderEnabled" Value="Border?.Width"
            OnChange="async width => await ChangeBorder(width)"/>
        <CollorPicker XPosition="582" Enabled="borderEnabled" 
            ColorChanged="async color => await ChangeBorder(color)"/>
        <CollorPicker XPosition="544" Enabled />
        <span class="toolsbar" style="width:2px;background-position:-542px 0px"></span>
         <ToolsbarIcon XPosition="517" Enabled="foramtingEnabled" OnIconClick="OpenFormatingWindow" />
        <SelectableIcon XPosition="492" Enabled="borderEnabled" Selected="Border?.BorderKind == 0"
            OnMouseDown="async () => await ChangeBorder((BorderKind)0)"/>
        <SelectableIcon XPosition="467" Enabled="borderEnabled" Selected="Border?.BorderKind == (BorderKind)15"
            OnMouseDown="async () => await ChangeBorder((BorderKind)15)"/>
        <span class="toolsbar" style="width:2px;background-position:-465px 0px"></span>
        <SelectableIcon XPosition="440" Enabled="borderEnabled" Selected="rightBorder" 
            OnMouseDown="async () => await ChangeBorder(BorderKind.Right)" />
        <SelectableIcon XPosition="415" Enabled="borderEnabled" Selected="leftBorder"
            OnMouseDown="async () => await ChangeBorder(BorderKind.Left)"/>
        <SelectableIcon XPosition="390" Enabled="borderEnabled" Selected="bottomBorder" 
            OnMouseDown="async () => await ChangeBorder(BorderKind.Bottom)"/>
        <SelectableIcon XPosition="365" Enabled="borderEnabled" Selected="topBorder" 
            OnMouseDown="async () => await ChangeBorder(BorderKind.Top)"/>
        <span class="toolsbar " style="width:13px;background-position:-696px 0px"></span>
    </div>
    <div id="toolsBar3">
        <span class="toolsbar" style="width:7px;background-position:-710px 0px"></span>
        <ToolsbarIcon XPosition="947" Enabled="SelectedTable?.CanMerge(out _, out _) == true" OnIconClick="() => SelectedTable?.MergeSelectedCells()" />
        <ToolsbarIcon XPosition="922" Enabled="SelectedTable?.CanUnmerge() == true" OnIconClick="() => SelectedTable?.UnmergeSelectedCell()" />
        <span class="toolsbar" style="width:2px;background-position:-895px 0px"></span>
        <ToolsbarIcon XPosition="897" />
        <ToolsbarIcon XPosition="871" />
        <ToolsbarIcon XPosition="846" />
        <span class="toolsbar" style="width:2px;background-position:-844px 0px"></span>
        <ToolsbarIcon XPosition="819" OnIconClick="OpenSettingWindow" />
        <a target="_blank" href="/report/GetReport?reportid=@(ReportId)">
            <span class="toolsbar" style="width:25px;background-position:-794px 0px"></span>
        </a>
        <span class="toolsbar" style="width:2px;background-position:-792px 0px"></span>
        <ToolsbarIcon XPosition="767" />
        <ToolsbarIcon XPosition="742" />
        <ToolsbarIcon XPosition="717" />
        <span class="toolsbar" style="width:13px;background-position:-972px 0px"></span>
        <div style="position:absolute;right:67px">
            <input style="display:none" id="fontColorpicker" />
        </div>
        <div style="position: absolute; left: 550px;top:30px;">
            <input style="display:none" id="borderColorpicker" />
        </div>
        <div style="position:absolute;left:575px;top:30px">
            <input style="display:none" id="contentColorpicker" />
        </div>
    </div>
</div>

 <Caspian.UI.Window Title="@title" Style="width:400px" Status="status" StatusChanged="CloseWindow">
    @if (isSettingWindow)
    {
        <SettingWindowComponent Page="Page" Status="status" StatusChanged="CloseWindow" />
    }
    else
    {
        <FormatingWindowComponent Page="Page" Status="status" StatusChanged="CloseWindow" />
    }
</Caspian.UI.Window>

@code 
{
    bool isSettingWindow;
    string title;
    Caspian.UI.WindowStatus status;

    DropdownIcon borderStyle, borderWidth;

    void CloseWindow(Caspian.UI.WindowStatus status)
    {
        Page.WindowIsOpened = status == UI.WindowStatus.Open;
        this.status = status;
    }

    void OpenSettingWindow()
    {
        Page.WindowIsOpened = true;
        isSettingWindow = true;
        status = Caspian.UI.WindowStatus.Open;
        title = "Page Setting";
    }

    void OpenFormatingWindow()
    {
        Page.WindowIsOpened = true;
        isSettingWindow = false;
        status = Caspian.UI.WindowStatus.Open;
        title = "Number Formating";
    }

    [Parameter]
    public int ReportId { get; set; }

    [Parameter]
    public Alignment Alignment  { get; set; }

    [Parameter]
    public Font Font { get; set; }

    [Parameter]
    public Border Border { get; set; }

    [Parameter]
    public Page Page { get; set; }

    [Parameter]
    public Table SelectedTable { get; set; }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    async Task ChangeStyle()
    {
        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync(Alignment.Style);
    }

    async Task ChangeFont(bool? underline, bool? bold, bool? italic)
    {
        if (underline.HasValue)
            Font.UnderLine = underline.Value;
        if (bold.HasValue)
            Font.Bold = bold.Value;
        if (italic.HasValue)
            Font.Italic = italic.Value;
        await ChangeStyle();
    }

    async Task ChangeFont(int? size, string family, string color)
    {
        if (size.HasValue)
            Font.Size = size.Value;
        if (family.HasValue())
            Font.Family = family;
        if (color.HasValue())
            Font.Color = new Color(color);
        await ChangeStyle();
    }

    async Task ChangeVerticalAlignment(VerticalAlign align)
    {
        Alignment.VerticalAlign = align;
        await ChangeStyle();
    }

    async Task ChangeBorder(BorderStyle style)
    {
        Border.BorderStyle = style;
        await ChangeStyle();
    }

    async Task ChangeBorder(int width)
    {
        Border.Width = width;
        await ChangeStyle();
    }

    async Task ChangeBorder(string color)
    {
        Border.Color = new Color(color);
        await ChangeStyle();
    }

    async Task ChangeBorder(BorderKind type)
    {
        if (type == 0 || type.ConvertToInt() == 15)
            Border.BorderKind = type;
        else if ((Border.BorderKind & type) == type)
            Border.BorderKind = (BorderKind)(Border.BorderKind - type);
        else
            Border.BorderKind |=  type;
        await ChangeStyle();
    }

    async Task ChangeHorizontalAlignment(HorizontalAlign align)
    {
        Alignment.HorizontalAlign = align;
        await ChangeStyle();
    }

    public async Task CloseDropdown()
    {
        await borderStyle.Close();
        await borderWidth.Close();
    }

}
