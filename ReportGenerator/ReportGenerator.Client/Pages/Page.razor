@page "/"
@inject HttpClient Host
@namespace Caspian.Report
@using Caspian.Report.Data
@using Caspian.UI
@inject IJSRuntime JSRuntime
@{
    var alignment = SelectedControl?.Data.Alignment ?? SelectedTable?.Alignment;
    var font = SelectedControl?.Data.Font ?? SelectedTable?.Font;
    var border = SelectedControl?.Data.Border ?? SelectedTable?.Border;
}
<MessageBox @ref="messageBox" />
@if (Data != null)
{
    <div tabindex="1" @onkeydown="OnKeyDown" @ref="element" style="cursor:@(cursor)" class="r-page" @onmousemove="MouseMove" @onmousedown="MouseDown" @onmouseup="MouseUp"
         @onclick="MouseClick">
        <ToolsBar @ref="toolsBar" Page="this" Alignment="alignment" Font="font" Border="border" ReportId="1" SelectedTable="SelectedTable" OnChange="() => ChangeAlignment(alignment, font, border)" />
        <div class="report-content">
            <ToolsBox @ref="toolsBox" Page="this" />
            <div class="report-panel">
                <div id="bindConfig">
                    <span>Bounds Config</span>
                </div>
                <div id="ruler">
                </div>
                <Bound @ref=Bound Page="this" Data="Data.Bound"/>
            </div>
        </div>
        @if (controlAdding)
        {
            <ReportControl @ref="creatingControl" Data="controlData" Page="this" />
        }
        @if (tableAdding)
        {
            <Table @ref="creatingTable" Data="tableData" Bound="Bound" />
        }
    </div>
}

<Window Title="@windowTitle" Style="width:400px;" Status="status" StatusChanged="CloseWindow">
    @if (isTextWindow)
    {
        <TextboxWindow Status="status" StatusChanged="CloseWindow" Page="this" />
    }
    else
    {
        <ColumnWindow Status="status" StatusChanged="CloseWindow"  />
    }
</Window>

@code 
{
    void ChangeAlignment(Alignment alignment, Font font, Border border)
    {
        if (SelectedTable != null)
        {
            SelectedTable.Alignment = new Alignment()
                {
                    HorizontalAlign = alignment.HorizontalAlign,
                    VerticalAlign = alignment.VerticalAlign
                };
            SelectedTable.Font = new Font()
                {
                    Bold = font.Bold,
                    Color = font.Color,
                    Family = font.Family,
                    Italic = font.Italic,
                    Size = font.Size,
                    UnderLine = font.UnderLine
                };
            SelectedTable.Border = new Border()
                {
                    BorderKind = border.BorderKind,
                    Color = border.Color,
                    Width = border.Width,
                    BorderStyle = border.BorderStyle
                };
        }
    }
}

