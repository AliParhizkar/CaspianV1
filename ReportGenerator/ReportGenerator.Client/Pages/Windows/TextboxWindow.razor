@namespace Caspian.Report
@inject HttpClient Host
@using Caspian.Common
@using Caspian.Common.Extension
@using Caspian.UI
<div class="row c-controls p-2">
    <div class="col-md-4">
        <label>Textbox text</label>
    </div>
    <div class="col-md-8">
        <StringTextBox @bind-Value="@(text)" Disabled="fieldData.TotalFuncType.HasValue || fieldData.SystemFiledType.HasValue || fieldData.Path.HasValue() || fieldData.SystemVariable.HasValue" />
    </div>
     @if (bondType == BondType.DataFooter)
    {
        <div class="col-md-4">
            <label>Method name</label>
        </div>
        <div class="col-md-8">
@*             <DropdownList TValue="TotalFuncType?" Value="param.TotalFuncType" Disabled="param.ObjectPath.HasValue() && param.TotalFuncType == null || param.SystemFiledType.HasValue"
                          ValueChanged="TotalFuncTypeChanged" /> *@
        </div>
        @if (Params != null)
        {
            <div class="col-md-4">
                <label>Data field</label>
            </div>
            <div class="col-md-8">
@*                 <ComboBox TEntity="SelectListItem" TValue="string" Source="Params" @bind-Value="param.Path"
                          Disabled="param.Path.HasValue() && param.TotalFuncType == null || param.SystemFiledType.HasValue || param.TotalFuncType == null" /> *@
            </div>
        }
    }
    else if (Params != null)
    {
        <div class="col-md-4">
            <label>Data field</label>
        </div>
        <div class="col-md-8">
            <ComboBox TEntity="SelectListItem" TValue="string" Source="Params" Value="fieldData.Path" ValueChanged="ParamChanged"
                      Disabled="fieldData.Path.HasValue() && fieldData.Path == null || fieldData.SystemFiledType.HasValue || fieldData.TotalFuncType.HasValue" />
        </div>
    }
    @if (bondType == BondType.ReportTitle)
    {
        <div class="col-md-4">
            <label>System variable</label>
        </div>
        <div class="col-md-8">
            <DropdownList TValue="SystemVariable?" Value="fieldData.SystemVariable" Disabled="(text.HasValue() && fieldData.SystemVariable == null) || fieldData.Path.HasValue()"
                          ValueChanged="SystemVariableChange" />
        </div>
    }
    else if (bondType != BondType.DataHeader)
    {
        <div class="col-md-4">
            <label>System filed</label>
        </div>
        <div class="col-md-8">
@*             <DropdownList TValue="SystemFiledType?" Value="param.SystemFiledType"
                          Disabled="param.Path.HasValue() && param.SystemFiledType == null || param.TotalFuncType.HasValue"
                          ValueChanged="SystemFiledTypeChanged" /> *@
        </div>
    } 
    <div class="col-md-4"></div>
    <div class="col-md-8 justify-content-center d-flex pt-3 pb-2">
        <button style="width:70px;" @onclick="async () => await StatusChanged.InvokeAsync(WindowStatus.Close)" class="c-btn c-danger">Cancel</button>
        <button style="width:70px;" @onclick="UpdateData" class="c-btn c-primary">Save</button>
    </div>
    </div>
@code 
{
    string text;
    IEnumerable<SelectListItem> Params;
    TextFieldData fieldData;
    BondType bondType;
    protected override void OnInitialized()
    {
        if (Page.SelectedControl != null)
            text = Page.SelectedControl.Data.Text;
        else
            text = Page.SelectedTable.Text;
        fieldData = new TextFieldData();
        if (Page.SelectedControl != null)
            fieldData.CopySimpleProperty(Page.SelectedControl.Data.TextFieldData);
        // else
        //     fieldData.CopySimpleProperty(Page.SelectedTable.Text);
        // if (control != null)
        // {
        //     param.CopySimpleProperty(control.Data.ParameterData);
        //     bondType = control.Data.BondType.Value;
        // }    
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        var dataLevel = Page.SelectedTable?.BoundItem.DataLevel ?? Page.SelectedControl?.BoundItem.DataLevel;
        if (dataLevel.HasValue)
        {
            var url = $"/ReportGenerator/GetReportParameters?reportId={Page.ReportId}&dataLevel={dataLevel.Value}";
            Params = await Host.GetFromJsonAsync<IEnumerable<SelectListItem>>(url);
            
            await base.OnInitializedAsync();
        }
    }

    async Task UpdateData()
    {
        if (Page.SelectedControl != null)
            Page.SelectedControl.Data.Text = text;
        else
            Page.SelectedTable.Text = text;
        Page.SelectedControl?.Data.TextFieldData.CopySimpleProperty(fieldData);
        await StatusChanged.InvokeAsync(WindowStatus.Close);
    }

    [Parameter]
    public Page Page { get; set; }

    void ParamChanged(string title)
    {
        // param.Path = title;
        // if (param.Path.HasValue())
        //     param.Path = '{' + Params.Single(t => t.Value == param.Path).Text + '}';
        // else
        //     param.Path = null;
    }

    void TotalFuncTypeChanged(TotalFuncType? funcType)
    {
        // param.TotalFuncType = funcType;
        // param.Path = '{' + param.TotalFuncType.EnumText() + '}';
    }

    void SystemFiledTypeChanged(SystemFiledType? filedType)
    {
        // param.SystemFiledType = filedType;
        // param.Path = '{' + param.SystemFiledType.EnumText() + '}';
    }

    async Task SystemVariableChange(SystemVariable? variable)
    {
        fieldData.SystemVariable = variable;
        text = fieldData.SystemVariable.HasValue ? ('{' + fieldData.SystemVariable.EnumText() + '}') : null;
        await UpdateData();
    }

    [Parameter]
    public WindowStatus Status { get; set; }

    [Parameter]
    public EventCallback<WindowStatus> StatusChanged { get; set; }
}
