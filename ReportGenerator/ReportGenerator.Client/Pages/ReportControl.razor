@namespace Caspian.Report
@using Caspian.Common

@{
    var style = $"left:{Data.Left}px;top:{Data.Top}px;width:{Width}px;height:{Height}px;";
    var textStyle = $"{Alignment.TextStyle + Font.Style}";
}
<div class="r-controls" style="@style" @onmousedown="SelectControl" @ondblclick="OpenWindow">
    @if (Page.SelectedControl == this)
    {
        <span class="r-square r-top-center"></span>
        <span class="r-square r-bottom-center"></span>
        <span class="r-square r-left-middle"></span>
        <span class="r-square r-right-middle"></span>
    }
    <span class="r-angle r-top-left"></span>
    <span class="r-angle r-top-right"></span>
    <span class="r-angle r-bottom-left"></span>
    <span class="r-angle r-bottom-right"></span>
    <div style="@(Alignment.Style + Border.Style)" class="r-controls-flex">
        <span style="@textStyle">@ReportParam.Text</span>
    </div>

</div>

@code 
{
    double xStart, yStart, widthStart, heightStart, leftStart, topStart;
    ChangeType? changeType;
    protected override void OnInitialized()
    {
        Alignment = new Alignment();
        Font = new Font();
        Border = new Border();
        ReportParam = new ReportParam();
        if (Data.BondType.HasValue)
        {
            Page.SelectControl(this);
            changeType = null;
        }
        base.OnInitialized();
    }

    void OpenWindow()
    {
        Page.OpenTextWindow();
    }

    [Parameter]
    public ControlData Data { get; set; }

    public double Width { get; private set; } = 180;

    public double Height { get; private set; } = 30;

    public ReportParam ReportParam { get; set; }

    public NumberFormating NumberFormating { get; set; }

    public Alignment Alignment { get; private set; }

    public Font Font { get; private set; }

    public Border Border { get; private set; }

    [Parameter]
    public Page Page { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    public void SelectControl()
    {
        Page.SelectControl(this);
        Page.Bound.ResetBond();
        Page.Bound.DisableSelection();
    }

    public string GetCursor(double x, double y)
    {
        double right = Data.Left + Width, bottom = Data.Top + Height;
        if (Math.Abs(y - Data.Top) < 5 && x > Data.Left && x < right)
            return "n-resize";
        if (Math.Abs(y - bottom) < 5 && x > Data.Left && x < right)
            return "s-resize";
        if (Math.Abs(x - Data.Left) < 5 && y > Data.Top && y < bottom)
            return "e-resize";
        if (Math.Abs(x - right) < 5 && y > Data.Top && y < bottom)
            return "e-resize";
        if (x > Data.Left + 5 && x < right - 5 && y > Data.Top + 5 && y < bottom - 5)
            return "move";
        return "default";
    }

    public void DragStart(double x, double y)
    {
        double right = Data.Left + Width, bottom = Data.Top + Height;
        if (Math.Abs(y - Data.Top) < 5 && x > Data.Left && x < right)
            changeType = ChangeType.TopResize;
        else if (Math.Abs(y - bottom) < 5 && x > Data.Left && x < right)
            changeType = ChangeType.BottomResize;
        else if (Math.Abs(x - Data.Left) < 5 && y > Data.Top && y < bottom)
            changeType = ChangeType.LeftResize;
        else if (Math.Abs(x - right) < 5 && y > Data.Top && y < bottom)
            changeType = ChangeType.RightResize;
        else if (x > Data.Left + 5 && x < right - 5 && y > Data.Top + 5 && y < bottom - 5)
            changeType = ChangeType.Move;
        else
            changeType = null;
        if (changeType.HasValue)
        {
            Page.Bound.DisableSelection();
            xStart = x;
            yStart = y;
            leftStart = Data.Left;
            topStart = Data.Top;
            widthStart = Width;
            heightStart = Height;
        }
    }

    public void InitializeBeforAddedToPage()
    {
        changeType = ChangeType.Move;
        Data.BondType = null;
    }

    public void Move(int x, int y)
    {
        Data.Left += x;
        Data.Top += y;
       
    }

    public void Resize(int width, int height)
    {
        Width += width;
        Height += height;
    }

    public void Drag(double x, double y)
    {
        if (changeType == null)
            return;
        double difX = xStart - x, difY = yStart - y;
        RecData bondData = null;
        if (Data.BondType.HasValue)
            bondData = Page.Bound.GetBondData(Data.BondType.Value);
        switch (changeType)
        {
            case ChangeType.Move:
                Data.Left = leftStart - difX;
                Data.Top = topStart - difY;
                if (Data.BondType.HasValue)
                {
                    if (Data.Left < bondData.Left)
                        Data.Left = bondData.Left;
                    if (Data.Top < bondData.Top)
                        Data.Top = bondData.Top;
                    if (Data.Left + Width > bondData.Right)
                        Data.Left = bondData.Right - Width;
                }
                break;
            case ChangeType.BottomResize:
                Height = heightStart - difY;
                break;
            case ChangeType.RightResize:
                Width = widthStart - difX;
                break;
            case ChangeType.LeftResize:
                Data.Left = leftStart - difX;
                Width = widthStart + difX;
                break;
            case ChangeType.TopResize:
                Data.Top = topStart - difY;
                Height = heightStart + difY;
                break;
        }
        double width = Width, height = Height;
        

        Page.Bound.ShowRuler(Data, ref width, ref height, changeType.Value);
        Width = width;
        Height = height;
        
    }
}
