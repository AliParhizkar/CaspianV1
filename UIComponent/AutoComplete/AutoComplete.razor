@namespace Caspian.UI
@typeparam TEntity
@typeparam TValue
@attribute [CascadingTypeParameter(nameof(TValue))]
@inject IJSRuntime jsRuntime
@inject IServiceScopeFactory ServiceScopeFactory

@{
    var attrs = new Dictionary<string, object>();
    if (Id.HasValue())
    {
        attrs.Add("id", Id.Replace('.', '_'));
        attrs.Add("name", Id.Replace('.', '_'));
    }
    var className = "t-widget t-numerictextbox c-lookup";
    if (Disabled)
        className += " t-state-disabled";
    if (ErrorMessage.HasValue())
        className += " t-state-error";
}

<div style="@Style" closeOnBlur="@CloseOnBlur" error-message="@ErrorMessage" status="@status.ConvertToInt()" class="@className" autoHide="@AutoHide">
    <input @ref="input" value="@Text" @oninput="SetSearchValue" @onkeydown="@(async e => await OnKeyDownHandler(e))"
           @attributes="inputAttrs" @onkeyup="@(async e => await OnKeyUp(e))" />
    @if (!HideIcon)
    {
        <span class="fa fa-search"
              @onclick="@(() =>
                        {
                            if (!Disabled)
                            {
                                status = WindowStatus.Open;
                                Focused = true;
                            }
                        })"></span>
    }
    @if (status == WindowStatus.Open)
    {
        <div class="t-animation-container">
            <div class="t-HelpWindow">
                @if (!HideHeader)
                {
                    <div class="t-header">
                        <span class="t-window-title">@(Title)</span>
                        <span class="t-window-action t-link" @onclick="async () => await CloseHelpForm()">
                            <i class="fa fa-close"></i>
                        </span>
                    </div>
                }
                <div class="t-content">
                    <CascadingValue Name="LookupStringSearchValue" Value="SearchStr">
                        <CascadingValue Name="AutoComplateState" Value="SearchState">
                            <CascadingValue Value="false" Name="GridEditableList">
                                <CascadingValue Value=this>
                                    @ChildContent
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </div>
            </div>
        </div>
    }
</div>


