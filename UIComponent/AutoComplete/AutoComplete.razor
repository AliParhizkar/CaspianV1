@namespace Caspian.UI
@typeparam TEntity
@typeparam TValue
@implements IAutoCompleteValueInitializer
@inject IServiceScopeFactory ServiceScopeFactory
@inject IServiceProvider provider
@{
    var attrs = new Dictionary<string, object>();
    if (Id.HasValue())
    {
        attrs.Add("id", Id.Replace('.', '_'));
        attrs.Add("name", Id.Replace('.', '_'));
    }
    var className = "t-widget t-numerictextbox c-lookup";
    if (Disabled)
        className += " t-state-disabled";
    if (ErrorMessage.HasValue())
        className += " t-state-error";
}

<div class="@className">
    <input @ref="Input" value="@Text" @oninput="SetSearchValue" @onkeydown="@(async e => await OnKeyDownHandler(e))"
           @attributes="inputAttrs" @onkeyup="@(async e => await OnKeyUp(e))" />
    @if (!HideIcon)
    {
        <span class="fa fa-search"
              @onclick="@(() =>
                        {
                            if (!Disabled)
                            {
                                WindowStatus = WindowStatus.Open;
                                Focused = true;
                            }
                        })"></span>
    }
</div>
<div @ref="SearchForm" class="t-HelpWindow">
    @if (!HideHeader)
    {
        <div class="t-header">
            <span class="t-window-title">@(Title)</span>
            <span class="t-window-action t-link" @onclick="() => { WindowStatus = WindowStatus.Close; }">
                <i class="fa fa-close"></i>
            </span>
        </div>
    }
    <div class="t-content">
        <CascadingValue Name="LookupStringSearchValue" Value="SearchStr">
            <CascadingValue Name="AutoComplateState" Value="SearchState">
                <CascadingValue Value="false" Name="GridEditableList">
                <CascadingValue Value=this>
                    @ChildContent
                </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </div>
</div>

