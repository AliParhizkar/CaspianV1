@namespace Caspian.UI
@using System.ComponentModel.DataAnnotations;
@typeparam TEntity
@typeparam TValue
@implements ICheckboxList<TValue>
@inject IServiceProvider Provider

<fieldset class="t-checkbox-list">
    <legend>@(Title)</legend>
    <span class="t-content" style="@Style">
        @if (dic != null)
        {
        
            foreach (var item in dic)
            {
                <CheckBox ValueChanged="async (TValue value) =>
                                         {
                                             await UpdateValue(value);
                                         }" CheckboxList="this" Value="item.Key" Title="@item.Value" />
            }
        }
        else if (Source != null)
        {
            foreach (var item in Source)
            {
                <CheckBox ValueChanged="async (TValue value) =>
                                         {
                                             await UpdateValue(value);
                                         }" CheckboxList="this" Value="(TValue)Convert.ChangeType(item.Value, typeof(TValue))" Title="@item.Text" Disabled="item.Disabled" />
            }
        }
        else if (typeof(TEntity) != typeof(SelectListItem))
        {
            if (Items != null)
            {
                foreach (var item in Items)
                {
                
                    <CheckBox ValueChanged="async (TValue value) =>
                                         {
                                             await UpdateValue(value);
                                         }" CheckboxList="this" Value="(TValue)Convert.ChangeType(item.Value, typeof(TValue).GetUnderlyingType())" Title="@item.Text" Disabled="item.Disabled" />
                }
            }
        }
        else
        {
            @CheckboxItems.Invoke(this)
        }
    </span>
</fieldset>


@code
{
    bool LoadData;
    Dictionary<TValue, string> dic;
    IList<SelectListItem> Items;

    async Task DataBinding()
    {
        if (LoadData)
        {
            LoadData = false;
            Items = new List<SelectListItem>();
            if (Source == null)
            {
                var service = Provider.GetService(typeof(ISimpleService<TEntity>)) as ISimpleService<TEntity>;
                var query = service.GetAll(default(TEntity));
                if (ConditionExpression != null)
                    query = query.Where(ConditionExpression);
                if (OrderByExpression != null)
                    query = query.OrderBy(OrderByExpression);
                var list = new ExpressionSurvey().Survey(DisplayTextExpression);
                if (DisableExpression != null)
                {
                    var tempList = new ExpressionSurvey().Survey(DisableExpression);
                    foreach(var expr in tempList)
                    {
                        if (!list.Any(t => t.CompareMemberExpression(expr)))
                            list.Add(expr);
                    }
                }
                var type = typeof(TEntity);
                var parameter = Expression.Parameter(type, "t");
                list = list.Select(t => parameter.ReplaceParameter(t)).ToList();
                var pkey = type.GetPrimaryKey();
                var pKeyExpr = Expression.Property(parameter, pkey);
                var pkeyAdded = false;
                foreach (var expr1 in list)
                {
                    if (expr1.Member == pkey)
                        pkeyAdded = true;
                }
                if (!pkeyAdded)
                    list.Add(pKeyExpr);
                var lambda = parameter.CreateLambdaExpresion(list);
                var dataList = await query.GetValuesAsync(list);
                var displayFunc = DisplayTextExpression.Compile();
                var valueFunc = Expression.Lambda(pKeyExpr, parameter).Compile();
                Delegate disableFunc = DisableExpression?.Compile();
                foreach (var item in dataList)
                {
                    var text = Convert.ToString(displayFunc.DynamicInvoke(item));
                    var value = Convert.ToString(valueFunc.DynamicInvoke(item));
                    var disabled = Convert.ToBoolean(disableFunc.DynamicInvoke(item));
                    Items.Add(new SelectListItem(value, text, disabled));
                }
            }
        }
    }

    public async Task UpdateValue(TValue value)
    {
        if (ValueChanged.HasDelegate && ValuesChanged.HasDelegate)
            throw new CaspianException("خطا: For Checkbox component only one of the Value or Values property must bind", null);
        if (ValueChanged.HasDelegate)
        {
            Value = value;
            await ValueChanged.InvokeAsync(Value);
        }
        if (ValuesChanged.HasDelegate)
        {
            if (Values == null)
                Values = new List<TValue>();
            if (Single)
                Values.Clear();
            if (!Values.Contains(value))
                Values.Add(value);
            else
                Values.Remove(value);
            await ValuesChanged.InvokeAsync(Values);
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        await DataBinding();
        await base.OnParametersSetAsync();
    }

    protected override void OnInitialized()
    {
        //LoadData = true;
        if (CheckboxItems == null)
        {
            var type = typeof(TValue).GetUnderlyingType();

            if (type.IsEnumType())
            {
                dic = new Dictionary<TValue, string>();
                foreach (FieldInfo fi in type.GetFields().Where(t => !t.IsSpecialName))
                {
                    var da = fi.GetCustomAttribute<DisplayAttribute>();
                    if (da != null)
                        dic.Add((TValue)fi.GetValue(null), da.Name);
                    else
                        dic.Add((TValue)fi.GetValue(null), fi.Name);
                }
            }
        }
        base.OnInitialized();
    }

    [Parameter, JsonIgnore]
    public string Title{ get; set; }

    [Parameter, JsonIgnore]
    public Expression<Func<TEntity, string>> DisplayTextExpression { get; set; }

    [Parameter, JsonIgnore]
    public Expression<Func<TEntity, bool>> OrderByExpression { get; set; }

    [Parameter, JsonIgnore]
    public Expression<Func<TEntity, bool>> ConditionExpression { get; set; }

    [Parameter, JsonIgnore]
    public Expression<Func<TEntity, bool>> DisableExpression { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TValue>> ValueExpression { get; set; }

    [Parameter]
    public IList<TValue> Values { get; set; }

    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }

    [Parameter]
    public Expression<Func<IList<TValue>>> ValuesExpression { get; set; }

    [Parameter]
    public bool Single { get; set; }

    [Parameter]
    public IList<SelectListItem> Source { get; set; }

    [Parameter]
    public RenderFragment<CheckboxList<TEntity, TValue>> CheckboxItems { get; set; }
}
