@namespace Caspian.UI
@using System.ComponentModel.DataAnnotations;
@typeparam TEntity
@typeparam TValue
@inject IServiceProvider Provider
@inject BatchServiceData BatchServiceData
<fieldset class="t-checkbox-list">
    <legend>@(Title)</legend>
    <div class="c-checkbox-list" style="@Style">
        @if (dic != null)
        {
            foreach (var item in dic)
            {
                var flag = Values.Contains(item.Key);
                <CheckBox TValue="bool" Value="flag" ValueChanged="async check => await UpdateValue(item.Key, check)" 
                    Title="@item.Value" />
            }
        }
        else if (Source != null)
        {
            foreach (var item in Source)
            {
                var value = (TValue)Convert.ChangeType(item.Value, typeof(TValue));
                var flag = Values.Contains(value);
                <CheckBox TValue="bool" Value="flag" ValueChanged="async check => await UpdateValue(value, check)" Title="@item.Text" Disabled="item.Disabled" />
            }
        }
        else if (typeof(TEntity) != typeof(SelectListItem))
        {
            if (Items != null)
            {
                foreach (var item in Items)
                {
                    TValue value = default;
                    if (complexValueType)
                    {
                        var info = typeof(TValue).GetForeignKey(typeof(TEntity));
                        var foreigenKeyType = info.PropertyType.GetUnderlyingType();
                        var foreigenKeyId = Convert.ChangeType(item.Value, foreigenKeyType);
                        if (Values != null)
                        {
                            foreach (var val in Values)
                            {
                                if (Convert.ChangeType(info.GetValue(val), foreigenKeyType).Equals(foreigenKeyId))
                                {
                                    value = val;
                                    break;
                                }
                            }
                        }
                        if (value == null)
                        {
                            value = Activator.CreateInstance<TValue>();
                            info.SetValue(value, foreigenKeyId);
                        }
                    }
                    else
                        value = (TValue)Convert.ChangeType(item.Value, typeof(TValue).GetUnderlyingType());
                    var flag = Values != null && Values.Contains(value);
                    <div class="c-item">
                        <CheckBox TValue="bool" Value="flag" ValueChanged="async check => await UpdateValue(value, check)"
                            Title="@item.Text" Disabled="item.Disabled" />
                    </div>
                    
                }
            }
        }
        else
        {
            @CheckboxItems.Invoke(this)
        }
    </div>
</fieldset>


@code
{
    bool LoadData;
    Dictionary<TValue, string> dic;
    IList<SelectListItem> Items;
    bool complexValueType;

    async Task DataBinding()
    {
        if (LoadData)
        {
            LoadData = false;
            Items = new List<SelectListItem>();
            if (Source == null)
            {
                var service = Provider.GetService(typeof(IBaseService<TEntity>)) as IBaseService<TEntity>;
                var query = service.GetAll(default(TEntity));
                if (ConditionExpression != null)
                    query = query.Where(ConditionExpression);
                if (OrderByExpression != null)
                    query = query.OrderBy(OrderByExpression);
                var list = new ExpressionSurvey().Survey(TextExpression);
                if (DisableExpression != null)
                {
                    var tempList = new ExpressionSurvey().Survey(DisableExpression);
                    foreach(var expr in tempList)
                    {
                        if (!list.Any(t => t.CompareMemberExpression(expr)))
                            list.Add(expr);
                    }
                }
                var type = typeof(TEntity);
                var parameter = Expression.Parameter(type, "t");
                list = list.Select(t => parameter.ReplaceParameter(t)).ToList();
                var pkey = type.GetPrimaryKey();
                var pKeyExpr = Expression.Property(parameter, pkey);
                var pkeyAdded = false;
                foreach (var expr1 in list)
                {
                    if (expr1.Member == pkey)
                        pkeyAdded = true;
                }
                if (!pkeyAdded)
                    list.Add(pKeyExpr);
                var lambda = parameter.CreateLambdaExpresion(list);
                var dataList = await query.GetValuesAsync(list);
                var displayFunc = TextExpression.Compile();
                var valueFunc = Expression.Lambda(pKeyExpr, parameter).Compile();
                Delegate disableFunc = DisableExpression?.Compile();
                foreach (var item in dataList)
                {
                    var text = Convert.ToString(displayFunc.DynamicInvoke(item));
                    var value = Convert.ToString(valueFunc.DynamicInvoke(item));
                    var disabled = disableFunc == null ? false : Convert.ToBoolean(disableFunc.DynamicInvoke(item));
                    Items.Add(new SelectListItem(value, text, disabled));
                }
            }
        }
    }

    public async Task UpdateValue(TValue value, bool check)
    {
        if (Values == null)
            Values = new List<TValue>();
        if (Values.Contains(value))
            Values.Remove(value);
        else
            Values.Add(value);
        if (ValuesChanged.HasDelegate)
            await ValuesChanged.InvokeAsync(Values);
    }

    protected async override Task OnParametersSetAsync()
    {
        await DataBinding();
        await base.OnParametersSetAsync();
    }

    protected override void OnInitialized()
    {
        LoadData = true;
        var type = typeof(TValue).GetUnderlyingType();
        complexValueType = type.IsClass && type != typeof(string);
        if (complexValueType)
        {
            //throw new NotImplementedException("");
            //BatchServiceData.OtherTypeInfo = type.GetProperties().Single(t => t.PropertyType == typeof(TEntity));
        }
        if (CheckboxItems == null)
        {

            if (type.IsEnumType())
            {
                dic = new Dictionary<TValue, string>();
                foreach (FieldInfo fi in type.GetFields().Where(t => !t.IsSpecialName))
                {
                    var da = fi.GetCustomAttribute<DisplayAttribute>();
                    if (da != null)
                        dic.Add((TValue)fi.GetValue(null), da.Name);
                    else
                        dic.Add((TValue)fi.GetValue(null), fi.Name);
                }
            }
        }
        base.OnInitialized();
    }

    [Parameter]
    public string Title{ get; set; }

    [Parameter]
    public Expression<Func<TEntity, string>> TextExpression { get; set; }

    [Parameter]
    public Expression<Func<TEntity, bool>> OrderByExpression { get; set; }

    [Parameter]
    public Expression<Func<TEntity, bool>> ConditionExpression { get; set; }

    [Parameter]
    public Expression<Func<TEntity, bool>> DisableExpression { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public IList<TValue> Values { get; set; }

    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }

    [Parameter]
    public Expression<Func<IList<TValue>>> ValuesExpression { get; set; }

    [Parameter]
    public IList<SelectListItem> Source { get; set; }

    [Parameter]
    public RenderFragment<CheckboxList<TEntity, TValue>> CheckboxItems { get; set; }
}
