@namespace Caspian.UI
@using System.ComponentModel.DataAnnotations
@typeparam TValue
@inject CaspianDataService service
@inherits CBaseInput<TValue>
@{
    var className = "t-dropdown-wrap";
    if (Disabled)
        className += " t-state-disabled";
    else if (ErrorMessage == null)
        className += " t-state-default";
    else
        className += " t-state-error";
}
<div @ref="element" @attributes="attrs" class="t-widget t-dropdown" error-message="@ErrorMessage">
    <div class="@className" @onclick="OpenWindow">
        <span class="t-input">@(text)</span>
        <span class="t-t-select" >
            <i class="t-icon t-arrow-down fa fa-caret-down"></i>
        </span>
        <input @ref="htmlElement" @attributes="inputAttrs" @onchange="UpdateValue" autocomplete="off" style="display:none" />
    </div>
    @if (status == WindowStatus.Open)
    {
        <div class="t-animation-container">
            <div class="t-popup t-group">
                <ul class="t-reset">
                    @foreach(var item in Items)
                    {
                        string name = "t-item";
                        if (IsEqual(item.Value, Value))
                            name += " t-state-selected";
                        if (item.Disabled)
                            name += " t-disable";
                        <li @onclick="async () => await SetValueForActiveItem(item)" class="@name">@item.Text</li>
                    }
                </ul>
            </div>
        </div>
    }
</div>
@code
{
    ElementReference element;
    string text;
    Dictionary<string, object> attrs;
    Dictionary<string, object> inputAttrs;
    WindowStatus status;
    List<SelectListItem> Items;

    bool IsEqual(string value1, TValue value2)
    {
        if (value1 == null)
            return value2 == null;
        if (value2 == null)
            return value1 == null;
        var temp1 = Convert.ToInt32(value1);
        var temp2 = Convert.ChangeType(value2, typeof(TValue).GetUnderlyingType());
        return temp1.Equals(Convert.ToInt32(temp2));
    }

    void OpenWindow()
    {
        if (status != WindowStatus.Open && !Disabled)
            status = WindowStatus.Open;
    }

    async Task SetValueForActiveItem(SelectListItem item)
    {
        if (!item.Disabled && !Disabled)
        {
            await SetValue(item.Value);
            await Task.Delay(300);
            status = WindowStatus.Close;
        }
    }

    async Task UpdateValue(ChangeEventArgs arg)
    {
        TValue value = default;
        var str = Convert.ToString(arg.Value);
        if (Source == null)
        {
            if (this.DynamicType != null)
                value = (TValue)Enum.Parse(DynamicType.GetUnderlyingType(), str);
            else if (str.HasValue())
                value = (TValue)Enum.Parse(typeof(TValue).GetUnderlyingType(), str);
        }
        else
            if (str.HasValue())
            value = (TValue)Convert.ChangeType(str, typeof(TValue).GetUnderlyingType());
        Value = value;
        await ValueChanged.InvokeAsync(Value);
        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        if (ValueExpression != null)
        {
            var expr = ValueExpression.Body;
            while (expr.NodeType == ExpressionType.MemberAccess)
            {
                var property = (expr as MemberExpression).Member;
                if (property.Name == "SearchData")
                {
                    var type = property.DeclaringType;
                    if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(SimplePage<>))
                        Search = true;
                }
                expr = (expr as MemberExpression).Expression;
            }
        }
        base.OnInitialized();
    }

    [Parameter]
    public IList<SelectListItem> Source { get; set; }

    [Parameter]
    public Func<TValue, bool> FilterFunc { get; set; }

    [Parameter]
    public Func<TValue, bool> DisableFunc { get; set; }

    protected override void OnParametersSet()
    {
        if (Source == null)
        {
            string str = service.Language == Language.Fa ? "لطفا انتخاب نمائید" : "Please select ...";
            Items = new List<SelectListItem>();
            if (typeof(TValue).IsNullableType())
                Items.Add(new SelectListItem(null, str));
            else if (Search)
                Items.Add(new SelectListItem("0", str));
            var fields = GetFields();
            foreach (var field in fields.Where(t => !t.IsSpecialName))
            {
                var attr = field.GetCustomAttribute<DisplayAttribute>();
                var value = field.GetValue(null);
                var disable = false;
                if (DisableFunc != null)
                {
                    var enumValue = (TValue)Convert.ChangeType(value, typeof(TValue));
                    disable = DisableFunc.Invoke(enumValue);
                }
                var intValue = Convert.ToInt32(value);
                Items.Add(new SelectListItem(intValue.ToString(), attr == null ? field.Name : attr.Name, disable));
            }
        }
        else
            Items = Source.ToList();
        text = service.Language == Language.Fa ? "لطفا انتخاب نمائید" : "Please select ...";
        if (Value != null && !Value.Equals(default(TValue)))
        {
            if (Source == null)
            {
                var field = GetFields().SingleOrDefault(t => t.GetValue(null).Equals(Value));
                if (field != null)
                {
                    var attr = field.GetCustomAttribute<DisplayAttribute>();
                    text = (attr != null) ? attr.Name : field.Name;
                }
            }
            else
            {
                string strValue = null;
                if (typeof(TValue).GetUnderlyingType().IsEnum)
                    strValue = Convert.ToString(Convert.ToInt32(Value));
                else
                    strValue = Convert.ToString(Convert.ToInt32(Value));
                text = Source.SingleOrDefault(t => t.Value == strValue)?.Text;
            }
        }
        attrs = new Dictionary<string, object>();
        if (Style.HasValue())
            attrs["style"] = Style;
        attrs["tabindex"] = TabIndex ?? 0;
        inputAttrs = new Dictionary<string, object>();

        if (Id.HasValue())
        {
            inputAttrs["id"] = Id.Replace('.', '_');
            inputAttrs["name"] = Id;
        }
        if (Value == null)
            inputAttrs["value"] = Value;
        else 
        {
            if (typeof(TValue) == typeof(string))
                inputAttrs["value"] = Value;
            else
                inputAttrs["value"] = Convert.ToInt32(Value).ToString();
        }

        base.OnParametersSet();
    }

    private IEnumerable<FieldInfo> GetFields()
    {
        var type = DynamicType ?? typeof(TValue);
        if (type.IsNullableType())
            type = Nullable.GetUnderlyingType(type);
        if (!type.IsEnum)
            throw new Exception("خطا: Type " + type.Name + " is not enum : " + ValueExpression.Body.ToString());
        var fields = type.GetFields().Where(t => !t.IsSpecialName);
        if (FilterFunc != null)
            return fields.Where(t => FilterFunc.Invoke((TValue)t.GetValue(null)));
        return fields;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotnet = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("$.caspian.bindDropdownList", dotnet, element);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public void CloseWindow()
    {
        status = WindowStatus.Close;
        StateHasChanged();
    }
}
