@namespace Caspian.UI
@using Caspian.Common
@inject IJSRuntime JSRuntime
<fieldset @ref="element" class="c-multiselect-autocomplete">
    <legend>
        <span class="c-title">@(Title)</span>
        <span @onclick="ToggleForm" class="fa fa-search" ></span>
    </legend>
    <div class="c-content">
        @foreach(var item in Items)
        {
            <span class="c-state-default">
                <span @onclick="@(() => {RemoveItem(item);})" class="c-close fa fa-close"></span>
                <span class="c-title">@(item.Text)</span>
            </span>
        }
    </div>
    @if (showForm)
    {
        <div class="t-HelpWindow">
            <div class="t-header">
                <span class="t-window-title">@Title</span>
                <span @onclick="ToggleForm" class="fa fa-close"></span>
            </div>
            <CascadingValue Value="this" Name="MultiselectAutocomplete">
                <DynamicComponent Type="LookupType" />
            </CascadingValue>
        </div>
    }

</fieldset>

@code 
{
    bool showForm;
    string message;
    ElementReference element;
    void ToggleForm()
    {
        showForm = !showForm;
    }

    void RemoveItem(SelectListItem item)
    {
        Items.Remove(item);
    }

    internal void AddToList(SelectListItem item)
    {
        if (Items.Any(t => t.Value == item.Value))
            message = $"{item.Text} به لیست جستجو اضافه شده است";
        else
            Items.Add(item);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Items = new List<SelectListItem>();
        base.OnInitialized();
    }

    [Parameter]
    public Type LookupType{ get; set; }

    [Parameter]
    public string Title{ get; set; }

    [Parameter]
    public IList<SelectListItem> Items{ get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("$.caspian.bindMultiselectLookup", element);
        if (message.HasValue())
        {
            await JSRuntime.InvokeVoidAsync("$.caspian.showMessage", message);
            message = null;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
