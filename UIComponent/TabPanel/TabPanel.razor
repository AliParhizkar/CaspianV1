@namespace Caspian.UI
@inject IJSRuntime JSRuntime
@{
    var className = Vertical ? "t-widget t-tabstrip t-vertical" : "t-widget t-tabstrip";
}
<CascadingValue Value="this" Name="ParentTabPanel">
    <div @ref="element" style="@Style" class="@className">
        <div class="t-widget t-header">
            <div class="c-tabstrip-items">
                <ul class="t-reset t-tabstrip-items" >
                    @{
                        var index = 1;
                    }
                    @foreach (var item in tabPanels)
                    {
                        var className = "t-item ";
                        if (index == TabIndex)
                            className += "t-state-active";
                        else
                            className += "t-state-default";
                        <li class="@className" >
                            @if (index == TabIndex)
                            {
                                <span class="t-link">@((MarkupString)item.Title)</span>
                            }
                            else
                            {
                                int tabIndex = index;
                                <span class="t-link"
                              @onclick="async () =>
                                              {
                                                  TabIndex = tabIndex;
                                                  CurentTabpanel = item;
                                                  await this.TabIndexChanged.InvokeAsync(tabIndex);
                                              }">@((MarkupString)item.Title)</span>
                                @if (item.Closeable)
                                {
                                    <span class="t-close"></span>
                                }
                            }

                        </li>
                        index++;
                    }
                </ul>
                <span class="c-selected-panel"></span>
            </div>
        </div>
        @Tabs
    </div>
</CascadingValue>
@code 
{
    IList<TabPanelItem> tabPanels;
    internal TabPanelItem CurentTabpanel;
    ElementReference element;

    internal void AddTabData(TabPanelItem tab)
    {
        if (!tabPanels.Contains(tab))
        {
            tabPanels.Add(tab);
            if (tabPanels.Count >= TabIndex && TabIndex > 0)
                CurentTabpanel = tabPanels[TabIndex - 1];
            StateHasChanged();
        }
    }

    [Parameter]
    public bool Vertical { get; set; }

    [Parameter]
    public int TabIndex { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public bool LoadOnDemand { get; set; }

    [Parameter]
    public EventCallback<int> TabIndexChanged { get; set; }

    [Parameter]
    public RenderFragment Tabs { get; set; }

    [Parameter]
    public bool AddButton { get; set; }


    protected override void OnInitialized()
    {
        if (TabIndex == 0)
            TabIndex = 1;
        tabPanels = new List<TabPanelItem>();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        var index = 1;
        foreach(var tab in tabPanels)
        {
            if (index == TabIndex)
                CurentTabpanel = tab;
            index++;
        }
        base.OnParametersSet();
    }

    public void ClearTabs()
    {
        tabPanels.Clear();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("$.caspian.bindTabpanel", element);
        await base.OnAfterRenderAsync(firstRender);
    }
}
