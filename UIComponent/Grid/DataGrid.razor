@namespace Caspian.UI
@typeparam TEntity
@attribute [CascadingTypeParameter(nameof(TEntity))]
@inject IServiceScopeFactory ServiceScopeFactory
    
<CascadingValue Value="this" Name="Grid">
    @if (columnsData == null)
    {
        columnsData = new List<ColumnData>();
        @Columns(null)
    }
    else
    {
    <div @ref="mainDiv" class="t-widget t-grid">
        @if (SearchState == null)
        {
            @if (ToolsBar == null)
            {
                <GridToolsBar TEntity="TEntity" HideInsertIcon="HideInsertIcon" />
            }
        }
        else
            @ToolsBar
        <GridHeader TableWidth="TableWidth" ColumnsData="columnsData" OnOrderingChanged="async () =>
                                                {
                                                    await ChangePageNumber(PageNumber);
                                                }" />

        <div class="t-grid-content" style="height:@(TableHeight)px">
            @if (insertedEntity?.UpsertMode != null && Inline)
            {
                <table @attributes="tableAttrs" class="c-grid-insert">
                    <tbody>
                        <tr>
                            <CaspianContainer @ref="insertContiner">
                                <CascadingValue Value="InsertContext">
                                    <CaspianValidationValidator Source="source" ValidatorType="serviceType" />
                                    <CascadingValue Value="insertedEntity" Name="GridRowData">
                                        @Columns(insertedEntity)
                                    </CascadingValue>
                                </CascadingValue>
                            </CaspianContainer>
                        </tr>
                    </tbody>
                </table>
            }
            @if (Items != null)
            {
                <table @attributes="tableAttrs" class="c-grid-items">
                    <tbody>
                            @{
                                int index = 0;
                                var pkey = typeof(TEntity).GetPrimaryKey();
                                foreach (var item in Items)
                                {
                                    var id = Convert.ToInt32(pkey.GetValue(item));
                                    var attrs = new Dictionary<string, object>();
                                    var rowIndex = index;
                                    if (SelectType == SelectType.Single)
                                    {
                                        if (rowIndex == SelectedRowIndex)
                                            attrs.Add("class", "t-state-selected");
                                    }
                                    if (SelectType == SelectType.Multi && selectedIds.Contains(id))
                                        attrs.Add("class", "t-state-selected");
                                    if (SelectType != SelectType.None)
                                    {
                                        attrs.Add("onmousedown", EventCallback.Factory.Create<MouseEventArgs>(this, async (e) =>
                                        {
                                            SelectRow(rowIndex);
                                            if (SelectType == SelectType.Multi)
                                            {
                                                if (selectedIds.Contains(id))
                                                    selectedIds.Remove(id);
                                                else
                                                    selectedIds.Add(id);
                                            }
                                            if (OnRowSelect.HasDelegate)
                                                await OnRowSelect.InvokeAsync(item);
                                            if (OnInternalRowSelect.HasDelegate)
                                                await OnInternalRowSelect.InvokeAsync(id);
                                            await SetStateGridData();

                                    }));
                                }
                                index++;
                                var rowData = new RowData<TEntity>()
                                {
                                    Data = item,
                                    RowIndex = rowIndex,
                                    DynamicData = DynamicData == null ? null : DynamicData[rowIndex],
                                    UpsertMode = item == selectedEntity ? UpsertMode.Edit : null
                                };
                                <tr @attributes="attrs">
                                    <CascadingValue Name="GridRowData" Value="rowData">
                                        @if (item == selectedEntity)
                                        {
                                            <CascadingValue Value="EditContext">
                                                <CaspianValidationValidator @ref="validator" Source="source" ValidatorType="serviceType" />
                                                <CaspianContainer @ref="updateContiner">
                                                        @Columns(rowData)
                                                </CaspianContainer>
                                            </CascadingValue>
                                        }
                                        else
                                        {
                                            @Columns(rowData)
                                        }
                                    </CascadingValue>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
            else
            {
                <span class="t-loading"></span>
            }
        </div>
        <GridPager HidePageSize="HidePageSize" PageSize="PageSize" PageNumber="PageNumber" TotalRecord="Total" OnPageSizeChanged="ChangePageSize"
                   OnPageNumberChanged="ChangePageNumber" />
    </div>
    }
</CascadingValue>