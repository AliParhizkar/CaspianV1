@namespace Caspian.UI
@typeparam TEntity
@inject IServiceScopeFactory ServiceScopeFactory
<CascadingValue Value="this" Name="Grid">
    @if (columnsData == null)
    {
        columnsData = new List<ColumnData>();
        @Columns(null)
    }
    else
    {
    <div @ref="mainDiv" class="t-widget t-grid">
        @if (SearchState == null)
        {
            @if (ToolsBar == null)
            {
                <GridToolsBar TEntity="TEntity" HideInsertIcon="HideInsertIcon" />
            }
        }
        else
            @ToolsBar
        <GridHeader TableWidth="TableWidth" ColumnsData="columnsData" OnOrderingChanged="async () =>
                                                {
                                                    await ChangePageNumber(PageNumber);
                                                }" />

        <div class="t-grid-content" style="height:@(TableHeight)px">
            @if (Items != null)
            {
                <table @attributes="tableAttrs">
                    <tbody>
                        @{
                            int index = 0;
                            var pkey = typeof(TEntity).GetPrimaryKey();
                            foreach (var item in Items)
                            {
                                var id = Convert.ToInt32(pkey.GetValue(item));
                                var attrs = new Dictionary<string, object>();
                                var rowIndex = index;
                                if (SelectType == SelectType.Single)
                                {
                                    if (rowIndex == SelectedRowIndex)
                                        attrs.Add("class", "t-state-selected");
                                }
                                if (SelectType == SelectType.Multi && selectedIds.Contains(id))
                                    attrs.Add("class", "t-state-selected");
                                if (SelectType != SelectType.None)
                                {
                                    attrs.Add("onmousedown", EventCallback.Factory.Create<MouseEventArgs>(this, async (e) =>
                                    {
                                        SelectRow(rowIndex);
                                        if (SelectType == SelectType.Multi)
                                        {
                                            if (selectedIds.Contains(id))
                                                selectedIds.Remove(id);
                                            else
                                                selectedIds.Add(id);
                                        }
                                        if (OnRowSelect != null)
                                            await OnRowSelect.Invoke(item);
                                        if (OnInternalRowSelect.HasDelegate)
                                            await OnInternalRowSelect.InvokeAsync(id);

                                    }));
                                }
                                index++;
                                <tr @attributes="attrs">
                                @{
                                    var rowData = new RowData<TEntity>()
                                    {
                                        Data = item,
                                        RowIndex = rowIndex,
                                        DynamicData = DynamicData == null ? null : DynamicData[rowIndex],
                                        IsEdite = id == 
                                    };
                                    if (id == 0 && id > 0)
                                    {

                                    }
                                    else
                                    {
                                        <CascadingValue Name="GridRowData" Value="rowData">
                                            @Columns(rowData)
                                        </CascadingValue>
                                    }
                                }
                            </tr>
                            }
                        }
                    </tbody>
                </table>
            }
            else
            {
                <span class="t-loading"></span>
            }
        </div>
        <GridPager HidePageSize="HidePageSize" PageSize="PageSize" PageNumber="PageNumber" TotalRecord="Total" OnPageSizeChanged="ChangePageSize"
                   OnPageNumberChanged="ChangePageNumber" />
    </div>
    }
</CascadingValue>