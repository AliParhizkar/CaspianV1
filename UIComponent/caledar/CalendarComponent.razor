@namespace Caspian.UI
@inject CaspianDataService service
@inject IJSRuntime JSRuntime
<div @ref="element" class="t-widget t-calendar t-datepicker-calendar">
    <div class="t-header"  >
        <span class="t-link t-nav-prev">
            <span class="t-icon fa fa-arrow-left" @onclick="async () => await NavigateLTR()"></span>
        </span>
        <span class="t-link t-nav-fast" @onclick="NavigateUp">@headerTitle</span>
        <span class="t-link t-nav-next ">
            <span class="t-icon fa fa-arrow-right" @onclick="async () => await NavigateRTL()"></span>
        </span>
    </div>
    @if (vNavigation == null && hNavigation.HasValue)
    {
        <HNavigationComponent Date="date" ViewType="viewType" HNavigation="hNavigation.Value" />
    }
    else
    {
        switch (viewType)
        {
            case ViewType.Month:
                if (vNavigation == null)
                {
                    <MonthComponent Date="date" DateChanged="async d => await ChangeDate(d)" 
                        FromDate="FromDate" ToDate="ToDate" />
                }
                else if (vNavigation == VNavigation.Down)
                {
                    <div class="c-down-from-state">
                        <YearComponent Date="date" />
                    </div>
                    <div class="@navigateDownClassName">
                        <MonthComponent Date="date" />
                    </div>
                }
                break;
            case ViewType.Year:
                if (vNavigation == null)
                {
                    <YearComponent Date="date" DateChanged="async d => await NavigateDown(d)"
                        FromDate="FromDate" ToDate="ToDate"/>
                }
                else if (vNavigation == VNavigation.Up)
                {
                    <div class="c-up-to-state">
                        <YearComponent Date="date" />
                    </div>
                    <div class="c-up-from-state">
                        <MonthComponent Date="date" />
                    </div>
                }
                else //VNavigation.Down
                {
                    <div class="c-down-from-state">
                        <DecadeComponent Date="date" />
                    </div>
                    <div class="@navigateDownClassName">
                        <YearComponent Date="date" />
                    </div>
                }
                break;
            case ViewType.Decade:
                if (vNavigation == null)
                {
                    <DecadeComponent Date="date" DateChanged="async d => await NavigateDown(d)" 
                        FromDate="FromDate" ToDate="ToDate"/>
                }
                else if (vNavigation == VNavigation.Up)
                {
                    <div class="c-up-from-state">
                        <YearComponent Date="date" />
                    </div>
                    <div class="c-up-to-state">
                        <DecadeComponent Date="date" />
                    </div>
                }
                else //VNavigation.Down
                {
                    <div class="c-down-from-state">
                        <CentuaryComponent Date="date" />
                    </div>
                    <div class="@navigateDownClassName">
                        <DecadeComponent Date="date" />
                    </div>
                }
                break;
            case ViewType.Century:
                if (vNavigation == null)
                {
                    <CentuaryComponent Date="date" DateChanged="async d => await NavigateDown(d)"
                        FromDate="FromDate" ToDate="ToDate"/>
                }
                else if (vNavigation == VNavigation.Up)
                {
                    <div class="c-up-from-state">
                        <DecadeComponent Date="date" />
                    </div>
                    <div class="c-up-to-state">
                        <CentuaryComponent Date="date" />
                    </div>
                }
                break;
        }
    }
</div>

