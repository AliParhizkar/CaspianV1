@namespace Caspian.UI
@inject CaspianDataService service
@inject IJSRuntime JSRuntime
@{
    string title = "";
    switch(index)
    {
        case 1:
            title = months[selectedMonth - 1] + " " + selectedYear;
            break;
        case 2:
            title = selectedYear.ToString();
            break;
        case 3:
            var startYear = (selectedYear / 10) * 10;
            title = $"{startYear}-{startYear + 10}";
            break;
        case 4:
            var startDecade = (selectedDecade / 10) * 100;
            title = $"{startDecade}-{startDecade + 100}";
            break;
    }
}
<div @ref="element" class="t-widget t-calendar t-datepicker-calendar">
    <div class="t-header" @onclick="NavigateUp" >
        <span class="t-link t-nav-prev">
            <span class="t-icon fa fa-arrow-left"></span>
        </span>
        <span class="t-link t-nav-fast">@title</span>
        <span class="t-link t-nav-next ">
            <span class="t-icon fa fa-arrow-right"></span>
        </span>
    </div>
    @switch(index)
    {
        case 1:
            if (vNavigation == null)
            {
                <MonthComponent Date="date" />
            }
            else if (vNavigation == VNavigation.Down)
            {
                int coldIndex = (selectedMonth - 1) % 4;
                int rowIndex = (selectedMonth - 1) / 4;
                string className = $"c-down-to-state c-left-{coldIndex} c-top-{rowIndex}";
                <div class="c-down-from-state">
                    <YearComponent SelectedMonth="selectedMonth" />
                </div>
                <div class="@className">
                    <MonthComponent Date="date" />
                </div>
            }
            break;
        case 2:
            if (vNavigation == null)
            {
                <YearComponent SelectedMonth="selectedMonth" SelectedMonthChanged="async month => await NavigateDown(month)" />
            }
            else if (vNavigation == VNavigation.Up)
            {
                <div class="c-up-to-state">
                    <YearComponent SelectedMonth="selectedMonth"  />
                </div>
                <div class="c-up-from-state">
                    <MonthComponent Date="date" />
                </div>
            }
            else //VNavigation.Down
            {
                int selectedYearIndex = decadeComponent.SelectedYearIndex;
                int colIndex = (selectedYearIndex - 1) % 4;
                int rowIndex = (selectedYearIndex - 1) / 4;
                string className = $"c-down-to-state c-left-{colIndex} c-top-{rowIndex}";
                <div class="c-down-from-state">
                    <DecadeComponent SelectedYear="selectedYear" />
                </div>
                <div class="@className">
                    <YearComponent SelectedMonth="selectedMonth"  />
                </div>
            }
            break;
        case 3:
            if (vNavigation == null)
            {
                <DecadeComponent @ref="decadeComponent" SelectedYear="selectedYear" SelectedYearChanged="async year => await NavigateDown(year)" />
            }
            else if (vNavigation == VNavigation.Up)
            {
                <div class="c-up-from-state">
                    <YearComponent SelectedMonth="selectedMonth" />
                </div>
                <div class="c-up-to-state">
                    <DecadeComponent SelectedYear="selectedYear" />
                </div>
            }
            else //VNavigation.Down
            {
                var selectedDecadeIndex = centuaryComponent.SelectedDecadeIndex;
                int colIndex = (selectedDecadeIndex - 1) % 4;
                int rowIndex = (selectedDecadeIndex - 1) / 4;
                string className = $"c-down-to-state c-left-{colIndex} c-top-{rowIndex}";
                <div class="c-down-from-state">
                    <CentuaryComponent SelectedDecade="selectedDecade" />
                </div>
                <div class="@className">
                    <DecadeComponent SelectedYear="selectedYear" />
                </div>
            }
            break;
        case 4:
            if (vNavigation == null)
            {
                <CentuaryComponent @ref="centuaryComponent" SelectedDecade="selectedDecade" SelectedDecadeChanged="async decade => await NavigateDown(decade)" />
            }
            else if (vNavigation == VNavigation.Up)
            {
                <div class="c-up-from-state">
                    <DecadeComponent SelectedYear="selectedYear" />
                </div>
                <div class="c-up-to-state">
                    <CentuaryComponent SelectedDecade="selectedDecade" />
                </div>
            }
            break;
    }
</div>

