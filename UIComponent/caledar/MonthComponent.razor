@namespace Caspian.UI
@inject CaspianDataService service

<table class="t-content">
    <tr class="t-week-header">
        @foreach (var item in WeekDays)
        {
            <th>@item</th>
        }
    </tr>
    @for (int i = 0; i < 6; i++)
    {
        <tr>
            @for (int j = 0; j < 7; j++)
            {
                var day = MonthDays[i, j];
                var date = MonthDates[i, j];
                var isActive = isActiveDate[i, j];
                string className = isActive ? "t-item" : "t-disable";
                if (date.Month != Date.Month)
                {
                    className += " t-other-month";
                    <td @onclick="async () => await DateSelected(date, isActive)" class="@className">@day</td>
                }
                else
                {
                    if (isActive && Date.Day == day)
                        className += " t-state-selected";
                    <td @onclick="async () => await DateSelected(date, isActive)" class="@className">@day</td>
                }
            }
        </tr>

    }
</table>
@code
{
    string[] WeekDays;
    int[,] MonthDays;
    DateTime[,] MonthDates;
    bool[,] isActiveDate;

    async Task DateSelected(DateTime date, bool isActive)
    {
        if (isActive)
        {
            Date = date;
            await DateChanged.InvokeAsync(date);
        }
    }

    protected override void OnInitialized()
    {
        if (service.Language == Language.En)
            WeekDays = new string[7] { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };
        else
            WeekDays = new string[7] { "ش", "ی", "د", "س", "چ", "پ", "ج" };
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (service.Language == Language.En)
        {
            MonthDays = new int[6, 7];
            MonthDates = new DateTime[6, 7];
            isActiveDate = new bool[6, 7];
            var date = Date.FirstDayInCalendar();
            for (int i = 0; i < 6; i++)
                for (int j = 0; j < 7; j++)
                {
                    MonthDays[i, j] = date.Day;
                    MonthDates[i, j] = date;
                    var isActive = true;
                    if (FromDate.HasValue && date < FromDate.Value)
                        isActive = false;
                    else if (ToDate.HasValue && date > ToDate.Value)
                        isActive = false;
                    isActiveDate[i, j] = isActive;
                    date = date.AddDays(1);
                }
        }
        else
        {

        }
        base.OnParametersSet();
    }

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public DateTime? FromDate { get; set; }

    [Parameter]
    public DateTime? ToDate { get; set; }

    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }
}
