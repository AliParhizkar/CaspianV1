@namespace Caspian.UI
@{
    var curentYear = CalendarType == CalendarType.Gregorian ? Date.Year : Date.ToPersianDate().Year;
}
<table class="t-content t-meta-view">
    @for (int i = 0; i < 3; i++)
    {
        <tr>
            @for (int j = 0; j < 4; j++)
            {
                var year = years[i, j];
                if (year == null)
                {
                    <td>...</td>
                }
                else
                {
                    string className = years[i, j] == curentYear ? " t-state-selected" : null;
                    if (!isActiveYears[i, j])
                        className += " t-disable";
                    <td class="@className" @onclick="async () => await ChangeYear(year.Value)">
                        <span class="t-link">@years[i, j]</span>
                    </td>
                }
            }
        </tr>
    }
</table>

@code 
{
    int?[,] years;
    bool[,] isActiveYears;

    async Task ChangeYear(int year)
    {
        if (CalendarType == CalendarType.Gregorian)
            Date = new DateTime(year, Date.Month, Date.Day);
        else
        {
            var pDate = Date.ToPersianDate();
            pDate = new PersianDate(year, pDate.Month.Value, pDate.Day.Value);
            Date = pDate.GetMiladyDate().Value;
        }

        await DateChanged.InvokeAsync(Date);
    }

    [Parameter]
    public CalendarType CalendarType { get; set; }

    protected override void OnParametersSet()
    {
        var year = CalendarType == CalendarType.Gregorian ? Date.Year : Date.ToPersianDate().Year.Value;
        year = (year / 10) * 10;
        years = new int?[3, 4];
        isActiveYears = new bool[3, 4];
        int? fromYear = CalendarType == CalendarType.Gregorian ? FromDate?.Year : FromDate.ToPersianDate()?.Year, 
            toYear = CalendarType == CalendarType.Gregorian ? ToDate?.Year : ToDate.ToPersianDate()?.Year;
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                //first and last item is null
                if (i == 0 && j == 0 || i == 2 && j == 3)
                    years[i, j] = null;
                else
                {
                    years[i, j] = year;
                    var isActive = true;
                    if (FromDate.HasValue && year < fromYear.Value)
                        isActive = false;
                    if (isActive && ToDate.HasValue && year > toYear)
                        isActive = false;
                    isActiveYears[i, j] = isActive;
                    year++;
                }
            }
        }
        base.OnParametersSet();
    }

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }

    [Parameter]
    public DateTime? FromDate { get; set; }

    [Parameter]
    public DateTime? ToDate { get; set; }
}
