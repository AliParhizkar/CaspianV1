@namespace Caspian.UI
<table class="t-content t-meta-view">
    @for (int i = 0; i < 3; i++)
    {
        <tr>
            @for (int j = 0; j < 4; j++)
            {
                var decade = Decades[i, j];
                if (decade == null)
                {
                    <td>...</td>
                }
                else
                {
                    string className = Decades[i, j] == selectedDecade ? " t-state-selected" : null;
                    if (!isActiveDecades[i, j])
                        className += " t-disable";
                    <td class="@className" @onclick="async () => await ChangeDecade(decade.Value)">
                        <span class="t-link">@((decade * 10) + " " + (decade * 10 + 10))</span>
                    </td>
                }

            }
        </tr>
    }
</table>

@code
{
    int?[,] Decades;
    bool[,] isActiveDecades;
    int selectedDecade;

    async Task ChangeDecade(int decade)
    {
        if (CalendarType == CalendarType.Gregorian)
            Date = new DateTime(decade * 10, Date.Month, Date.Day);
        else
        {
            var pDate = Date.ToPersianDate();
            pDate = new PersianDate(decade * 10, pDate.Month.Value, pDate.Day.Value);
            Date = pDate.GetMiladyDate().Value;
        }
        await DateChanged.InvokeAsync(Date);
    }

    protected override void OnParametersSet()
    {
        selectedDecade = CalendarType == CalendarType.Gregorian ? Date.Year / 10 : Date.ToPersianDate().Year.Value / 10;

        var decade = (selectedDecade / 10) * 10;
        Decades = new int?[3, 4];
        isActiveDecades = new bool[3, 4];
        int? fromDecade = null, toDecade = null;
        if (FromDate.HasValue)
        {
            if (CalendarType == CalendarType.Gregorian)
                fromDecade = FromDate.Value.Year / 10;
            else
                fromDecade = FromDate.ToPersianDate().Year.Value / 10;
        }
        if (ToDate.HasValue)
        {
            if (CalendarType == CalendarType.Gregorian)
                toDecade = ToDate.Value.Year / 10;
            else
                toDecade = ToDate.ToPersianDate().Year.Value / 10;
        }
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                //first and last item is null
                if (i == 0 && j == 0 || i == 2 && j == 3)
                    Decades[i, j] = null;
                else
                {
                    var isDisable = fromDecade.HasValue && decade < fromDecade || 
                        toDecade.HasValue && decade > toDecade;
                    isActiveDecades[i, j] = !isDisable;
                    Decades[i, j] = decade;
                    decade++;
                }
            }
        }
        base.OnParametersSet();
    }

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public CalendarType CalendarType { get; set; }

    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }

    [Parameter]
    public DateTime? FromDate { get; set; }

    [Parameter]
    public DateTime? ToDate { get; set; }
}
