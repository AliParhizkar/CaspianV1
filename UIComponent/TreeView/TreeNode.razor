@inject IJSRuntime JSRuntime
@namespace Caspian.UI
<li @ref="Node" class="@(Item.Expanded ? "c-expand" : "c-collaps")">
    <div class="c-node-template">
        @if (Item.Collabsable)
        {
            <span class="c-icon">
                <i @onclick="async () =>
                         {
                             if (Item.Expanded)
                             {
                                 Item.Expanded = false;
                                 if (OnCollapsed.HasDelegate)
                                     await OnCollapsed.InvokeAsync(Item);
                             }
                             else
                             {
                                 Item.Expanded = true;
                                 if (OnExpanded.HasDelegate)
                                     await OnExpanded.InvokeAsync(Item);
                             }
                             Collapsed = !Item.Expanded;
                         }" class="fa fa-chevron-right"></i>
            </span>
        }
        @if (Item.Selectable)
        {
            <CheckBox Value="Item.Selected" Disabled="Item.Disabled" TwoState
                  ValueChanged="async (bool? value) =>
                           {
                               Item.Selected = value;
                               if (value == true)
                                   await OnSelected.InvokeAsync(Item);
                               await OnChanged.InvokeAsync(Item);
                           }" />
        }
        @if (CascadeData?.BeforeNodeTemplate != null)
        {
            <div class="c-node-before-template">
                @CascadeData.BeforeNodeTemplate(Item)
            </div>
        }
        <span class="c-title" @onclick="async () =>
                                    {
                                        if (!Item.Disabled)
                                        {
                                            if (Item.Selectable && !Item.Disabled)
                                            {
                                                Item.Selected = !Item.Selected;
                                                if (Item.Selected == true)
                                                    await OnSelected.InvokeAsync(Item);
                                                await OnChanged.InvokeAsync(Item);
                                            }
                                            if (OnClick.HasDelegate)
                                                await OnClick.InvokeAsync(Item);
                                        }

                                    }">
            @Item.Text
        </span>
        @if (Item.Depth == null)
        {
            if (Item.Parent == null)
                Item.Depth = 1;
            else
                Item.Depth = Convert.ToByte(Item.Parent.Depth.Value + 1);
        }
        @if (CascadeData?.AfterNodeTemplate != null)
        {
            <CascadingValue Value="Item.Depth" Name="NodeDepthOnTree">
                @CascadeData.AfterNodeTemplate(Item)
            </CascadingValue>
        }
    </div>
    @if (Item.Children != null && Item.Expanded)
    {
        <ul class="c-subtree">
            @foreach (var item in Item.Children)
            {
                if (item.Parent == null)
                    item.Parent = Item;
                <TreeNode OnCollapsed="async node =>
                                   {
                                        if (OnCollapsed.HasDelegate)
                                            await OnCollapsed.InvokeAsync(node);
                                   }"
                          OnExpanded="async node =>
                                   {
                                       if (OnExpanded.HasDelegate)
                                           await OnExpanded.InvokeAsync(node);
                                   }"
                          OnSelected="async node =>
                                           {
                                               await OnSelected.InvokeAsync(node);
                                           }"
                          OnClick="async node => 
                                        {
                                            if (OnClick.HasDelegate)
                                                await OnClick.InvokeAsync(node);
                                        }"
                          OnChanged="async node =>
                                     {
                                         await OnChanged.InvokeAsync(node);
                                     }"
                          Item="item"/>
            }
        </ul>
    }
</li>

@code
{
    bool? Collapsed;
    ElementReference Node;

    [Parameter]
    public bool? Selected { get; set; } = false;

    [Parameter]
    public EventCallback<bool?> SelectedChanged { get; set; }

    [Parameter]
    public EventCallback<NodeView> OnExpanded { get; set; }

    [Parameter]
    public EventCallback<NodeView> OnClick { get; set; }

    [Parameter]
    public EventCallback<NodeView> OnCollapsed { get; set; }

    [CascadingParameter]
    public ITreeView CascadeData { get; set; }

    [Parameter]
    public EventCallback<NodeView> OnSelected { get; set; }

    [Parameter]
    public EventCallback<NodeView> OnChanged { get; set; }

    [Parameter]
    public NodeView Item { get; set; }
}
