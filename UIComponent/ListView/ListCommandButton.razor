@namespace Caspian.UI
@typeparam TEntity where TEntity : class
@inject IServiceScopeFactory Factory
@inject IJSRuntime jsRuntime
@inherits DataCommand<TEntity> 
@{
    @if (RowData != null)
    {
        if (RowData.UpsertMode.HasValue)
        {
            <span class="c-dataview-button">
                <span class="c-check">
                    <span @onclick="@(async () => await DataView.ValidateAndUpsert(RowData.UpsertMode.Value))" class="t-icon fa fa fa-check"></span>
                </span>
                <span class="c-bar">
                    <span @onclick="@(async () => await DataView.CalcelEdit(RowData.UpsertMode.Value))" class="t-icon fa fa fa-ban"></span>
                </span>
            </span>
        }
        else
        {
            if (ButtonType == CommandButtonType.Default || ButtonType == null)
            {
                <MessageBox @ref="MessageBox" />
                <span class="c-dataview-button">
                    <button class="c-btn c-primary" @onclick="OpenForm">
                        <span>Edit</span>
                        <span class="t-icon fa fa-pencil"></span>
                    </button>
                    <button class="c-btn c-danger" @onclick="RemoveAsync">
                        <span>Delete</span>
                        <span class="t-icon fa fa-trash"></span>
                    </button>
                </span>
            }
            else if(ButtonType == CommandButtonType.Simple)
            {
                <span class="c-grid-command">
                    <span class="t-grid-edit">
                        <span class="t-icon t-edit fa fa-pencil" @onclick="OpenForm"></span>
                    </span>
                    <span class="t-grid-delete">
                        <span class="t-icon t-delete fa fa-trash" @onclick="DeleteAsync"></span>
                    </span>
                </span>
            }

        }
    }
}

@code 
{
    string errorMessage;
    MessageBox MessageBox;

    [Parameter]
    public CommandButtonType? ButtonType { get; set; }

    protected override async Task OpenForm()
    {
        if (DataView != null)
        {
            DataView.Inline = true;
            await base.OpenForm();
        }
    }

    async Task RemoveAsync()
    {
        using var scope = Factory.CreateScope();
        var service = scope.ServiceProvider.GetService<IBaseService<TEntity>>();
        var id = Convert.ToInt32(typeof(TEntity).GetPrimaryKey().GetValue(RowData.Data));
        var old = await service.SingleAsync(id);
        var result = await service.ValidateAsync(old, t => t.IncludeRuleSets("Remove"));
        if (result.IsValid)
        {
            if (await MessageBox.Confirm(DataView.DeleteMessage))
            {
                await service.RemoveAsync(old);
                try
                {
                    await service.SaveChangesAsync();
                    await DataView.ReloadAsync();
                }
                catch (DbUpdateConcurrencyException exp)
                {
                    errorMessage = "این آیتم قبلا حذف شده است";
                }
            }
        }
        else
            errorMessage = result.Errors.First().ErrorMessage;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (errorMessage != null)
        {
            await jsRuntime.InvokeVoidAsync("$.caspian.showMessage", errorMessage);
            errorMessage = null;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}
