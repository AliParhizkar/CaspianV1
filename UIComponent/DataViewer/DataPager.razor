@namespace Caspian.UI
@inject IServiceScopeFactory scope
@inject CaspianDataService service
@{
    string str = null;
    if (service.Language == Language.Fa)
        str = $"{startRowIndex}-{endRowIndex} از {TotalRecord} ردیف";
    else
        str = $"{startRowIndex}-{endRowIndex} From {TotalRecord} Rows";
}
<div class="t-grid-pager t-grid-bottom">
    <div class="t-pager t-reset">
        <span @onclick="GoToFirstPage" tabindex="-1" class="t-icon @(PageNumber == 1 ? "t-state-disabled" : "")">
            <i class="fa fa-step-backward"></i>
        </span>
        <span @onclick="GoToPrePage" tabindex="-1" class="t-icon  @(PageNumber == 1 ? "t-state-disabled" : "")">
            <i class="fa fa-caret-left"></i>
        </span>
        <div class="t-numeric">
            @if (startPageNumber > 1)
            {
                <span class="t-link"
                   @onclick="async () =>
                             {
                                await ChangePageNumber(startPageNumber - 1);
                             }">...</span>
            }
            @for (var index = startPageNumber; index < endPageNumber; index++)
            {
                var pageNumber = index;
                if (index == PageNumber)
                {
                    <span class="t-link t-state-active">@(index)</span>
                }
                else
                {
                    <span class="t-link" @onmousedown="async () =>
                                                {
                                                    await ChangePageNumber(pageNumber);
                                                }">@(index)</span>
                }
            }
            @if (endPageNumber <= PageCount)
            {
                <span class="t-link"
                   @onclick="async () =>
                             {
                                await ChangePageNumber(endPageNumber);
                             }">...</span>
            }
        </div>
        <span @onclick="GoToNextPage" tabindex="-1" class="t-icon @(PageNumber == PageCount ? "t-state-disabled" : "")">
            <i class="fa fa-caret-right"></i>
        </span>
        <span @onclick="GoToLastPage" tabindex="-1" class="t-icon @(PageNumber == PageCount ? "t-state-disabled" : "")">
            <i class="fa fa-step-forward"></i>
        </span>
    </div>
    <div class="t-status-text">
        @(str)
    </div>
@*    @if (!HidePageSize)
    {
        var array = new int[] { 5, 10, 25, 50, 100};
        <div class="c-page-size">
            <span class="fa fa-angle-up c-icon"></span>
            <NumericTextBox TValue="int" Value="PageSize" ValueChanged="PageSizeChanged" maxlength="3" />
            <ul>
                @foreach(var item in array)
                {
                    if (item == PageSize)
                    {
                        <li class="c-selected">@item</li>
                    }
                    else
                    {
                        <li>@item</li>
                    }
                }
            </ul>
        </div>
    }*@
</div>
@code 
{
    int endRowIndex;
    int startRowIndex;
    int endPageNumber;
    int startPageNumber;
    int pageNumberCount = 7;

    async Task ChangedPageSize(int size)
    {
        if (size > 100)
            size = 100;
        if (PageSizeChanged.HasDelegate)
            await PageSizeChanged.InvokeAsync(size);
    }

    [Parameter]
    public int TotalRecord { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public EventCallback<int> PageSizeChanged { get; set; }

    [Parameter]
    public bool HidePageSize { get; set; }

    [Parameter]
    public int PageNumber { get; set; }

    [Parameter]
    public EventCallback<int> PageNumberChanged { get; set; }

    public int PageCount
    {
        get
        {
            return (TotalRecord - 1) / PageSize + 1;
        }
    }

    async Task GoToFirstPage()
    {
        if (PageNumber != 1)
            await ChangePageNumber(1);
    }

    async Task GoToPrePage()
    {
        if (PageNumber > 1)
            await ChangePageNumber(PageNumber - 1);
    }

    async Task GoToNextPage()
    {
        if (PageNumber < PageCount)
            await ChangePageNumber(PageNumber + 1);
    }

    async Task GoToLastPage()
    {
        if (PageNumber != PageCount)
            await ChangePageNumber(PageCount);
    }

    async Task ChangePageNumber(int pageNumber)
    {
        PageNumber = pageNumber;
        if (PageNumberChanged.HasDelegate)
            await PageNumberChanged.InvokeAsync(PageNumber);
    }

    protected override void OnParametersSet()
    {
        startRowIndex = (PageNumber - 1) * PageSize + 1;
        endRowIndex = startRowIndex + PageSize - 1;
        if (endRowIndex > TotalRecord)
            endRowIndex = TotalRecord;
        startPageNumber = (PageNumber - 1)/ pageNumberCount * pageNumberCount + 1;
        endPageNumber = startPageNumber + pageNumberCount;
        if (endPageNumber > PageCount)
            endPageNumber = PageCount + 1;
        base.OnParametersSet();
    }
}
