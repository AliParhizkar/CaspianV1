@namespace Caspian.UI
@inject IJSRuntime JSRuntime
@inject CaspianDataService service
@if (show)
{
    <div @ref="overlay" class="t-overlay t-messageeeeeeee">

    </div>
    <div @ref="box" class="c-messagebox">
        <div class="c-content">
            @{
                string className = "c-icon ";
                switch (messageType)
                {
                    case MessageType.Quession:
                        className += "c-question";
                        break;
                    case MessageType.Info:
                        className += "c-info";
                        break;
                }
            }
            <div class="c-container">
                <span class="@className">
                    @{
                        className = "fa ";
                        switch (messageType)
                        {
                            case MessageType.Quession:
                                className += "fa-question";
                                break;
                            case MessageType.Info:
                                className += "fa-info";
                                break;
                        }
                    }
                    <i class="@className" aria-hidden="true"></i>
                </span>
            </div>
            <div class="c-container">
                <span class="c-title">@((MarkupString)Message)</span>
            </div>
        </div>
        <div class="c-action">
            @switch (messageType)
            {
                case MessageType.Quession:
                    <button class="c-btn c-primary" @onclick="() => { UpdateConfirmResult(true); }">@YesButtonTitle</button>
                    <button class="c-btn c-danger" @onclick="() => {UpdateConfirmResult(false); }">@NoButtonTitle</button>
                    break;
                case MessageType.Info:
                    <button class="c-btn c-primary" @onclick="() => {UpdateConfirmResult(true); }">@OkButtonTitle</button>
                    break;
            }
        </div>
    </div>
}
@code
{
    ElementReference overlay;
    ElementReference box;
    bool show;
    bool? confirmResult = null;
    bool? AlertResult = null;
    MessageType messageType;

    void UpdateConfirmResult(bool result)
    {
        confirmResult = result;
    }

    protected override void OnInitialized()
    {
        if (service.Language == Language.Fa)
        {
            OkButtonTitle = YesButtonTitle = "تائید";
            NoButtonTitle = "انصراف";
        }
        else
        {
            OkButtonTitle = "Ok";
            YesButtonTitle = "Yes";
            NoButtonTitle = "No";
        }
        base.OnInitialized();
    }

    [Inject]
    IJSRuntime jsRuntime { get; set; }

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public string YesButtonTitle { get; set; }

    [Parameter]
    public string NoButtonTitle { get; set; }

    [Parameter]
    public string OkButtonTitle { get; set; }

    [Parameter]
    public string Style { get; set; }

    protected override void OnParametersSet()
    {
        if (!Style.HasValue())
            Style = "width:500px;";
        base.OnParametersSet();
    }

    async Task<bool> Show(string message)
    {
        confirmResult = null;
        if (message.HasValue())
            Message = message.Replace("\n", "<br/>");
        show = true;
        await jsRuntime.InvokeVoidAsync("$.caspian.enableDefaultShortKey", true, DotNetObjectReference.Create(this), overlay, box);
        StateHasChanged();
        var task = Task.Run<bool>(async () =>
        {
            while (confirmResult == null)
                await Task.Delay(100);
            show = false;
            await jsRuntime.InvokeVoidAsync("$.caspian.enableDefaultShortKey", false);
            await InvokeAsync(StateHasChanged);
            return confirmResult.Value;
        });
        return await task;
    }

    [JSInvokable]
    public void HideConfirm(bool result)
    {
        confirmResult = result;
    }

    public async Task Alert(string message)
    {
        messageType = MessageType.Info;
        await Show(message);
    }

    public async Task<bool> Confirm(string message)
    {
        messageType = MessageType.Quession;
        return await Show(message);
    }

}
