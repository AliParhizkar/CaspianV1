@using Caspian.UI
Grid@namespace Caspian.UI
@typeparam TValue
@implements IInputValueInitializer
@implements IValidate
@implements IControl
@code
{
    string _FieldName;
    ValidationMessageStore _messageStore;
    bool valueIsChanged;

    protected ElementReference htmlElement;

    //protected IDictionary<string, object> Attributes;

    [Inject, JsonIgnore]
    public FormAppState FormAppState { get; set; }

    [JsonProperty("errorMessage")]
    public string ErrorMessage { get; set; }

    [Parameter, JsonProperty("bindingType")]
    public BindingType BindingType { get; set; }

    [Parameter, JsonIgnore]
    public Type DynamicType { get; set; }

    [Parameter, JsonIgnore]
    public bool Required { get; set; }

    [CascadingParameter, JsonIgnore]
    public EditContext CurrentEditContext { get; set; }

    [Inject, JsonIgnore]
    protected IJSRuntime jsRuntime { get; set; }

    [Parameter(CaptureUnmatchedValues = true), JsonIgnore]
    public Dictionary<string, object> InputAttributes { get; set; }

    [Parameter, JsonIgnore]
    public string Id { get; set; }

    [Parameter, JsonIgnore]
    public string Style { get; set; }

    [Parameter, JsonProperty("disabled")]
    public bool Disabled { get; set; }

    [Parameter, JsonProperty("focused")]
    public bool Focused { get; set; }

    [Parameter, JsonIgnore]
    public bool Search { get; set; }

    [Parameter, JsonIgnore]
    public TValue Value { get; set; }

    [Parameter, JsonIgnore]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter, JsonIgnore]
    public EventCallback OnChanged{ get; set; }

    [Parameter, JsonIgnore]
    public Expression<Func<TValue>> ValueExpression { get; set; }

    [Parameter, JsonIgnore]
    public object Data { get; set; }

    [Parameter, JsonIgnore]
    public int? TabIndex { get; set; }

    [CascadingParameter(Name = "ParentForm"), JsonIgnore]
    ICaspianForm CaspianForm { get; set; }

    protected override void OnInitialized()
    {
        CaspianForm?.AddControl(this);
        if (Search)
            BindingType = BindingType.OnInput;
        else
            BindingType = BindingType.OnChange;
        if (CurrentEditContext != null && ValueExpression != null)
        {
            _FieldName = (ValueExpression.Body as MemberExpression).Member.Name;
            _messageStore = new ValidationMessageStore(CurrentEditContext);
            //CurrentEditContext.OnValidationRequested += CurrentEditContext_OnValidationRequested;
            CurrentEditContext.OnFieldChanged += CurrentEditContext_OnFieldChanged;
            CurrentEditContext.OnValidationStateChanged += CurrentEditContext_OnValidationStateChanged;
        }
        base.OnInitialized();
    }

    protected string ConvertToJson()
    {
        return JsonConvert.SerializeObject(this);
    }

    public bool Validate()
    {
        if (Required && (Value == null || Value.ToString() == ""))
        {
            ErrorMessage = "مقدار این فیلد اجباری است.";
            return false;
        }
        return true;
    }

    public async Task FocusAsync()
    {
        await htmlElement.FocusAsync();
    }

    public virtual async Task SetValue(object obj)
    {
        var type = DynamicType ?? typeof(TValue);
        if (type.IsNullableType() && obj != null)
            type = Nullable.GetUnderlyingType(type);
        Value = default(TValue);
        valueIsChanged = true;
        if (obj != null)
        {
            if (type.IsEnum)
            {
                object value = default(TValue);
                Enum.TryParse(type, obj.ToString(), out value);
                Value = (TValue)value;
            }
            else
                Value = (TValue)Convert.ChangeType(obj, type);
        }
        if (CurrentEditContext != null)
        {
            var model = Data ?? CurrentEditContext.Model;
            //FormAppState.AllControlsIsValid = true;
            if (_FieldName.HasValue())
            {
                var info = model.GetType().GetProperty(_FieldName);
                if (info == null && !Validate())
                    FormAppState.AllControlsIsValid = false;
                else if (info != null)
                {
                    var field = new FieldIdentifier(CurrentEditContext.Model, _FieldName);
                    info.SetValue(model, Value);
                    CurrentEditContext.NotifyFieldChanged(field);
                }
            }
        }
        if (InputAttributes.ContainsKey("onchange"))
        {
            var change = (EventCallback<ChangeEventArgs>)InputAttributes["onchange"];
            await change.InvokeAsync(new ChangeEventArgs() { Value = Value });
        }
        await ValueChanged.InvokeAsync(Value);
    }

    protected override void OnParametersSet()
    {
        if (InputAttributes == null)
            InputAttributes = new Dictionary<string, object>();
        if (TabIndex.HasValue)
            InputAttributes["tabindex"] = TabIndex;
        base.OnParametersSet();
    }

    public void Focus()
    {
        Focused = true;
    }

    public async Task ResetAsync()
    {
        await SetValue(default(TValue));
        ErrorMessage = null;
    }

    private void CurrentEditContext_OnValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        var oldMessage = ErrorMessage;
        _messageStore = new ValidationMessageStore(CurrentEditContext);
        var field = CurrentEditContext.GetType().GetField("_fieldStates", BindingFlags.NonPublic | BindingFlags.Instance);
        var states = (field.GetValue(CurrentEditContext) as System.Collections.IDictionary);
        foreach (dynamic state in states)
        {
            var fieldName = state.Key.FieldName as string;
            if (fieldName == _FieldName)
            {
                var fieldIdentifier = new FieldIdentifier(CurrentEditContext.Model, fieldName);
                var list = CurrentEditContext.GetValidationMessages();
                var result = CurrentEditContext.GetValidationMessages(fieldIdentifier);
                ErrorMessage = result.FirstOrDefault();
            }
            else if (fieldName.EndsWith("]." + _FieldName))
            {
                var mainField = fieldName.Substring(0, fieldName.Length - _FieldName.Length);
                mainField = mainField.Split('[')[0];
                var model = CurrentEditContext.Model;
                var details = model.GetType().GetProperty(mainField).GetValue(model) as System.Collections.IEnumerable;
                var index = 0;
                foreach (var detail in details)
                {
                    if (detail == Data)
                    {
                        var finalField = mainField + '[' + index + "]." + _FieldName;
                        var fieldIdentifier = new FieldIdentifier(CurrentEditContext.Model, finalField);
                        var result = CurrentEditContext.GetValidationMessages(fieldIdentifier);
                        ErrorMessage = result.FirstOrDefault();

                    }
                    index++;
                }
                break;
            }
        }

        if ((ErrorMessage != null || !Validate()) && FormAppState.AllControlsIsValid)
        {
            FormAppState.AllControlsIsValid = false;
            Focused = true;
        }
        if (oldMessage != ErrorMessage)
        {
            StateHasChanged();
            oldMessage = ErrorMessage;
        }
    }

    private void CurrentEditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (Data == null)
        {
            if (e.FieldIdentifier.FieldName == _FieldName)
            {
                var result = CurrentEditContext.GetValidationMessages(e.FieldIdentifier);
                ErrorMessage = result.FirstOrDefault();
            }
        } else
        {
            var detailsType = Data.GetType();
            foreach(var info in CurrentEditContext.Model.GetType().GetProperties())
            {
                if (info.PropertyType.IsGenericType && info.PropertyType.GetGenericArguments()[0] == detailsType)
                {
                    dynamic detailsValue = info.GetValue(CurrentEditContext.Model);
                    if (detailsValue != null)
                    {
                        var index = 0;
                        foreach(var item in detailsValue)
                        {
                            if (item == Data)
                            {
                                var fieldName = info.Name + '[' + index + "]." + _FieldName;
                                var fieldIdentifier = new FieldIdentifier(CurrentEditContext.Model, fieldName);
                                var result = CurrentEditContext.GetValidationMessages(fieldIdentifier);
                                ErrorMessage = result.FirstOrDefault();
                                break;
                            }
                            index++;
                        }
                    }
                }
            }
        }
    }

    private void CurrentEditContext_OnValidationRequested(object sender, ValidationRequestedEventArgs e)
    {
        _messageStore = new ValidationMessageStore(CurrentEditContext);
        var field = CurrentEditContext.GetType().GetField("_fieldStates", BindingFlags.NonPublic | BindingFlags.Instance);
        var states = (field.GetValue(CurrentEditContext) as System.Collections.IDictionary);
        foreach (dynamic state in states)
        {
            var fieldName = state.Key.FieldName as string;
            if (fieldName == _FieldName)
            {
                var fieldIdentifier = new FieldIdentifier(CurrentEditContext.Model, fieldName);
                var list = CurrentEditContext.GetValidationMessages();
                var result = CurrentEditContext.GetValidationMessages(fieldIdentifier);
                ErrorMessage = result.FirstOrDefault();
                if (ErrorMessage == null)
                    break;
            }
            else if (fieldName.EndsWith("]." + _FieldName))
            {
                var mainField = fieldName.Substring(0, fieldName.Length - _FieldName.Length);
                mainField = mainField.Split('[')[0];
                var model = CurrentEditContext.Model;
                var details = model.GetType().GetProperty(mainField).GetValue(model) as System.Collections.IEnumerable;
                var index = 0;
                foreach (var detail in details)
                {
                    if (detail == Data)
                    {
                        var finalField = mainField + '[' + index + "]." + _FieldName;
                        var fieldIdentifier = new FieldIdentifier(CurrentEditContext.Model, finalField);
                        var result = CurrentEditContext.GetValidationMessages(fieldIdentifier);
                        ErrorMessage = result.FirstOrDefault();
                    }
                    index++;
                }
                break;
            }
        }
        if (ErrorMessage == null && !Validate())
            FormAppState.AllControlsIsValid = false;
        if (ErrorMessage != null && FormAppState.AllControlsIsValid)
        {
            FormAppState.AllControlsIsValid = false;
            Focused = true;
        }
    }
}
