@namespace  Caspian.UI
@typeparam TValue
@inherits CBaseInput<TValue>
@using System.Text.RegularExpressions
@{
    string str = "";
    if (Value != null)
    {
        str = ((TimeSpan)Convert.ChangeType(Value, typeof(TimeSpan))).ShortString();
    }
} 
<div class="t-widget t-timepicker">
    <div @attributes="attrs" class="t-picker-wrap input-group clockpicker">
        <input @ref="htmlElement" value="@str" class="t-input" @onchange="ChangeValue" />
        <span class="t-select input-group-addon">
            <span class="t-icon t-icon-clock glyphicon glyphicon-time fa fa-clock-o"></span>
        </span>
    </div>
</div>
@code
{   
    protected override void OnInitialized()
    {
        PlacementType = placementType.Bottom;
        AlignType = AlignType.Right;
        AutoClose = true;
        base.OnInitialized();
    }

    async void ChangeValue(ChangeEventArgs arg)
    {
        TValue value = default;
        var str = Convert.ToString(arg.Value);
        if (str.IndexOf('_') == -1)
        {
            if (Regex.IsMatch(str, "^[0,1][0-9]|2[0-3]:[0-5][0-9]$"))
            {
                var time = TimeSpan.Parse(str, null);
                value = (TValue)Convert.ChangeType(time, typeof(TimeSpan));
            }
        }
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }

    IDictionary<string, object> attrs = new Dictionary<string, object>();

    [Parameter, JsonProperty("placementType")]
    public placementType PlacementType { get; set; }

    [Parameter, JsonProperty("alignType")]
    public AlignType AlignType { get; set; }

    [Parameter, JsonProperty("autoclose")]
    public bool AutoClose { get; set; }

    protected override void OnParametersSet()
    {
        switch (AlignType)
        {
            case AlignType.Left:
                attrs["data-align"] = "left";
                break;
            case AlignType.Right:
                attrs["data-align"] = "right";
                break;
            case AlignType.Center:
                attrs["data-align"] = "center";
                break;
        }
        switch (PlacementType)
        {
            case placementType.Bottom:
                attrs["data-placement"] = "bottom";
                break;
            case placementType.Left:
                attrs["data-placement"] = "left";
                break;
            case placementType.Right:
                attrs["data-placement"] = "right";
                break;
            case placementType.Top:
                attrs["data-placement"] = "top";
                break;
        }
        if (AutoClose)
            attrs["data-autoclose"] = "true";

        base.OnParametersSet();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        var json = this.ConvertToJson();
        jsRuntime.InvokeVoidAsync("$.telerik.bindControl", htmlElement, json, UiControlType.TimePicker);
        return base.OnAfterRenderAsync(firstRender);
    }
}
