@page "/Demo/Lookup"
@namespace Demo.Web.Pages
@{
    if (hideHeader)
        autoHide = true;
}
<h2>Lookup</h2>
<p>
    This control is used to <b>look up</b> and <b>bind to the foreign key</b>. this control <b>consists of two components:</b> <b>autocomplete</b> and <b>lookup window</b>.
    we describe this components separately.
</p>
<h3>Autocomplete component</h3>
<p>
    We use this component for <b>binding</b> and <b>simple search</b>.
</p>
<h3>Databinding</h3>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <div class="row">
                    <div class="col-md-6">
                        <h4>TEntity & TextExpression</h4>
                        <span class="c-demo-description">
                            In this example we specify <b>TEntity parameter</b>, (the type of entity the control binds to it) and also set <b>TextExpression parameter</b> (that is a <b>Lambda Expression</b> and <b>has intellisense</b>)
                        </span>
                    </div>
                    <div class="col-md-6">
                        <div class="row c-controls">
                            <div class="ps-5 col-md-4">
                                <label>Customer</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <AutoComplete TValue="int?" TEntity="Customer" TextExpression='t => t.CustomerType == CustomerType.Real ? t.FName + " " + t.LName : t.CompanyName'>
                                    <CustomerLookupWindow />
                                </AutoComplete>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Lookup" FileName="Data-Binding" />
        </TabPanelItem>
    </Tabs>
</TabPanel>
<h3 class="pt-3">Binding & parameters</h3>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <div class="row">
                    <div class="col-md-6">
                        <h4>Binding</h4>
                        <span class="c-demo-description">In this example, we <b>bind the component to customerId</b>, which is a <b>nullable int field</b></span>
                    </div>
                    <div class="col-md-6">
                        <div class="row c-controls">
                            <div class="ps-5 col-md-4">
                                <label>Customer</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <AutoComplete TValue="int?" TEntity="Customer" @bind-Value="customerId" TextExpression='t => t.CustomerType == CustomerType.Real ? t.FName + " " + t.LName : t.CompanyName'>
                                    <CustomerLookupWindow />
                                </AutoComplete>
                            </div>
                            <div class="ps-5 col-md-4">
                                <label>Customer id</label>
                            </div>
                            <div class="col-md-8 pe-5 text-center">
                                <label style="color:red;">@(customerId?.ToString() ?? "---")</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <h4>Default parameters</h4>
                        <span class="c-demo-description">In this example, we use the <b>Style, Disabled, and HideIcon parameters </b> to set the <b>width </b>of the component, <b>enable & disable</b> the component, and <b>hide & show</b> the advanced search icon.</span>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <div class="row c-controls">
                            <div class="ps-5 col-md-4">
                                <label>Control size</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <DropdownList @bind-Value="controlSize" />
                            </div>                            
                            <div class="ps-5 col-md-4">
                                <label>Hide icon</label>
                            </div>
                            <div class="pe-5 col-md-8">
                                <CheckBox @bind-Value="hideIcon" />
                            </div>
                            <div class="ps-5 col-md-4">
                                <label>Disable</label>
                            </div>
                            <div class="pe-5 col-md-8">
                                <CheckBox @bind-Value="disabled" />
                            </div>
                            <div class="ps-5 col-md-4">
                                <label>Action</label>
                            </div>
                            <div class="pe-5 col-md-8 text-center">
                                <button disabled="@disabled" class="c-btn c-primary" @onclick="async () => await acCsutomer.FocusAsync()">Focus</button>
                            </div>
                            <div class="ps-5 col-md-12 pe-5">
                                <AutoComplete TValue="int?" TEntity="Customer" TextExpression='t => t.CustomerType == CustomerType.Real ? t.FName + " " + t.LName : t.CompanyName' @ref="acCsutomer" Style="@GetStyle()" Disabled="disabled" HideIcon="hideIcon">
                                    <CustomerLookupWindow />
                                </AutoComplete>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <h4>Others parameters</h4>
                        <span class="c-demo-description">All parameters are used to <b>manage</b> the <b>appearance and functionality</b> of the <b>lookup</b>, and they are all <b>booleans</b>.</span>
                        <div class="ps-3">
                            <div class="pt-3">
                                <span class="d-title">AutoHide: </span><span class="c-demo-description">If the value of this parameter is true, the <b>lookup will be hidden</b> by <b>clicking on the body</b>.</span>
                            </div>
                            <div class="pt-3">
                                <span class="d-title">HideHeader: </span><span class="c-demo-description">This parameter is used to <b>show/hide</b> lookup header(usually this parameter and AutoHide  parameter is equal).</span>
                            </div>
                            <div class="pt-3">
                                <span class="d-title">OpenOnFocus: </span><span class="c-demo-description">If the value of this parameter is true, the <b>lookup will be shown</b> <b>with focus on the control</b>.</span>
                            </div>
                            <div class="pt-3">
                                <span class="d-title">CloseOnBlur: </span><span class="c-demo-description">If the value of this parameter is true, the <b>lookup will be hidden</b> with <b>focus out(blur)</b>.</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <div class="row c-controls">
                            <div class="ps-5 col-md-4">
                                <label>Auto hide</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <CheckBox @bind-Value="autoHide" />
                            </div>
                            <div class="ps-5 col-md-4">
                                <label>Hide header</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <CheckBox @bind-Value="hideHeader" />
                            </div>
                            <div class="ps-5 col-md-4">
                                <label>Open on focus</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <CheckBox @bind-Value="openOnFocus" />
                            </div>
                            <div class="ps-5 col-md-4">
                                <label>Close on blur</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <label style="color:red;">It will be created in the future</label>
                            </div>
                            <div class="ps-5 col-md-12 pe-5">
                                <AutoComplete TValue="int?" TEntity="Customer" TextExpression='t => t.CustomerType == CustomerType.Real ? t.FName + " " + t.LName : t.CompanyName' AutoHide="autoHide" HideHeader="hideHeader" OpenOnFocus="openOnFocus" CloseOnBlur="closeOnBlur">
                                    <CustomerLookupWindow />
                                </AutoComplete>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Lookup" FileName="Binding" />
        </TabPanelItem>
    </Tabs>
</TabPanel>
<h3 class="pt-3">Lookup window</h3>
<p>
    To create the Lookup window, we inherit from the <b>LookupWindow&lt;TEntity, TValue&gt;</b> Generic class, 
    then specify <b>Grid</b> and <b>Search Expressions.</b>
</p>
<ul class="d-demo-list">
    <li>
        <b>SearchExpression: </b>The <b>Search Expression</b> specifies <i>simple search</i> (search on autocomplete) we can specify it as we want. For this purpose we use <b>InitialSearchExpression</b> method.
    </li>
    <li>
        <b>Grid: </b>We use <b>Grid</b> to <i>display entities, pagination, sorting, entity selection</i>, etc. We use <b>@@ref</b> to determine the Grid.
    </li>
</ul>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <div class="row">
                    <div class="col-md-6">
                        <h4>Simple lookup window</h4>
                        <span class="c-demo-description">In this example we create <b>CustomerLookupWindow</b> and use it as <b>content</b> of AutoComplete.</span>
                    </div>
                    <div class="col-md-6">
                        <div class="row c-controls">
                            <div class="ps-5 col-md-4">
                                <label>Customer</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <AutoComplete TValue="int?" TEntity="Customer" TextExpression='t => t.CustomerType == CustomerType.Real ? t.FName + " " + t.LName : t.CompanyName'>
                                    <CustomerLookupWindow />
                                </AutoComplete>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <h4>Advanced search</h4>
                        <span class="c-demo-description">We can <b>customize</b> the <b>LookupWindow</b> search <b>however we want</b>, making it similar to the <b>grid-search</b> (explained earlier in Grid-Search).</span>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <div class="row c-controls">
                            <div class="ps-5 col-md-4">
                                <label>Customer</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <AutoComplete TValue="int?" TEntity="Customer" 
                                              TextExpression="t => t.CustomerType == CustomerType.Real ? t.FName + ' ' + t.LName : t.CompanyName">
                                    <AdvanceSearchCustomerWindow  />
                                </AutoComplete>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <h4>Parameter search</h4>
                        <span class="c-demo-description">In some cases we want to <b>pass the parameter</b> 
                        to the lookup window and <b>filter the data</b>. In this example, if the <b>customer type has a value</b>, 
                        we <b>filter the data</b></span>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <div class="row c-controls">
                            <div class="ps-5 col-md-4">
                                <label>Customer type</label>
                            </div>
                            <div class="pe-5 col-md-8">
                                <DropdownList @bind-Value="customerKind" />
                            </div>
                            <div class="ps-5 col-md-4">
                                <label>Customer</label>
                            </div>
                            <div class="col-md-8 pe-5">
                                <AutoComplete TValue="int?" TEntity="Customer"
                                    TextExpression="t => t.CustomerType == CustomerType.Real ? t.FName + ' ' + t.LName : t.CompanyName">
                                    <ParametricCustomerSearchWindow CustomerType="customerKind" />
                                </AutoComplete>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Lookup" FileName="Using-Lookup-Window" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>lookup window">
            <Document FolderName="Lookup" FileName="Simple-Lookup-Window" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Advance lookup window">
            <Document FolderName="Lookup" FileName="Advance-Lookup-Window" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Parametric lookup window">
            <Document FolderName="Lookup" FileName="Parametric-Lookup-Window" />
        </TabPanelItem>
    </Tabs>
</TabPanel>

@code
{
    ControlSize controlSize = ControlSize.Auto;
    AutoComplete<Customer, int?> acCsutomer;
    int? id1;
    bool disabled;
    bool autoHide;
    bool hideIcon;
    int? customerId;
    bool hideHeader;
    bool useParameter;
    bool closeOnBlur = true;
    bool openOnFocus;
    CustomerType? customerType;
    CustomerType? customerKind = CustomerType.Real;
    Gender? gender;

    string GetStyle()
    {
        switch (controlSize)
        {
            case ControlSize.Large:
                return "width:300px";
            case ControlSize.Medium:
                return "width:200px";
            case ControlSize.Small:
                return "width:150px";
            case ControlSize.Auto:
                return "";
        }
        throw new NotImplementedException();
    }
}
