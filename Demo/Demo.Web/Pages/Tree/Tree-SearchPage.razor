@page "/Demo/TreeSearch"
@inherits BasePage
<h2>Tree Search & Selection</h2>
<p>
    When searching in the tree, if a node is selected, all the nodes <b>of the node</b> up to the <b>root</b> are also selected to <b>maintain the structure</b> of the tree.
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="row d-content">
                <div class="col-md-6">
                    <h4>Search on city</h4>
                    <span class="c-demo-description pe-5">In this example, we will <b>filter</b> on the <b>city title</b>, and if there is a city in 
                        the filtering, we will also display its <b>country</b> in the tree to <b>maintain</b> the tree structure.
                    </span>
                </div>
                <div class="col-md-6">
                    <div>
                        <StringTextBox placeholder="City search" BindingType="BindingType.OnInput" @bind-Value="@strSearch" 
                            OnChange="SearchOnTree" />
                    </div>
                    <div>
                        <TreeView TEntity="TreeViewItem" style="height:500px;" Source="searchSource" />
                    </div>
                </div>
                <div class="col-md-6">
                    <hr />
                    <h4>Selection</h4>
                    <span class="c-demo-description pe-5">
                        In this example, by selecting the country, all its cities are also selected and vice versa.
                    </span>
                </div>
                <div class="col-md-6">
                    <hr />
    <div class="c-controls ps-4 pe-4 pb-2">
        <label style="color:red;">You selected @(selecteCitiesCount) city</label>
    </div>
    <TreeView @ref="tree" TEntity="TreeViewItem" style="height:500px;" Source="selectionSource" OnChange="UpdateSelecting" />
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Tree" FileName="Search" />
        </TabPanelItem>
    </Tabs>
</TabPanel>


@code
{
    string strSearch;
    int selecteCitiesCount;
    TreeView<TreeViewItem> tree;

    IList<TreeViewItem> searchSource;
    IList<TreeViewItem> selectionSource;

    protected override async Task OnInitializedAsync()
    {
        await SearchOnTree();
        using var scope = CreateScope();
        var query = new CountryService(scope.ServiceProvider).GetAll();
        selectionSource = await query.Select(t => new TreeViewItem()
        {
            Value = t.Id.ToString(),
            Text = t.Title,
            Expanded = true,
            Selectable = true,
            Items = t.Cities.Select(u => new TreeViewItem()
            {
                Value = u.Id.ToString(),
                Text = u.Title,
                Collabsable = false,
                Selectable = true,
            }).ToList()
        }).ToListAsync();
        await base.OnInitializedAsync();
    }

    void UpdateSelecting(TreeViewItem node)
    {
        ///For a two-level tree
        ///first level
        if (node.Depth == 1)
        {
            foreach (var child in node.Items)
                child.Selected = node.Selected;
        }
        ///second level
        if (node.Depth == 2)
        {
            var siblingNodes = node.Parent.Items;
            if (siblingNodes.All(t => t.Selected == true))
                node.Parent.Selected = true;
            else if (siblingNodes.All(t => t.Selected == false))
                node.Parent.Selected = false;
            else
                node.Parent.Selected = null;
        }
        selecteCitiesCount = tree.GetSeletcedItems().Count(t => t.Depth == 2);
    }

    //-----Search Method ---
    async Task SearchOnTree()
    {
        using var scope = CreateScope();
        var query = new CountryService(scope.ServiceProvider).GetAll();
        if (strSearch.HasValue())
            query = query.Where(t => t.Cities.Any(u => u.Title.Contains(strSearch)));
        searchSource = await query.Select(t => new TreeViewItem()
            {
                Collabsable = true,
                Expanded = true,
                Text = t.Title,
                Value = t.Id.ToString(),
                Items = t.Cities.Where(t => strSearch == null || t.Title.Contains(strSearch)).Select(u => new TreeViewItem()
                {
                    Collabsable = false,
                    Text = u.Title,
                    Value = u.Id.ToString()
                }).ToList()
            }).ToListAsync();
        await base.OnInitializedAsync();
    }
}
