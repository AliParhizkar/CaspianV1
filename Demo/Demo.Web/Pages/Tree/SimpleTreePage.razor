@page "/Demo/SimpleTree"
@inherits BasePage
@using Caspian.Engine.Model
@using Caspian.Engine.Service
<h2>Tree View</h2>
<h3>Databinding</h3>
<p>
    We use the <b>TreeViewItem</b> class to tree databinding, we create a list of <b>TreeViewItem</b> and set the
    tree <b>Source</b> parameter. we can create tree in two mode.
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="row d-content">
                <div class="col-md-6 pe-3">
                    <h4>Load on first</h4>
                    <span class="c-demo-description">
                        In this case, we create the <bn>whole tree</bn> (nodes of all levels) at once. <br />
                        In this example, the <b>first level</b> of the tree is the <b>menus category</b> and the <b>second level</b> is those <b>menus</b>.<br />
                        In this case, because the whole tree is created at once. At first, we can expand all the nodes.
                    </span>
                </div>
                <div class="col-md-6">
                    <div class="ps-3 pe-4 pb-2">
                        <RadioList @bind-Value="expanded" OnChange="ExpandedChanged">
                            <RadioItems>
                                <RadioItem TValue="bool" Value="false" Title="Collapsed" />
                                <RadioItem TValue="bool" Value="true" Title="Expanded" />
                            </RadioItems>
                        </RadioList>
                    </div>
                    <TreeView TEntity="TreeViewItem" style="height:500px;" Source="loadOnFirstSource" />
                </div>
                <div class="col-md-6">
                    <hr />
                    <h4>Load on expand</h4>
                    <span class="c-demo-description pe-5">
                        In this example, we load only the <b>first level</b> (category of menus) of the tree. <br />
                        In this example, the first level of the tree is the <b>menus category</b>When <b>expanding</b> the menu category according to the <b>category id</b>, we <b>load the menus</b> of that category.<br />
                        In this example, At first, we can not <b>expand all the nodes</b>.
                    </span>
                    <div class="pt-2 pe-5">
                        <span class="fa fa-info"> Note: </span><span class="c-demo-description">
                            In this case, we need to <b>store</b> the <b>category id</b> in each node,
                            we use the <b>Value</b> property of the <b>TreeViewItem</b> class for this.
                        </span>
                    </div>
                </div>
                <div class="col-md-6">
                    <hr />
                    <TreeView TEntity="TreeViewItem" style="height:500px;" Source="loadOnExpandSource" 
                            OnExpanded="async node => await OnExpanded(node)" />
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Razor">
            <Document FolderName="Tree" FileName="Databinding" />
        </TabPanelItem>
    </Tabs>
</TabPanel>

@code 
{
    bool expanded = true;
    IList<TreeViewItem> loadOnFirstSource;
    IList<TreeViewItem> loadOnExpandSource;

    protected override async Task OnInitializedAsync()
    {
        using var service = CreateScope().GetService<MenuCategoryService>();
        var query = service.GetAll().Where(t => t.SubSystemKind == SubSystemKind.Demo);
        /// load menus category and menus together
        loadOnFirstSource = await query.Select(t => new TreeViewItem()
        {
            Text = t.Title,
            Expanded = expanded,
            Items = t.Menus.Select(u => new TreeViewItem()
            {
                Text = u.Title,
                Collabsable = false
            }).ToList()
        }).ToListAsync();
        /// load menus category and on node expand load menus
        loadOnExpandSource = await query.Select(t => new TreeViewItem()
        {
            Text = t.Title,
            Value = t.Id.ToString()
        }).ToListAsync();

        await base.OnInitializedAsync();
    }

    async Task OnExpanded(TreeViewItem node)
    {
        using var scope = CreateScope().GetService<MenuService>();
        var categoryId = Convert.ToInt32(node.Value);
        node.Items = await new MenuService(scope.ServiceProvider).GetAll()
            .Where(t => t.MenuCategoryId == categoryId).Select(t => new TreeViewItem()
                { 
                    Text = t.Title,
                    Collabsable = false
                }).ToListAsync();
    }

    void ExpandedChanged()
    {
        foreach (var item in loadOnFirstSource)
            item.Expanded = expanded;
    }
}
