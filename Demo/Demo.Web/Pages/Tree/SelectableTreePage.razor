@page "/Demo/SelectableTree"
@inherits BasePage
@using Caspian.Engine.Model
@using Caspian.Engine.Service
<div class="row d-head">
    <div class="col-md-6">
        <h3>Tree View</h3>
    </div>
    <div class="d-source-btn col-md-6">
        <button @onclick="() => status = WindowStatus.Open" class="c-btn c-primary">
            Source
            <i class="fa fa-code"></i>
        </button>
    </div>
</div>
<div class="d-body">
    <div class="row">
        <div class="col-md-6 d-control">
            <hr />
            <div class="d-container">
                <h4>Load on first</h4>
                <div class="row">
                    <div class="col-md-12">
                        <RadioList @bind-Value="expanded" OnChange="ExpandedChanged">
                            <RadioItems>
                                <RadioItem style="width:112px" TValue="bool" Value="false" Title="Collapsed" />
                                <RadioItem TValue="bool" Value="true" Title="Expanded" />
                            </RadioItems>
                        </RadioList>
                        <div class="d-tree-result">
                            <span>Selected menus count:@(expandedSeletedNodesCount) </span>
                        </div>
                        <TreeView TEntity="NodeView" @ref="expandedTree" OnChange="ExpandedNodeChange" style="height:calc(100vh - 218px);margin-right:5px;" Source="expandedSource" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 d-control">
            <hr />
            <div class="d-container">
                <h4 style="padding-right:40px;">Load on expand</h4>
                <div class="row">
                    <div class="col-md-12">
                        <div class="d-tree-result">
                            <span>SelectedMenus Count: @(collapsedSeletedNodesCount)</span>
                        </div>
                        <TreeView TEntity="NodeView" @ref="tree1" OnChange="CollapsedNodeChange" OnCollapsed="OnCollapsed" style="height:calc(100vh - 196px);margin-right:5px;" Source="collapsedSource" OnExpanded="async node => await OnExpanded(node)" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    bool expanded;
    WindowStatus status;
    int expandedSeletedNodesCount;
    int collapsedSeletedNodesCount;
    IList<NodeView> expandedSource;
    IList<NodeView> collapsedSource;
    TreeView<NodeView> expandedTree;
    TreeView<NodeView> tree1;

    void OnCollapsed(NodeView node)
    {
        node.Children = null;
        node.Selected = false;
    }

    void ExpandedNodeChange(NodeView node)
    {
        // This is for tow level tree
        if (node.Children != null)
        {
            foreach (var child in node.Children)
                child.Selected = node.Selected;
        }
        var parent = node.Parent;
        if (parent != null)
        {
            var siblings = parent.Children;
            if (siblings.All(t => t.Selected == true))
                parent.Selected = true;
            else if (siblings.All(t => t.Selected == false))
                parent.Selected = false;
            else
                parent.Selected = null;
            parent = parent.Parent;
        }
        expandedSeletedNodesCount = expandedTree.GetSeletcedItems().Count(t => t.Depth == 2);
    }

    void CollapsedNodeChange(NodeView node)
    {
        if (node.Depth == 1)
        {
            if (node.Children == null)
                node.Selected = false;
            else
            {
                foreach (var item in node.Children)
                    item.Selected = node.Selected;
            }
        }
        if (node.Depth == 2)
        {
            var parent = node.Parent;
            var items = parent.Children;
            if (items.All(t => t.Selected == true))
                parent.Selected = true;
            else if (items.All(t => t.Selected == false))
                parent.Selected = false;
            else
                parent.Selected = null;
        }
        collapsedSeletedNodesCount = tree1.GetSeletcedItems().Count(t => t.Depth == 2);
    }

    async Task OnExpanded(NodeView node)
    {
        using var service = CreateScope().GetService<MenuService>();
        var categoryId = Convert.ToInt32(node.Value);
        node.Children = await service.GetAll()
            .Where(t => t.MenuCategoryId == categoryId).Select(t => new NodeView()
                {
                    Collabsable = false,
                    Expanded = false,
                    Selectable = true,
                    Text = t.Title,
                    Value = t.Id.ToString()
                }).ToListAsync();
    }

    void ExpandedChanged()
    {
        foreach (var item in expandedSource)
            item.Expanded = expanded;
    }

    protected override async Task OnInitializedAsync()
    {
        using var service = CreateScope().GetService<MenuCategoryService>();
        expandedSource = await service.GetAll().Where(t => t.SubSystemKind == SubSystemKind.Demo)
            .Select(t => new NodeView()
                {
                    Text = t.Title,
                    Expanded = false,
                    Selectable = true,
                    Value = t.Id.ToString(),
                    Children = t.Menus.Select(u => new NodeView()
                    {
                        Collabsable = false,
                        Text = u.Title,
                        Value = u.Id.ToString(),
                        Selectable = true
                    }).ToList()
                }).ToListAsync();
        collapsedSource = expandedSource.Select(t => new NodeView()
            {
                Expanded = false,
                Collabsable = true,
                Selectable = true,
                Text = t.Text,
                Value = t.Value
            }).ToList();
        await base.OnInitializedAsync();
    }
}
