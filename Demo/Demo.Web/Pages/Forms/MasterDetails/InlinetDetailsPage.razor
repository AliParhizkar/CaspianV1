@page "/Demo/Batch/Inline/Details" 
@page "/Demo/Batch/Inline/Details/{MasterId:int}"
@namespace Demo.Web.Pages
@inherits MasterDetailPage<Order, OrderDeatil>
<h2>Batch operation</h2>
<h3>Order</h3>
<p>
    This page is used for Order operations. This operation can be divided into inserting and updating.
</p>
<ul class="d-demo-list">
    <li>
        <b>Order insert:</b> It includes the following operations, these operations are performed together and transactionally:
        <ul class="d-demo-inner-list">
            <li><b>Inser order</b>: There must be a order to insert.</li>
            <li><b>Insert orderdetail(s)</b>: There must be one or more orderdetail(s) for insert.</li>
        </ul>
    </li>
    <li>
        <b>Order update:</b> It includes the following operations, only one or more of these operations may be performed. 
        these operations are performed together and transactionally:
        <ul class="d-demo-inner-list">
            <li><b>Update order:</b> There may be no update to receipt.</li>
            <li><b>Insert orderdetail(s):</b> There may be no, one or more receipt details to insert.</li>
            <li><b>Update orderdetail(s):</b> There may be no, one or more receipt details to update.</li>
            <li><b>delete orderdetail(s):</b> There may be no, one or more receipt details to update.</li>
        </ul>
    </li>
</ul>
<h3>MasterDetailPage&lt;TMaster, TDetail&gt;</h3>
<p>
    We can create order form <b>without any coding</b>, of course we can <b>modify</b> it by coding. 
    To create it, we need to use the <b>MasterDetailPage</b> class, this class is a <b>generic class</b> with two parameters: <b>TMaster(Order)</b> and <b>TDetail(OrderDeatil)</b>.
    To use this class, we need to set its properties, we describe these properties.
</p>
<h4>MasterDetailPage class properties:</h4>
<ul class="d-demo-list">
    <li><b>UpsertData: </b>This property is of type <b>TMaster(Order)</b> which is used for <b>gathering data, validation or upsert</b>.</li>
    <li><b>Form: </b>This form is used for validation, it validate UpsertData(Order taht has one or more OrderDeatil). </li>
    <li>
        <b>Grid: </b>
        This grid is bind to TDetail (Orderdetail) type, we describe some of its properties that we have used.
        <ul class="d-demo-inner-list">
            <li><b>Batch: </b>It's a boolean parameter taht enable <b>batch</b> operations.</li>
            <li><b>Inline: </b>It's a boolean parameter that enable <b>inlin</b> upsert.</li>
            <li><b>EditTemplate: </b>Use for spaecify add or edit inline template. </li>
        </ul>
    </li>
</ul>
<p>
    <span class="fa fa-info"> Note: </span> Because the user (programmer) specify the <b>EditTemplate</b>,
    it is possible to make <b>any kind of changes</b>.
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <h4>Order-Orderdetails</h4>
                <span class="c-demo-description">In this example we can inser or update order, also insert update or delete orderdetail(s).</span>
                <div class="pt-3">
                    <span class="fa fa-info"> Note: </span><span class="c-demo-description">We use OrderService for validate both Order and orderdetails.</span>
                </div>
                <h4> User experience: </h4>
                <ul class="d-demo-inner-list">
                    <li>
                        <b>Order</b>: We can override the <b>OnMasterEntityCreatedAsync</b> method and set any <b>UpsertData</b> property, this method is called <b>after the upsert</b> and before the <b>form is reset</b>.
                    </li>
                    <li>
                        <b>Orderdetail: </b> We have three user experience for Orderdetail
                        <ul class="d-demo-inner-list">
                            <li>
                                <b>Product search: </b> We have assigned a code (from 100 to...) to each of the products and we can search for the product based on that.
                            </li>
                            <li>
                                <b>On product select: </b> After selecting the product, we <b>get the price</b> of the product from the <b>database</b> and assign it to the <b>Price</b>, and also set <b>Quantity to 1</b> if the Quantity is 0.
                            </li>
                            <li>
                                <b>Upsert on eneter: </b> Validation and insertion is done by pressing the enter key in txtQuantity.
                            </li>
                        </ul>
                    </li>
                </ul>
                <div class="row pt-4">
                    <div class="col-md-4 row pe-3">
                        <div class="col-md-2 text-start c-arrow-back">
                            <a href="/Demo/Batch/Inline/Master">
                                <span class="fa fa-arrow-left"></span>
                            </a>
                        </div>
                        <div class="col-md-10 text-center">
                            <span class="d-membership">Order</span>
                        </div>
                        <hr class="mt-2" />
                    </div>
                    <div class="col-md-8 row ps-3 ">
                        <div class="col-md-12 text-center">
                            <span class="d-membership">Orderdetails</span>
                            <hr class="mt-2" />
                        </div>
                    </div>
                    <div class="col-md-5 row pe-3">
                        <CaspianForm @ref="Form" Model="UpsertData">
                            <div class="row c-controls">
                                <div class="col-md-4">
                                    <label>Order date</label>
                                </div>
                                <div class="col-md-8">
                                    <DatePicker @bind-Value="UpsertData.Date" />
                                </div>
                                <div class="col-md-4">
                                    <label>Order type</label>
                                </div>
                                <div class="col-md-8">
                                    <DropdownList @bind-Value="UpsertData.OrderType" />
                                </div>
                                <div class="col-md-4">
                                    <label>Customer</label>
                                </div>
                                <div class="col-md-8">
                                    <ComboBox TEntity="Customer" TValue="int?" @bind-Value="UpsertData.CustomerId"
                                                TextExpression="@(t => t.CustomerType == CustomerType.Real ? t.FName + " " + t.LName : t.CompanyName)" />
                                </div>
                                <div class="col-md-4">
                                    <label>Delivery</label>
                                </div>
                                <div class="col-md-8">
                                    <ComboBox TEntity="Delivery" TValue="int?" @bind-Value="UpsertData.DeliveryId" TextExpression="@(t => t.FName + " " + t.LName + "-" + t.Code)" />
                                </div>
                                <div class="col-md-4">
                                    <label>Description</label>
                                </div>
                                <div class="col-md-8">
                                    <StringTextBox @bind-Value="UpsertData.Description" MultiLine Rows="4" />
                                </div>
                                <div class="col-md-12">
                                    <FormCommandButton />
                                </div>
                            </div>
                        </CaspianForm>
                    </div>
                    <div class="col-md-7 ps-3">
                         <DataGrid @ref="DataView" TEntity="OrderDeatil" ContentHeight="350" Inline Batch ConditionExpr="t => t.OrderId == MasterId">
                            <Columns Context="con">
                                <GridColumn Field="t => t.Product.Title" Title="Product">
                                    <EditTemplate>
                                         <AutoComplete TEntity="Product" TValue="int" @bind-Value="con.Data.ProductId"
                                                        HideHeader AutoHide TextExpression="t => t.Title"
                                                        OnChange="async () => await SetPrice(con.Data)">
                                            <ProductLookupWindow />
                                        </AutoComplete>
                                    </EditTemplate>
                                </GridColumn>
                                <GridColumn Field="t => t.Price.Seprate3Digit()" style="width:100px" >
                                    <EditTemplate>
                                        <span>@(con.Data.Price.Seprate3Digit())</span>
                                    </EditTemplate>
                                </GridColumn>
                                <GridColumn Field="t => t.Quantity" style="width:100px">
                                    <EditTemplate>
                                        <NumericTextBox @ref="txtQuantity" @bind-Value="con.Data.Quantity"
                                                        @onkeyup="@(async e => await UpsertOnEnter(e, con.UpsertMode.Value))" />
                                    </EditTemplate>
                                </GridColumn>
                                <GridCommandColumns />
                            </Columns>
                        </DataGrid>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Batch" FileName="Batch-Inline-1" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Order service">
            <Document FolderName="Service/Services" FileName="OrderService" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Orderdeatil Service">
            <Document FolderName="Service/Services" FileName="OrderDeatilService" />
        </TabPanelItem>
    </Tabs>
</TabPanel>


@code
{
    NumericTextBox<int> txtQuantity;

    protected override async Task OnMasterEntityCreatedAsync()
    {
        if (UpsertData.Id == 0)
            UpsertData.Date = DateTime.Now.Date;
        await base.OnMasterEntityCreatedAsync();
    }

    async Task UpsertOnEnter(KeyboardEventArgs e, UpsertMode mode)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await DataView.ValidateAndUpsert(mode);
    }


    async Task SetPrice(OrderDeatil detail)
    {
        if (detail.ProductId > 0)
        {
            using var service = CreateScope().GetService<ProductService>();
            var old = await service.SingleAsync(detail.ProductId);
            detail.Price = old.Price;
            if (detail.Quantity == 0)
                detail.Quantity = 1;
            await txtQuantity.FocusAsync();
        }
    }
}