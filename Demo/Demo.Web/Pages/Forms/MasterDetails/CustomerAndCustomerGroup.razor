@page "/Demo/CustomerAndCustomerGroup"
@namespace Demo.Web.Pages
@inherits BasePage
@{
    base.BuildRenderTree(__builder);
}
<h2>Custom Master-details</h2>
<p>
    In this example, we can Upsert and delete the customer and its groups.
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="p-4">
                <span class="c-demo-description">
                    In this example we do the following together:
                </span>
                <ul class="d-demo-inner-list">
                    <li>
                        <b>Insert customer & Groups: </b> We can insert a customer (Master) and many groups (Details) together (maybe only insert customer withoth any groups).
                    </li>
                    <li>
                        <b>Update customer & add or remove Groups : </b> We can update customer (Master) and add or remove groups(details) together.
                    </li>
                    <li>
                        <b>Delete customer :</b> To delete a customer, we must first removes customer groups.
                    </li>
                </ul>
                <CrudComponent TEntity="Customer" UpsertData="customer" OnUpsert="async formData => await UpdateDatabaseAsync(formData)">
                    <DataGrid @ref="grid" Search="search" TableHeight="400">
                        <Columns>
                            <GridColumn Field="t => t.CustomerType" />
                            <GridColumn Field='t => t.CustomerType == CustomerType.Real ? t.FName + " " + t.LName : t.CompanyName' Title="Name" />
                            <GridColumn Field="t => t.MobileNumber.CallFormat(' ')" />
                            <GridCommandColumns />
                        </Columns>
                    </DataGrid>
                    <Window OnOpen="async () => await loadGroups()" @ref="window" Title="Customer & Groups" Style="width:450px;">
                        <Content>
                            <CaspianForm Model="customer">
                                <TabPanel>
                                    <Tabs>
                                        <TabPanelItem Title="Customer">
                                            <div class="row p-4 pt-2 pb-2 c-controls" style="height:320px">
                                                <div class="col-md-4">
                                                    <label>Customer Type</label>
                                                </div>
                                                <div class="col-md-8">
                                                    <DropdownList @bind-Value="customer.CustomerType" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label>First Name</label>
                                                </div>
                                                <div class="col-md-8">
                                                    <StringTextBox @bind-Value="customer.FName"
                                                                    Disabled="customer.CustomerType == CustomerType.Legal" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label>Last Name</label>
                                                </div>
                                                <div class="col-md-8">
                                                    <StringTextBox @bind-Value="customer.LName"
                                                                    Disabled="customer.CustomerType == CustomerType.Legal" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label>Gender</label>
                                                </div>
                                                <div class="col-md-8">
                                                    <DropdownList @bind-Value="customer.Gender"
                                                                    Disabled="customer.CustomerType == CustomerType.Legal" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label>Company Name</label>
                                                </div>
                                                <div class="col-md-8">
                                                    <StringTextBox @bind-Value="customer.CompanyName"
                                                                    Disabled="customer.CustomerType == CustomerType.Real" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label>Mobile Number</label>
                                                </div>
                                                <div class="col-md-8">
                                                    <StringTextBox @bind-Value="customer.MobileNumber" MaxLength="11" />
                                                </div>
                                                <div class="col-md-4">
                                                    <label>Tel</label>
                                                </div>
                                                <div class="col-md-8">
                                                    <StringTextBox @bind-Value="customer.Tel" />
                                                </div>
                                            </div>
                                        </TabPanelItem>
                                        <TabPanelItem Title="Groups">
                                            <div class="p-4" style="height:320px">
                                                <CheckboxList TValue="int" TEntity="CustomerGroup" @bind-Values="groupsId"
                                                                TextExpression="t => t.Title" />
                                            </div>
                                        </TabPanelItem>
                                    </Tabs>
                                </TabPanel>
                                <div class="pt-4 pt-0 pb-2">
                                    <FormCommandButton />
                                </div>
                            </CaspianForm>
                        </Content>
                    </Window>
                </CrudComponent>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Batch" FileName="Customer&Groups" />
        </TabPanelItem>
    </Tabs>
</TabPanel>


@code
{
    Window window;
    DataGrid<Customer> grid;
    Customer customer = new Customer();
    Customer search = new Customer();
    IList<int> groupsId;

    async Task loadGroups()
    {
        if (customer.Id > 0)
        {
            ///In update we should fill groupsId field
            using var scope = CreateScope();
            groupsId = await new CustomerGroupMembershipService(scope.ServiceProvider).GetAll()
                .Where(t => t.CustomerId == customer.Id).Select(t => t.CustomerGroupId).ToListAsync();
        }
        else
            groupsId = new List<int>();
    }

    async Task UpdateDatabaseAsync(FormData<Customer> form)
    {
        form.Cancel = true;
        using var scope = CreateScope();
        var service = new CustomerService(scope.ServiceProvider);
        if (customer.Id == 0)
        {
            customer.CustomerGroupMemberships = groupsId.Select(t => new CustomerGroupMembership()
            {
                CustomerGroupId = t
            }).ToList();
            customer = await service.AddAsync(customer);
        }
        else
        {
            var oldGroupsId = await new CustomerGroupMembershipService(scope.ServiceProvider).GetAll()
                .Where(t => t.CustomerId == customer.Id).Select(t => t.CustomerGroupId).ToListAsync();
            customer.CustomerGroupMemberships = groupsId.Where(t => !oldGroupsId.Contains(t)).Select(t => new CustomerGroupMembership()
            {
                CustomerGroupId = t,
                CustomerId = customer.Id
            }).ToList();
            ///The groups removed from list and exist in database, this groups should removed from database
            var removedGroupsId = await new CustomerGroupMembershipService(scope.ServiceProvider).GetAll()
                .Where(t => t.CustomerId == customer.Id && !groupsId.Contains(t.CustomerGroupId)).Select(t => t.Id).ToListAsync();
            await service.UpdateAsync(customer, removedGroupsId);
        }
        await service.SaveChangesAsync();
        await grid.SelectRowById(customer.Id);
        await window.Close();
    }
}
