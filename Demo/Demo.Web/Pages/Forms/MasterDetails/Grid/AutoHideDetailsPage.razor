@page "/Demo/Batch/AutoHide/Details"
@page "/Demo/Batch/AutoHide/Details/{ReceiptId:int}"

@using Caspian.Common.Extension
@namespace Demo.Web.Pages
@inject BatchService<WarehouseReceipt, ReceiptDetail> Service
@inherits BasePage
<h2>Batch operation</h2>
<h3>Warehouse receipt</h3>
<p>
    This page is used for warehouse receipt operations. This operation can be divided into inserting and updating.
</p>
<ul class="d-demo-list">
    <li>
        <b>warehouse receipt insert:</b> It includes the following operations, these operations are performed together and transactionally:
        <ul class="d-demo-inner-list">
            <li><b>Inser warehouse receipt</b>: There must be a warehouse receipt to insert.</li>
            <li><b>Insert receipt detail(s): There must be one or more material(s) for insert.</b></li>
        </ul>
    </li>
    <li>
        <b>warehouse receipt update:</b> It includes the following operations, only one or more of these operations may be performed. these operations are performed together and transactionally:
        <ul class="d-demo-inner-list">
            <li><b>Update order receipt:</b> There may be no update to receipt.</li>
            <li><b>Insert receipt detail(s):</b> There may be no, one or more receipt details to insert.</li>
            <li><b>Update receipt detail(s):</b> There may be no, one or more receipt details to update.</li>
            <li><b>delete receipt detail(s):</b> There may be no, one or more receipt details to update.</li>
        </ul>
    </li>
</ul>
<h3>MasterDetailPage&lt;TMaster, TDetail&gt;</h3>
<p>
    We can create warehouse receipt form <b>without any coding</b>, of course we can <b>modify</b> it by coding. 
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <h4>Warehouse receipt-Receipt details</h4>
                <span class="c-demo-description">In this example we can inser or update <b>warehouse receipt</b>, 
                    also insert update or delete receiptdetail(s).
                </span>
                <div class="pt-3">
                    <span class="fa fa-info"> Note: </span><span class="c-demo-description">We use WareHouseReceiptService
                        for validate both Warehouse receip and Receipt details.
                    </span>
                </div>
                <h5> User experience: </h5>
                <ul class="d-demo-inner-list">
                    <li>
                        <b>Warehouse receipt</b>: We can override the <b>OnMasterEntityCreatedAsync</b> method and set any <b>UpsertData</b> property, this method is called <b>after the upsert</b> and before the <b>form is reset</b>.
                    </li>
                    <li>
                        <b>Receipt details: </b> We have two user experience for Orderdetail
                        <ul class="d-demo-inner-list">
                            <li>
                                <b>material autocomplete: </b>After selecting the material, we display the <b>title and text box</b> of the <b>main unit</b>, if the material <b>has a sub-unit</b>, we display its <b>title and text box</b>.
                            </li>
                            <li>
                                <b>Main-unit text box: </b>By pressing the <b>enter key</b>, if the material <b>has a sub-unit</b>, the <b>focus</b> is given to the text box of the <b>sub-unit</b>. Otherwise, <b>validation</b> and upsert will take place.
                            </li>
                            <li>
                                <b>Sub-Unit text box: </b> By pressing the <b>enter</b> key <b>validation</b> and upsert will take place.
                            </li>
                        </ul>
                    </li>
                </ul>
                <div class="row">
                    <div class="col-md-4 row pe-3">
                        <div class="col-md-2 text-start">
                            <a href="/Demo/Batch/Inline/Master">
                                <span class="fa fa-arrow-left"></span>
                            </a>
                        </div>
                        <div class="col-md-10 text-center">
                            <span class="d-membership">Warehouse receipt</span>
                        </div>
                        <hr class="mt-2" />
                    </div>
                    <div class="col-md-8 row ps-3 ">
                        <div class="col-md-12 text-center">
                            <span class="d-membership">Receipt details</span>
                            <hr class="mt-2" />
                        </div>
                    </div>
                    <div class="col-md-4 row pe-3">
                        <CaspianForm Service="Service">
                            <div class="row c-controls ps-3 pe-3">
                                <div class="col-md-4">
                                    <label>Receipt date</label>
                                </div>
                                <div class="col-md-8">
                                    <DatePicker @bind-Value="Service.UpsertData.Date" />
                                </div>
                                <div class="col-md-4">
                                    <label>Warehouse</label>
                                </div>
                                <div class="col-md-8">
                                    <ComboBox TEntity="Warehouse" TValue="int" @bind-Value="Service.UpsertData.WarehouseId" TextExpression="t => t.Title" />
                                </div>
                                <div class="col-md-4">
                                    <label>Description</label>
                                </div>
                                <div class="col-md-8">
                                    <StringTextBox @bind-Value="Service.UpsertData.Comment" MultiLine Rows="3" />
                                </div>
                                <div class="col-md-12">
                                    <FormCommandButton />
                                </div>
                            </div>
                        </CaspianForm>
                    </div>
                    <div class="col-md-8 ps-3">
                        <DataGrid TEntity="ReceiptDetail" DetailBatchService="Service" ContentHeight="300" Inline AutoHide>
                            <Columns Context="con">
                                <GridColumn Field="t => t.Material.Title" Title="Material">
                                    <EditTemplate>
                                         <AutoComplete TEntity="Material" TValue="int" @bind-Value="con.Data.MaterialId"
                                                        HideHeader AutoHide Title="Material" TextExpression="t => t.Title"
                                                        OnChange="async () => await UpdateMaterialReceipt(con.Data.MaterialId, con.Data)">
                                            <MaterialLookupWindow />
                                        </AutoComplete>
                                    </EditTemplate>
                                </GridColumn>
                                <GridColumn Field="t => t.QuantityMain" style="width:110px;">
                                    <EditTemplate>
                                        <NumericTextBox @ref="txtMainUnit" @onkeyup="async e =>  await MainUnitChanged(e, con.Data, con.UpsertMode.Value)" @bind-Value="con.Data.QuantityMain" />
                                    </EditTemplate>
                                </GridColumn>
                                <GridColumn Field="t => t.Material.MainUnit.Title" Title="Main unit" style="width:80px">
                                    <Template>
                                        <span>@(con.Data?.Material?.MainUnit?.Title)</span>
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="t => t.QuantitySub" style="width:110px;">
                                    <EditTemplate>
                                        @if (con.Data?.Material?.SubunitId != null || con.Data?.Material?.Subunit?.Title != null)
                                        {
                                            <NumericTextBox @ref="txtSubunit" Total="5" @onkeyup="async e =>  await SubUnitChanged(e, con.Data, con.UpsertMode.Value)" @bind-Value="con.Data.QuantitySub" />
                                        }
                                    </EditTemplate>
                                </GridColumn>
                                <GridColumn Field="t => t.Material.Subunit.Title" Title="Sub unit" style="width:80px">
                                    <Template>
                                        <span>@(con.Data?.Material?.Subunit?.Title)</span>
                                    </Template>
                                </GridColumn>
                                <GridCommandColumns />
                            </Columns>
                        </DataGrid>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Razor">
            <Document FolderName="Batch" FileName="Batch-Autohide-1" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Warehouse receipt service">
            <Document FolderName="Service/Services" FileName="WarehouseReceiptService" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Receipt details service">
            <Document FolderName="Service/Services" FileName="ReceiptDetailsService" />
        </TabPanelItem>
    </Tabs>
</TabPanel>

@code
{
    NumericTextBox<int> txtMainUnit;
    NumericTextBox<int?> txtSubunit;

    protected override void OnInitialized()
    {
        Service.MasterId = ReceiptId;
        Service.OnCreate = t =>
        {
            if (t.Id == 0)
                t.Date = DateTime.Now;
        };
        base.OnInitialized();
    }

    async Task MainUnitChanged(KeyboardEventArgs e, ReceiptDetail detail, UpsertMode mode)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            if (detail?.Material.SubunitId != null)
                await txtSubunit.FocusAsync();
            else
                await Service.DetailDataView.ValidateAndUpsert(mode);
        }
    }

    async Task SubUnitChanged(KeyboardEventArgs e, ReceiptDetail detail, UpsertMode mode)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
            await Service.DetailDataView.ValidateAndUpsert(mode);
    }

    async Task UpdateMaterialReceipt(int materialId, ReceiptDetail detail)
    {
        if (materialId > 0)
        {
            using var service = CreateScope().GetService<MaterialService>();
            detail.Material = await service.GetAll().Include(t => t.MainUnit).Include(t => t.Subunit).SingleAsync(materialId);
            await txtMainUnit.FocusAsync();

        }
    }

    [Parameter]
    public int ReceiptId { get; set; }
}