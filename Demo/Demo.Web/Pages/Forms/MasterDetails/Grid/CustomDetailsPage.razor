@page "/Demo/Batch/Custom/Details"
@page "/Demo/Batch/Custom/Details/{MasterId:int}"
@inject BatchService<Order, OrderDeatil> Service
@inherits MasterDetailPage<Order, OrderDeatil>
@{
    base.BuildRenderTree(__builder);
}
<style type="text/css">
    .product {
        border: 1px solid lightgray;
        padding: 5px;
        margin: 5px;
        display: inline-block;
        border-radius: 15px;
        width: 160px;
        text-align: center;
        font-weight: bold;
        white-space: nowrap;
        font-size: 13px;
        cursor: pointer;
        background-color: aliceblue;
    }

    .products {
        border: 1px solid lightgray;
        max-height: 200px;
        overflow: auto;
        margin-bottom: 10px;
        border-radius: 17px;
        width: calc(100% - 300px)
    }
</style>
<h3>Batch-Custom</h3>
<p>
    In this example, we have <b>a few products</b> to choose, with the <b>first click</b> on the product, 
    it will be <b>added</b> to the grid, and with <b>subsequent clicks</b>, its <b>quantity</b> will increase.
</p>
<p>
    In the grid, we can <b>increase</b> or <b>decrease</b> the quantity of products, if the number of a product becomes <b>zero</b>, it will be <b>removed</b> from the grid.
</p>
<p>
    By clicking the <b>save button</b>, the <b>order</b> and <b>its details</b> will be saved together.
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <h4>Inline grid methods:</h4>
                <span class="c-demo-description">We use inline grid methods for orderdetail operations (insert, update and remove)
                    in this example. Here we describe these methods:</span>
                <ul class="d-demo-inner-list">
                    <li>
                        <b>InsertAsync: </b>We use this method to <b>validation & insert</b> the order details, 
                        this method <b>retrieves the necessary data</b> from the <b>database</b> based on the <b>grid expressions</b>.
                    </li>
                    <li>
                        <b>UpdateAsync: </b>We use this method to <b>validation & update</b> the order details, 
                        this method <b>retrieves the necessary data</b> from the <b>database</b> based on the <b>grid expressions</b>.
                    </li>
                    <li>
                        <b>RemoveAsync: </b>We use this method to <b>remove validation & remove</b> the order details.
                    </li>
                    <li>
                        <b>GetAllRecords: </b>This method returns all the <b>records in the grid</b>, <span style="color:deeppink">these records are the grid objects, and changing them changes the grid data</span>.
                    </li>
                    <li>
                        <b>GetInsertedEntities: </b>This method returns all <b>inserted records</b>. In these records, the <b>primary key value is zero</b>.
                    </li>
                    <li>
                        <b>GetUpdatedEntities: </b>This method returns all <b>updated records</b>.
                        This method may have data only in <b>editing mode</b>.
                    </li>
                    <li>
                        <b>GetDeletedEntities: </b>This method returns all <b>removed records</b>.
                        This method may have data only in <b>editing mode</b>.
                    </li>
                </ul>
                <div class="pb-4">
                    <span class="fa fa-info"> Note: </span><span class="c-demo-description">
                        The grid operation (Insert, Update, Remove) only changes the grid data, and has no effect on the database data.
                    </span>
                </div>
                <div class="row">
                    <div class="col-md-4 row pe-3">
                        <div class="col-md-2 text-start">
                            <a href="/Demo/Batch/Custom/Master">
                                <span class="fa fa-arrow-left"></span>
                            </a>
                        </div>
                        <div class="col-md-10 text-center">
                            <span class="d-membership">Order</span>
                        </div>
                        <hr class="mt-2" />
                    </div>
                    <div class="col-md-8 row ps-3 ">
                        <div class="col-md-12 text-center">
                            <span class="d-membership">Orderdetails</span>
                            <hr class="mt-2" />
                        </div>
                    </div>
                    <div class="col-md-4 row pe-3">
                        <CaspianForm Model="UpsertData">
                            <div class="row c-controls ps-3 pe-3">
                                <div class="col-md-4">
                                    <label>Order date</label>
                                </div>
                                <div class="col-md-8">
                                    <DatePicker @bind-Value="UpsertData.Date" />
                                </div>
                                <div class="col-md-4">
                                    <label>Order type</label>
                                </div>
                                <div class="col-md-8">
                                    <DropdownList @bind-Value="UpsertData.OrderType" />
                                </div>
                                <div class="col-md-4">
                                    <label>Customer</label>
                                </div>
                                <div class="col-md-8">
                                    <ComboBox TEntity="Customer" TValue="int?" @bind-Value="UpsertData.CustomerId" TextExpression="@(t => t.CustomerType == CustomerType.Real ? (t.FName + " " + t.LName) : t.CompanyName)" />
                                </div>
                                <div class="col-md-12">
                                    <FormCommandButton />
                                </div>
                            </div>
                        </CaspianForm>
                        <div class="pt-3 text-center pe-3">
                            <div class="pt-3">
                                <button @onclick="InsertedProducts" class="c-btn c-primary">Inserted products</button>
                            </div>
                            <div class="pt-3">
                                <button @attributes="btnAttr" @onclick="UpdatedProducts" class="c-btn c-primary">Updated products</button>
                            </div>
                            <div class="pt-3">
                                <button @attributes="btnAttr" @onclick="DeletedProducts" class="c-btn c-primary">Deleted products</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8 ps-3">
                        @if (products != null)
                        {
                            <div class="ps-4">
                                @foreach (var product in products)
                                {
                                    <span @onclick="async () => await AddUpsertProduct(product)" class="product">@product.Title</span>
                                }
                            </div>
                        }
                        <div class="pt-4">
                            <DataGrid @ref="DataView" TEntity="OrderDeatil" Batch ConditionExpr="t => t.OrderId == MasterId" ContentHeight="250" HideInsertIcon>
                                <Columns>
                                    <GridColumn Field="t => t.Product.ProductCategory.Title" Title="Product category" />
                                    <GridColumn Field="t => t.Product.Title" Title="Product" />
                                    <GridColumn Field="t => t.Price.Seprate3Digit()" Title="Price" />
                                    <GridColumn Field="t => t.Quantity" Title="Quantity">
                                        <Template>
                                            <IconButton IconType="IconType.Plus" @onclick="async () => await IncQuantity(context.Data)" />
                                            <span style="display:inline-block;width:38px;height:38px;">@context.Data.Quantity</span>
                                            <IconButton IconType="IconType.Minus" @onclick="async () => await DecQuantity(context.Data)" />
                                        </Template>
                                    </GridColumn>
                                </Columns>
                            </DataGrid>
                        </div>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Batch" FileName="Batch-Custom-1" />
        </TabPanelItem>
    </Tabs>
</TabPanel>

@code
{
    IList<Product> products;
    IDictionary<string, object> btnAttr;

    protected override Task OnMasterEntityCreatedAsync()
    {
        UpsertData.Date = DateTime.Now.Date;
        return base.OnMasterEntityCreatedAsync();
    }

    protected async override Task OnInitializedAsync()
    {
        using var service = CreateScope().GetService<ProductService>();
        products = await service.GetAll().ToListAsync();
        foreach (var product in products)
            product.Image = null;
        btnAttr = new Dictionary<string, object>();
        if (MasterId == 0)
            btnAttr.Add("disabled", "disabled");
        await base.OnInitializedAsync();
    }

    async Task UpdatedProducts()
    {
        var products = Service.ChangedEntities.Where(t => t.ChangeStatus == ChangeStatus.Updated).Select(t => t.Entity);
        if (products.Count() == 0)
            await Alert("No products have been updated");
        else
        {
            var str = $"Updated products count: {products.Count()}\nUpdated products Id: {{ ";
            var isFirst = true;
            foreach (var product in products)
            {
                if (!isFirst)
                    str += ", ";
                str += product.ProductId;
                isFirst = false;
            }
            await Alert(str + " }");
        }
    }

    async Task DeletedProducts()
    {
        var products = Service.ChangedEntities.Where(t => t.ChangeStatus == ChangeStatus.Deleted).Select(t => t.Entity);
        if (products.Count() == 0)
            await Alert("No products have been deleted");
        else
        {
            var str = $"Deleted products count: {products.Count()}\n Deleted products Id {{ ";
            var isFirst = true;
            foreach (var product in products)
            {
                if (!isFirst)
                    str += ", ";
                str += product.ProductId;
                isFirst = false;
            }
            await Alert(str + " }");
        }
    }

    async Task InsertedProducts()
    {
        var products = Service.ChangedEntities.Where(t => t.ChangeStatus == ChangeStatus.Added).Select(t => t.Entity);
        if (products.Count() == 0)
            await Alert("No products have been added");
        else
        {
            var str = $"Added Products count: {products.Count()}\n Added products Id: {{";
            var isFirst = true;
            foreach (var product in products)
            {
                if (!isFirst)
                    str += ", ";
                str += product.ProductId;
                isFirst = false;
            }
            await Alert(str + " }");
        }
    }

    async Task AddUpsertProduct(Product product)
    {
        var old = DataView.GetAllRecords().SingleOrDefault(t => t.ProductId == product.Id);
        if (old == null)
        {
            await DataView.InsertAsync(new OrderDeatil()
                {
                    Quantity = 1,
                    Price = product.Price,
                    ProductId = product.Id,
                    OrderId = MasterId
                });
        }
        else
        {
            old.Quantity = old.Quantity + 1;
            await DataView.UpdateAsync(old);
        }
    }

    async Task IncQuantity(OrderDeatil detail)
    {
        detail.Quantity++;
        await DataView.UpdateAsync(detail);
    }

    async Task DecQuantity(OrderDeatil detail)
    {
        detail.Quantity--;
        if (detail.Quantity == 0)
            await DataView.RemoveAsync(detail);
        else
            await DataView.UpdateAsync(detail);
    }
}
