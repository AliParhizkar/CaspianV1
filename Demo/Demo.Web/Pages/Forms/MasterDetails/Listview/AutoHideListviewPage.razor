@page "/Demo/Batch/Autohide/Listview/Details"
@page "/Demo/Batch/AutoHide/Listview/Details/{ReceiptId:int}"
@using Caspian.Common.Extension
@namespace Demo.Web.Pages
@inherits BasePage 
@inject BatchService<WarehouseReceipt, ReceiptDetail> Service

<div style="margin:0 -20px" class="d-content ps-2 pe-2">
    <div class="row pt-4">
        <div class="col-md-3 row">
            <div class="col-md-2 text-start c-arrow-back">
                <a href="/Demo/Batch/Autohide/Master">
                    <span class="fa fa-arrow-left"></span>
                </a>
            </div>
            <div class="col-md-10 text-center">
                <span class="d-membership">Receipt</span>
            </div>
            <hr class="mt-2" />
        </div>
        <div class="col-md-9 row ps-3 ">
            <div class="col-md-12 text-center">
                <span class="d-membership">Receipt Detail</span>
                <hr class="mt-2" />
            </div>
        </div>
        <div class="col-md-3 row">
            <CaspianForm Service="Service">
                <div class="row c-controls">
                    <div class="col-md-4">
                        <label>Receipt date</label>
                    </div>
                    <div class="col-md-8">
                        <DatePicker @bind-Value="Service.UpsertData.Date" />
                    </div>
                    <div class="col-md-4">
                        <label>Warehouse</label>
                    </div>
                    <div class="col-md-8">
                        <ComboBox TEntity="Warehouse" TValue="int" @bind-Value="Service.UpsertData.WarehouseId" TextExpression="t => t.Title" />
                    </div>
                    <div class="col-md-4">
                        <label>Description</label>
                    </div>
                    <div class="col-md-8">
                        <StringTextBox @bind-Value="Service.UpsertData.Comment" MultiLine Rows="3" />
                    </div>
                    <div class="col-md-12">
                        <FormCommandButton />
                    </div>
                </div>
            </CaspianForm>
        </div>
        <div class="col-md-9 ps-3">
            <ListView TEntity="ReceiptDetail" DetailBatchService="Service" ContentHeight="250" Inline AutoHide PageSize="8"
                      OnCancel="HideDescription" OnUpsert="HideDescription" OnSave="HideDescription">
                <HeaderTempalte>
                    <div class="d-lst-1">Material</div>
                    <div class="d-lst-2">Quantity</div>
                    <div class="d-lst-3">Quantity Title</div>
                    <div class="d-lst-4">SubQuantity</div>
                    <div class="d-lst-5">SubQuantity Title</div>
                    <div class="d-lst-6">Description</div>
                    <div class="d-lst-7">Edit-Delete</div>
                </HeaderTempalte>
                <Fields Context="detail">
                    @{
                        var name = "d-listview-row";
                        if (detail?.RowIndex % 2 == 0)
                            name += " d-row-odd";
                    }
                    <div class="@name">
                        <div class="d-lst-1">
                            <TextField Field="t => t.Material.Title">
                                <EditTemplate>
                                    <AutoComplete TEntity="Material" TValue="int" @bind-Value="detail.Data.MaterialId"
                                                  HideHeader AutoHide TextExpression="t => t.Title" OnChange="async () => await UpdateMaterialReceipt(detail.Data)">
                                        <MaterialLookupWindow />
                                    </AutoComplete>
                                </EditTemplate>
                            </TextField>
                        </div>
                        <div class="d-lst-2">
                            <TextField Field="t => t.QuantityMain.Seprate3Digit()">
                                <EditTemplate>
                                    <NumericTextBox @ref="txtMainUnit" @bind-Value="detail.Data.QuantityMain" @onkeyup="async e =>  await MainUnitChanged(e, detail.Data, detail.UpsertMode.Value)" />
                                </EditTemplate>
                            </TextField>
                        </div>
                        <div class="d-lst-3">
                            <TextField Field="t => t.Material.MainUnit.Title">
                                <EditTemplate>
                                    <span>@detail?.Data?.Material?.MainUnit?.Title</span>
                                </EditTemplate>
                            </TextField>
                        </div>
                        <div class="d-lst-4">
                            @if (detail?.Data?.QuantitySub != null || detail?.Data?.Material?.Subunit != null)
                            {
                                <TextField Field="t => t.QuantitySub.Seprate3Digit()">
                                    <EditTemplate>
                                        <NumericTextBox @ref="txtSubunit" @onkeyup="async e =>  await SubUnitChanged(e, detail.Data, detail.UpsertMode.Value)" @bind-Value="detail.Data.QuantitySub" />
                                    </EditTemplate>
                                </TextField>
                            }
                        </div>
                        <div class="d-lst-5">
                            <TextField Field="t => t.Material.Subunit.Title" >
                                <EditTemplate>
                                    <span>@detail?.Data?.Material?.Subunit?.Title</span>
                                </EditTemplate>
                            </TextField>
                        </div>
                        <div class="d-lst-6">
                            <button class="c-btn c-info" disabled="@(detail?.UpsertMode == null)" @onclick="async () => await ShowDescription(detail)">...</button>
                        </div>
                        <div class="d-lst-7">
                            <ListCommandButton ButtonType="CommandButtonType.Simple" />
                        </div>
                        @if (showDescriptionStatuse && selectedReceiptDetail == detail.Data) 
                        {
                            <div class="d-lst-8">
                                <label>Description</label>
                            </div>
                            <div class="d-lst-9">
                                <StringTextBox @ref="txtDescription" @bind-Value="detail.Data.Description" MultiLine Cols="5" />
                            </div>
                        }
                    </div>
                </Fields>
            </ListView>
        </div>
    </div>
</div>
@code {

    NumericTextBox<int> txtMainUnit;
    NumericTextBox<int?> txtSubunit;
    bool showDescriptionStatuse;
    StringTextBox txtDescription;
    ReceiptDetail selectedReceiptDetail;

    protected override void OnInitialized()
    {
        Service.MasterId = ReceiptId;
        Service.OnCreate = t =>
        {
            if (t.Id == 0)
                t.Date = DateTime.Now;
        };
        base.OnInitialized();
    }

    void HideDescription()
    {
        showDescriptionStatuse = false;
        selectedReceiptDetail = null;
    }

    async Task ShowDescription(RowData<ReceiptDetail> rowData)
    {
        var detail = rowData.Data;
        if (rowData.UpsertMode.HasValue)
        {
            selectedReceiptDetail = detail;
            showDescriptionStatuse = !showDescriptionStatuse;
            if (showDescriptionStatuse)
            {
                if (detail.Id > 0 && !detail.Description.HasValue())
                {
                    using var service = CreateScope().GetService<ReceiptDetailService>();
                    var old = await service.SingleAsync(detail.Id);
                    detail.Description = old.Description;
                }
                await Task.Delay(10);
                await txtDescription.FocusAsync();
            }
        }
    }

    async Task MainUnitChanged(KeyboardEventArgs e, ReceiptDetail detail, UpsertMode mode)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            if (detail?.Material.SubunitId != null)
                await txtSubunit.FocusAsync();
            else
                await Service.DetailDataView.ValidateAndUpsert(mode);
        }
    }

    async Task SubUnitChanged(KeyboardEventArgs e, ReceiptDetail detail, UpsertMode mode)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
            await Service.DetailDataView.ValidateAndUpsert(mode);
    }

    async Task UpdateMaterialReceipt(ReceiptDetail detail)
    {
        if (detail.MaterialId > 0)
        {
            using var service = CreateScope().GetService<MaterialService>();
            detail.Material = await service.GetAll().Include(t => t.MainUnit).Include(t => t.Subunit).SingleAsync(detail.MaterialId);
            await txtMainUnit.FocusAsync();

        }
    }

    [Parameter]
    public int ReceiptId { get; set; }

}