@page "/Demo/BatchCRUD"
@page "/Demo/BatchCRUD/{MasterId:int}"
@inherits MasterDetailPage<Order, OrderDeatil>
@{
    base.BuildRenderTree(__builder);
}

<style type="text/css">
    .product{
        border: 1px solid lightgray;
        padding: 5px;
        margin: 5px;
        display: inline-block;
        border-radius: 15px;
        width:100px;
        text-align:center;
        font-weight:bold;
        cursor:pointer;
        background-color: aliceblue;
    }
    .products {
        border: 1px solid lightgray;
        max-height: 200px;
        overflow: auto;
        margin-bottom: 10px;
        border-radius: 17px;
        width:calc(100% - 300px)
    }
</style>
<div style="width:98%;margin:5px auto">
    <div style="display:flex">
        <div style="width:300px;padding-left:20px;">
            <CaspianForm @ref="MasterForm" Model="UpsertData" >
                <CaspianValidationValidator ValidatorType="typeof(OrderService)"  />
                <table style="width:100%">
                    <tr>
                        <td>
                            <label>تاریخ سفارش</label>
                        </td>
                        <td>
                            <DatePicker @bind-Value="UpsertData.Date" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>نوع سفارش</label>
                        </td>
                        <td>
                            <DropdownList @bind-Value="UpsertData.OrderType" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>مشتری</label>
                        </td>
                        <td>
                            <ComboBox TEntity="Customer" TValue="int?" @bind-Value="UpsertData.CustomerId" TextExpression="@(t => t.CustomerType == CustomerType.Real ? (t.FName + " " + t.LName) : t.CompanyName)" />
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>
                            <FormCommandButton  />
                        </td>
                    </tr>
                </table>
            </CaspianForm>
        </div>
        <div class="products">
            @if (products != null)
            {
                @foreach (var product in products)
                {
                    <span @onclick="async () => await AddUpsertProduct(product)" class="product">@product.Title</span>
                }
            }
        </div>
    </div>

    <div style="display:flex">
        <div style="width:300px;text-align:center">
            <div style="padding:20px">
                <button @onclick="InsertedProducts" class="c-btn c-primary">Inserted products</button>
            </div>
            <div style="padding:20px">
                <button @attributes="btnAttr" @onclick="UpdatedProducts" class="c-btn c-primary">Updated products</button>
            </div>
            <div style="padding:20px">
                <button @attributes="btnAttr" @onclick="DeletedProducts" class="c-btn c-primary">Deleted products</button>
            </div>
            <div style="padding:20px">
                <button @attributes="btnAttr" @onclick="PostToDatabase" class="c-btn c-primary">Post to database</button>
            </div>
        </div>
        <div style="width:calc(100% - 300px);">
            <DataGrid @ref="Grid" TEntity="OrderDeatil" Batch ConditionExpr="t => t.OrderId == MasterId" TableHeight="250" HideInsertIcon>
                <Columns>
                    <GridColumn Field="t => t.Product.ProductCategory.Title" Title="گروه محصول" />
                    <GridColumn Field="t => t.Product.Title" Title="محصول" />
                    <GridColumn Field="t => t.Price.Seprate3Digit()" Title="قیمت" style="width:90px;" />
                    <GridColumn Field="t => t.Count" Title="تعداد" style="width:140px;">
                        <Template>
                            <IconButton IconType="IconType.Plus" @onclick="async () => await IncCount(context.Data)" />
                            <span style="display:inline-block;width:38px;height:38px;">@context.Data.Count</span>
                            <IconButton IconType="IconType.Minus" @onclick="async () => await DecCount(context.Data)" />
                        </Template>
                    </GridColumn>
                </Columns>
            </DataGrid>
        </div>
    </div>
</div>
@code 
{
    IList<Product> products;
    IDictionary<string, object> btnAttr;

    protected override Task OnMasterEntityCreatedAsync()
    {
        UpsertData.Date = DateTime.Now.Date;
        return base.OnMasterEntityCreatedAsync();
    }

    protected async override Task OnInitializedAsync()
    {
        var scope = CreateScope();
        products = await new ProductService(scope.ServiceProvider).GetAll().ToListAsync();
        foreach (var product in products)
            product.Image = null;
        btnAttr = new Dictionary<string, object>();
        if (MasterId == 0)
            btnAttr.Add("disabled", "disabled");
        await base.OnInitializedAsync();
    }

    void UpdatedProducts()
    {
        var products = Grid.GetUpdatedEntities();
        if (products.Count == 0)
            Alert("هیچ محصولی بروزرسانی نشده است");
        else
        {
            var str = $"تعداد {products.Count} محصول با عناوین :";
            string tempStr = null;
            foreach (var product in products)
            {
                if (tempStr != null)
                    tempStr += " - ";
                tempStr += product.Product.Title;
            }
            Alert(str + tempStr + " بروزرسانی شده اند");
        }
    }

    void DeletedProducts()
    {
        var products = Grid.GetDeletedEntities();
        if (products.Count == 0)
            Alert("هیچ محصولی حذف نشده است");
        else
        {
            var str = $"تعداد {products.Count} محصول با عناوین :";
            string tempStr = null;
            foreach (var product in products)
            {
                if (tempStr != null)
                    tempStr += " - ";
                tempStr += product.Product.Title;
            }
            Alert(str + tempStr + " حذف شده اند");
        }
    }

    void InsertedProducts()
    {
        var products = Grid.GetInsertedEntities();
        if (products.Count == 0)
            Alert("هیچ محصولی ثبت نشده است");
        else
        {
            var str = $"تعداد {products.Count} محصول با عناوین :";
            string tempStr = null;
            foreach (var product in products)
            {
                if (tempStr != null)
                    tempStr += " - ";
                tempStr += product.Product.Title;
            }
            Alert(str + tempStr + " ثبت شده اند");
        }
    }

    async Task PostToDatabase()
    {
        var message = await Grid.PostToDatabaseAsync();
        message = message ?? "بروزرسانی با موفقیت انجام شد";
        ShowMessage(message);
    }

    async Task AddUpsertProduct(Product product)
    {
        var old = Grid.AllRecords().SingleOrDefault(t => t.ProductId == product.Id);
        if (old == null)
        {
            await Grid.InsertAsync(new OrderDeatil()
            {
                Count = 1,
                Price = product.Price,
                ProductId = product.Id,
                OrderId = MasterId
            });
        }
        else
        {
            old.Count = old.Count + 1;
            await Grid.UpdateAsync(old);
        }
    }

    async Task IncCount(OrderDeatil detail)
    {
        detail.Count++;
        await Grid.UpdateAsync(detail);
    }

    async Task DecCount(OrderDeatil detail)
    {
        detail.Count--;
        if (detail.Count == 0)
            await Grid.RemoveAsync(detail);
        else
            await Grid.UpdateAsync(detail);
    }
}
