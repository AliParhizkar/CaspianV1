@inherits SimplePage<Product>
@namespace Demo.Web.Pages
@{
    base.BuildRenderTree(__builder);
}
<div class="ps-4 pe-4">
    <CaspianForm @ref="UpsertForm" Model="UpsertData" OnSubmit="SetCategory" OnValidSubmit="showConfirmForPrice">
        <CaspianValidationValidator ValidatorType="typeof(ProductService)" />
        <div class="row c-controls">
            <div class="col-md-2">
                <label>Title</label>
            </div>
            <div class="col-md-5 pe-5">
                <StringTextBox @bind-Value="UpsertData.Title" />
            </div>
            <div class="col-md-2">
                <label>Price</label>
            </div>
            <div class="col-md-3">
                <NumericTextBox @bind-Value="UpsertData.Price" OnChange="@SetTakeoutPrice" />
            </div>
            <div class="col-md-2">
                <label>Meal</label>
            </div>
            <div class="col-md-5 pe-5">
                <MultiSelectBox @bind-Value="UpsertData.Meal" />
            </div>
            <div class="col-md-2">
                <label>Code</label>
            </div>
            <div class="col-md-3">
                <StringTextBox @bind-Value="UpsertData.Code" />
            </div>
            <div class="col-md-2">
                <label>Status</label>
            </div>
            <div class="col-md-5 pe-5">
                <DropdownList @bind-Value="UpsertData.ActiveType" />
            </div>
            <div class="col-md-2">
                <label>Take out price</label>
            </div>
            <div class="col-md-3">
                <NumericTextBox @bind-Value="UpsertData.TakeoutPrice" />
            </div>
            <div class="col-md-6 d-source-btn">
                <button type="button" @onclick="() => pdfStatus = WindowStatus.Open" class="c-btn c-primary">
                    Source
                    <i class="fa fa-code"></i>
                </button>
            </div>
            <div class="col-md-6 align-content-center">
                <FormCommandButton />
            </div>
        </div>
    </CaspianForm>
    <DataGrid @ref="CrudGrid" TEntity="Product" ConditionExpr="@(t => t.ProductCategoryId == CategoryId)"
              Search="SearchData" TableHeight="220">
        <Columns>
            <GridColumn Field="t => t.Title" />
            <GridColumn Field="t => t.Price.Seprate3Digit()" />
            <GridColumn Field="t => t.TakeoutPrice.Seprate3Digit()" />
            <GridCommandColumns />
        </Columns>
    </DataGrid>
</div>

<CreatePdfComponent @bind-Status="pdfStatus" Title="inline-Product" FileName="inline-Product.pdf" />

@code
{
    WindowStatus pdfStatus;
    WindowStatus status;

    [Parameter]
    public int CategoryId { get; set; }

    void SetTakeoutPrice()
    {
        if (UpsertData.TakeoutPrice == 0)
            UpsertData.TakeoutPrice = UpsertData.Price;
    }

    void SetCategory()
    {
        UpsertData.ProductCategoryId = CategoryId;
    }

    async Task<bool> showConfirmForPrice(EditContext context)
    {
        if (UpsertData.Price > 0 || (await Confirm("Do you want to register the product with zero amount?")))
            return true;
        return false;
    }
}
