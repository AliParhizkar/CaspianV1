@page "/Demo/CustomerGroupAccessPage/{MasterId:int}"
@namespace Demo.Web.Pages
@inherits AccessPage<CustomerGroup, CustomerGroupMembership, Customer>
@{
    base.BuildRenderTree(__builder);
}
<div class="row p-3">
    <div class="col-md-5">
        <fieldset class="c-search-container">
            <legend>Search parameters</legend>
            <div class="row c-controls">
                <div class="col-md-2 ps-3">
                    <label>Name</label>
                </div>
                <div class="col-md-10 pe-3">
                    <StringTextBox @bind-Value="name1" placeholder="First name/Last Name/Company name" Search
                            OnChange="() => MemberGrid.EnableLoading()" />
                </div>
                <div class="col-md-2 ps-3">
                    <label>Mobile</label>
                </div>
                <div class="col-md-10 pe-3">
                    <StringTextBox @bind-Value="MemberSearch.MobileNumber" />
                </div>
                <div class="col-md-12 text-center">
                    <hr />
                    <span class="d-membership">Others Customers</span>
                </div>
            </div>
        </fieldset>
        <DataGrid @ref="MemberGrid" TEntity="Customer" HideInsertIcon Search="MemberSearch" TableHeight="250"
                  ConditionExpr="t => name1 == null || t.FName.Contains(name1) || t.LName.Contains(name1) || t.CompanyName.Contains(name1)">
            <Columns>
                <GridColumn Field="@(t => t.CustomerType == CustomerType.Real ?  t.FName + " " + t.LName : t.CompanyName)" Title="Customer" />
                <GridColumn Field="t => t.CustomerNumber.ToString()" />
                <GridColumn Field="t => t.MobileNumber" />
            </Columns>
        </DataGrid>
    </div>
    <div class="col-md-1">
        <div class="row align-content-center h-100">
            <CaspianForm @ref="UpsertForm" Model="UpsertData">
                <CaspianValidationValidator ValidatorType="typeof(CustomerGroupMembershipService)" />
                <div class="d-btn-container">
                    <div>
                        <IconButton IconType="IconType.AngleRight" />
                    </div>
                    <IconButton type="button" @onclick="async () => await base.DeleteAsync()"
                            IconType="IconType.AngleLeft" />
                </div>
            </CaspianForm>
        </div>

    </div>
    <div class="col-md-6">
        <fieldset class="c-search-container">
            <legend>Search parameters</legend>
            <div class="row c-controls">
                <div class="col-md-2 ps-3">
                    <label>Name</label>
                </div>
                <div class="col-md-10 pe-3">
                    <StringTextBox @bind-Value="name2" placeholder="First name/Last name/Company name" Search
                                   OnChange="() => CrudGrid.EnableLoading()" />
                </div>
                <div class="col-md-2 ps-3">
                    <label>Mobile</label>
                </div>
                <div class="col-md-6 pe-3">
                    <StringTextBox @bind-Value="SearchData.Customer.MobileNumber" />
                </div>
                <div class="d-source-btn col-md-4">
                    <button @onclick="() => status = WindowStatus.Open" class="c-btn c-primary">
                        Source
                        <i class="fa fa-code"></i>
                    </button>
                </div>
                <div class="col-md-12 text-center">
                    <hr />
                    <span class="d-membership">Members Customers</span>
                </div>
            </div>
        </fieldset>
        <DataGrid @ref="CrudGrid" TEntity="CustomerGroupMembership" HideInsertIcon Search="SearchData" TableHeight="250"
                  ConditionExpr="t => name2 == null || t.Customer.FName.Contains(name2) || t.Customer.LName.Contains(name2) || t.Customer.CompanyName.Contains(name2)">
            <Columns>
                <GridColumn Field="@(t => t.Customer.CustomerType == CustomerType.Real ?  t.Customer.FName + " " + t.Customer.LName : t.Customer.CompanyName)" Title="Customer" />
                <GridColumn Field="t => t.Customer.CustomerNumber.ToString()"  />
                <GridColumn Field="t => t.Customer.MobileNumber" />
                <GridCommandColumns HideEdit />
            </Columns>
        </DataGrid>
    </div>
</div>
<CreatePdfComponent @bind-Status="status" Title="Customer group membership" FileName="membership.pdf"
                    Title1="Customer group model" FileName1="CustomerGroup.pdf" 
                    Title2="Customer group membership model" FileName2="CustomerGroupMembership.pdf" 
                    Title3="Customer model" FileName3="Customer.pdf" />
@code
{
    WindowStatus status;
    string name1;
    string name2;
}
