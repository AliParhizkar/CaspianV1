@page "/Demo/CustomerGroupAccessPage/{MasterId:int}"
@namespace Demo.Web.Pages
@inherits AccessPage<CustomerGroup, CustomerGroupMembership, Customer>
@{
    base.BuildRenderTree(__builder);
}
<h2>Access or membership</h2>
<p>
    In this example we use AccessPage&lt;TMaster, TAccess, TMember&gt; that is generic class, 
    we use this class to access or membership, Here we describe these parameters:
</p>
<ul class="d-demo-list">
    <li>
        <b>TMaster: </b>An entity that we want other entities to be members of(CustomerGroup).
    </li>
    <li>
        <b>TAccess: </b>This entity is used to communicate (access or membership) between two other entities(TMaster, TMember)
        in this example CustomerGroupMembership is used for relationship between Customer & customer group.
    </li>
    <li>
        <b>TMember: </b>An entity that becomes a member or receives access.
    </li>
</ul>
<p>
    This page has two grid binded to TAccess(CustomerGroupMembership) and TMember(Customer) entities. 
    also it has a form to validate TAccess model.
</p>
<h3>AccessPage parameters: </h3>
<p>
    To use the AccessPage class, we need to fill its properties, here we describe these properties.
</p>
<ul class="d-demo-list">
    <li>
        <b>MemberGrid: </b>We set this property by <b>@@ref</b> parameter of member grid.
    </li>
    <li>
        <b>MemberSearch: </b>We set this property by <b>Search</b> parameter of member grid.
    </li>
    <li>
        <b>CrudGrid: </b>We set this property by <b>@@ref</b> parameter of Crud grid.
    </li>
    <li>
        <b>SearchData: </b>We set this property by <b>Search</b> parameter of Crud grid.
    </li>
    <li>
        <b>UpsertForm: </b>We set this property by <b>@@ref</b> parameter of Upsert form.
    </li>
    <li>
        <b>UpsertData: </b>We set this property by <b>Model</b> parameter of Upsert form.
    </li>
</ul>
<h3>AccessPage methods:</h3>
<ul class="d-demo-list">
    <li>
        <b>UpsertAsync: </b>We use this method to validate and insert a TAccess entity.
    </li>
    <li>
        <b>DeleteAsync: </b>We use this method to validate and remove a TAccess entity.
    </li>
</ul>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="row p-3">
                <div class="col-md-5">
                    <fieldset class="c-search-container">
                        <legend>Search parameters</legend>
                        <div class="row c-controls">
                            <div class="col-md-4 ps-3">
                                <label>Name</label>
                            </div>
                            <div class="col-md-8 pe-3">
                                <StringTextBox @bind-Value="name1" placeholder="First name/Last Name/Company name" Search
                                               OnChange="() => MemberGrid.EnableLoading()" />
                            </div>
                            <div class="col-md-4 ps-3">
                                <label>Mobile</label>
                            </div>
                            <div class="col-md-8 pe-3">
                                <StringTextBox @bind-Value="MemberSearch.MobileNumber" />
                            </div>
                            <div class="col-md-12 text-center">
                                <hr />
                                <span class="d-membership">Others Customers</span>
                            </div>
                        </div>
                    </fieldset>
                    <DataGrid @ref="MemberGrid" TEntity="Customer" HideInsertIcon Search="MemberSearch" TableHeight="250"
                              ConditionExpr="t => name1 == null || t.FName.Contains(name1) || t.LName.Contains(name1) || t.CompanyName.Contains(name1)">
                        <Columns>
                            <GridColumn Field="@(t => t.CustomerType == CustomerType.Real ?  t.FName + " " + t.LName : t.CompanyName)" Title="Customer" />
                            <GridColumn Field="t => t.CustomerNumber.ToString()" />
                            <GridColumn Field="t => t.MobileNumber" />
                        </Columns>
                    </DataGrid>
                </div>
                <div class="col-md-1">
                    <div class="row align-content-center h-100">
                        <CaspianForm @ref="UpsertForm" Model="UpsertData">
                            <div class="d-btn-container">
                                <div>
                                    <IconButton IconType="IconType.AngleRight" />
                                </div>
                                <IconButton type="button" @onclick="async () => await base.DeleteAsync()"
                                            IconType="IconType.AngleLeft" />
                            </div>
                        </CaspianForm>
                    </div>

                </div>
                <div class="col-md-6">
                    <fieldset class="c-search-container">
                        <legend>Search parameters</legend>
                        <div class="row c-controls">
                            <div class="col-md-4 ps-3">
                                <label>Name</label>
                            </div>
                            <div class="col-md-8 pe-3">
                                <StringTextBox @bind-Value="name2" placeholder="First name/Last name/Company name" Search
                                               OnChange="() => CrudGrid.EnableLoading()" />
                            </div>
                            <div class="col-md-4 ps-3">
                                <label>Mobile</label>
                            </div>
                            <div class="col-md-8 pe-3">
                                <StringTextBox @bind-Value="SearchData.Customer.MobileNumber" />
                            </div>
                            <div class="col-md-12 text-center">
                                <hr />
                                <span class="d-membership">Members Customers</span>
                            </div>
                        </div>
                    </fieldset>
                    <DataGrid @ref="CrudGrid" TEntity="CustomerGroupMembership" HideInsertIcon Search="SearchData" TableHeight="250"
                              ConditionExpr="t => name2 == null || t.Customer.FName.Contains(name2) || t.Customer.LName.Contains(name2) || t.Customer.CompanyName.Contains(name2)">
                        <Columns>
                            <GridColumn Field="@(t => t.Customer.CustomerType == CustomerType.Real ?  t.Customer.FName + " " + t.Customer.LName : t.Customer.CompanyName)" Title="Customer" />
                            <GridColumn Field="t => t.Customer.CustomerNumber.ToString()" />
                            <GridColumn Field="t => t.Customer.MobileNumber" />
                            <GridCommandColumns HideEdit />
                        </Columns>
                    </DataGrid>
                </div>
            </div>
        </TabPanelItem>
    </Tabs>
</TabPanel>


@code
{
    WindowStatus status;
    string name1;
    string name2;
}
