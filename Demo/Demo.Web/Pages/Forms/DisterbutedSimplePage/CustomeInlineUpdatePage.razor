@page "/Demo/CustomeInlineUpdate"
@namespace Demo.Web.Pages
@inherits SimplePage<Product>
@{
    base.BuildRenderTree(__builder);
}

<div class="row p-4 c-controls">
    <div class="col-md-3 ps-3 pb-4">
        <label>Product category</label>
    </div>
    <div class="col-md-6 pb-4">
        <ComboBox TValue="int" @bind-Value="SearchData.ProductCategoryId" TEntity="ProductCategory" TextExpression="t => t.Title" />
    </div>
    <div class="d-source-btn col-md-3 pb-4">
        <button @onclick="() => status = WindowStatus.Open" class="c-btn c-primary">
            Source
            <i class="fa fa-code"></i>
        </button>
    </div>
    <DataGrid @ref="CrudGrid" TEntity="Product" TableHeight="350" HideInsertIcon>
        <Columns>
            <GridColumn Field="t => t.ProductCategory.Title" Title="Product category" />
            <GridColumn Field="t => t.Title" />
            <GridColumn Field="t => t.ActiveType" Title="Is active">
                <Template>
                    <CheckBox TValue="bool" Value="context.Data.ActiveType == ActiveType.Enable" 
                        ValueChanged="async value => await ToggleStatus(context.Data.Id)" />
                </Template>
            </GridColumn>
            <GridColumn Field="t => t.Price.Seprate3Digit()" />
            <GridColumn Field="t => t.TakeoutPrice.Seprate3Digit()" />
            <GridColumn Field="t => t.OutofStock.ToString()">
                <Template>
                    <CheckBox TValue="bool" Value="context.Data.OutofStock" 
                        ValueChanged="async value => await ToggleOutofstock(context.Data.Id)" />
                    </Template>
                </GridColumn>
                <GridCommandColumns DisableEditFunc="t => t.ActiveType == ActiveType.Disable"/>
            </Columns>
        </DataGrid>
</div>
@code
{
    WindowStatus status;
    async Task ToggleStatus(int id)
    {
        using var scope = CreateScope();
        var service = new ProductService(scope.ServiceProvider);
        await service.ToggleStatusAsync(id);
        await service.SaveChangesAsync();
        await CrudGrid.ReloadAsync();
    }

    async Task ToggleOutofstock(int id)
    {
        using var scope = CreateScope();
        var service = new ProductService(scope.ServiceProvider);
        await service.ToggleOutofstock(id);
        await service.SaveChangesAsync();
        await CrudGrid.ReloadAsync();
    }
}
