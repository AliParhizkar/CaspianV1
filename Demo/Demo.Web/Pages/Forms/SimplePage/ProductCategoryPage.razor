@page "/Demo/ProductCategory"
@namespace Demo.Web.Pages
@inherits SimplePage<ProductCategory>
@{
    base.BuildRenderTree(__builder);
   
}
<h2>Custom update</h2>
<p>
    In this example, we have sorted the product groups, now with the <b>up and down buttons</b> we can change their order
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="p-4 row c-controls">
                <div>
                    <span class="c-demo-description">
                        In this example, In this example we describe grid methods.
                    </span>
                    <h4 class="pt-2">Grid methods: </h4>
                    <ul class="d-demo-inner-list">
                        <li>
                            <b>ReloadAsync: </b> After updating the database, we use this method to <b>update the grid</b>.
                        </li>
                        <li>
                            <b>SelectRowById: </b> We use this method to select a record with a <b>specific Id</b>.
                        </li>
                    </ul>
                </div>
                <div class="col-md-12">
                    <DataGrid @ref="CrudGrid" TEntity="ProductCategory" ContentHeight="200">
                        <Columns Context="con">
                            <GridColumn Field="t => t.Title" />
                            <GridColumn Field="t => t.Code" />
                            <GridColumn Field="t => t.ActiveType.EnumText()" />
                            <GridColumn Field="t => t.Ordering.ToString()" SortType="SortType.Asc" style="width:95px">
                                <Template>
                                    <IconButton class="c-arrow" @onclick="async () => await IncOrdering(con.Data)" IconType="IconType.AngleUp"></IconButton>
                                    <IconButton class="c-arrow" @onclick="async () => await DecOrdering(con.Data)" IconType="IconType.AngleDown"></IconButton>
                                </Template>
                            </GridColumn>
                            <GridCommandColumns />
                        </Columns>
                    </DataGrid>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Custom" FileName="ProductCategory" />
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Service">
            <Document FolderName="Service/Services" FileName="ProductCategoryService" />
        </TabPanelItem>
    </Tabs>
</TabPanel>
<Window @ref="UpsertWindow" Title="Product category" Style="width:450px"
        OnOpen="() =>
                    {
                        if (UpsertData.Id == 0)
                            UpsertData.ActiveType = ActiveType.Enable;
                    }">
    <Content>
        <CaspianForm @ref="UpsertForm" Model="UpsertData">
            <table style="width:90%;margin:0 auto">
                <tr>
                    <td>
                        <label>Title</label>
                    </td>
                    <td>
                        <StringTextBox @bind-Value="UpsertData.Title" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Code</label>
                    </td>
                    <td>
                        <StringTextBox @bind-Value="UpsertData.Code" Style="direction:ltr" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Status</label>
                    </td>
                    <td>
                        <DropdownList @bind-Value="UpsertData.ActiveType" />
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <FormCommandButton />
                    </td>
                </tr>
            </table>
        </CaspianForm>
    </Content>
</Window>

@code
{

    async Task IncOrdering(ProductCategory category)
    {
        using var service = CreateScope().GetService<ProductCategoryService>();
        await service.IncOrderingAsync(category);
        await service.SaveChangesAsync();
        await CrudGrid.ReloadAsync();
        await CrudGrid.SelectRowById(category.Id);
    }

    async Task DecOrdering(ProductCategory category)
    {
        using var service = CreateScope().GetService<ProductCategoryService>();
        await service.DecOrderingAsync(category);
        await service.SaveChangesAsync();
        await CrudGrid.ReloadAsync();
        await CrudGrid.SelectRowById(category.Id);
    }
}
