@page "/Demo/CustomeUpdate"
@namespace Demo.Web.Pages
@inherits SimplePage<Product>
@{
    base.BuildRenderTree(__builder);
}
<div style="width:90%;margin:0 auto">
    <div style="padding:8px 0">
        <table style="width:100%">
            <tr>
                <td>
                    <label>گروه محصول</label>
                </td>
                <td>
                    <ComboBox @bind-Value="SearchData.ProductCategoryId" TValue="int" TEntity="ProductCategory" TextExpression="t => t.Title" />
                </td>
                <td>
                    <label>عنوان</label>
                </td>
                <td>
                    <StringTextBox @bind-Value="SearchData.Title" />
                </td>
            </tr>
            <tr>
                <td>
                    <span>وضعیت</span>
                </td>
                <td colspan="3">
                    <DropdownList @bind-Value="SearchData.ActiveType" />
                </td>
            </tr>
        </table>
    </div>
    <DataGrid @ref="CrudGrid" TEntity="Product" Search="SearchData" TableHeight="400" HideInsertIcon
              OnPageChanged="MangeControlsOnLastPage">
        <Columns>
            <GridColumn Field="t => t.ProductCategory.Title" Title="Product category" />
            <GridColumn Field="t => t.Title" />
            <GridColumn Field="t => t.Price.ToString()" style="width:150px;">
                <Template>
                    <NumericTextBox @ref="PriceTextBox" TValue="int" @bind-Value="context.Data.Price"
                                    @onkeyup="async e =>
                                {
                                    await UpdatePrice(e, context.Data.Id, context.Data.Price);
                                }" />
                </Template>
            </GridColumn>
            <GridColumn Field="t => t.TakeoutPrice.ToString()" style="width:150px;">
                <Template>
                    <NumericTextBox @ref="PriceOuterBoundTextBox" TValue="int" @bind-Value="context.Data.TakeoutPrice"
                                    @onkeyup="async e => await UpdatePriceOuterBound(e, context.Data.Id, context.Data.TakeoutPrice)" />
                </Template>
            </GridColumn>
        </Columns>
    </DataGrid>
</div>

@code
{
    IList<NumericTextBox<int>> priceTextBoxList;
    IList<NumericTextBox<int>> takeoutPriceTextBoxList;

    async Task UpdatePrice(KeyboardEventArgs e, int productId, int price)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            using var scope = ServiceScopeFactory.CreateScope();
            var productService = new ProductService(scope.ServiceProvider);
            await productService.UpdatePrice(productId, price);
            await productService.SaveChangesAsync();
            await CrudGrid.ReloadAsync();
            await takeoutPriceTextBoxList[CrudGrid.SelectedRowIndex.Value].FocusAsync();
        }
    }

    async Task UpdatePriceOuterBound(KeyboardEventArgs e, int productId, int priceOuterBound)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            using var scope = ServiceScopeFactory.CreateScope();
            var productService = new ProductService(scope.ServiceProvider);
            await productService.UpdateTakeoutPrice(productId, priceOuterBound);
            await productService.SaveChangesAsync();
            await CrudGrid.ReloadAsync();
            await CrudGrid.SelectNextRow();
            await priceTextBoxList[CrudGrid.SelectedRowIndex.Value].FocusAsync();
        }
    }

    protected override void OnInitialized()
    {
        priceTextBoxList = new List<NumericTextBox<int>>();
        takeoutPriceTextBoxList = new List<NumericTextBox<int>>();
        base.OnInitialized();
    }

    void MangeControlsOnLastPage()
    {
        if (CrudGrid.PageCount == CrudGrid.PageNumber)
        {
            var count = CrudGrid.PageSize - CrudGrid.Items.Count;
            for (int i = 0; i < count; i++)
            {
                priceTextBoxList.Remove(priceTextBoxList.Last());
                takeoutPriceTextBoxList.Remove(takeoutPriceTextBoxList.Last());
            }
        }
    }

    NumericTextBox<int> PriceTextBox
    {
        get { return null; }
        set { priceTextBoxList.Add(value); }
    }

    NumericTextBox<int> PriceOuterBoundTextBox
    {
        get { return null; }
        set { takeoutPriceTextBoxList.Add(value); }
    }
}
