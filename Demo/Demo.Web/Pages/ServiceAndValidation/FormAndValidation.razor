@page "/Demo/FormAndValidation"
@namespace Demo.Web.Pages
@inherits BasePage
@{
    base.BuildRenderTree(__builder);
}
<h2>Form & Validation</h2>
<p>
    We use the <b>CaspianForm</b> component to <b>validate the model</b> and <b>reset</b> components. In validation we use a service to validate a model.
    <br />
    As mentioned before, we create at least <b>one service per entity</b>, the infrastructure automatically injects these services, 
    and if the model has only <b>one service</b>, this service is automatically used for validation. Otherwise, 
    the programmer must specify the desired service.
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <div class="row">
                    <div class="col-md-5">
                        <h4>Form binding</h4>
                        <span class="c-demo-description">In this example, we defined the <b>UpsertData</b> field (of <b>product</b> type) and <b>bind the form</b> to it with the <b>Model</b> parameter.</span>
                        <h4 class="pt-4">Control binding</h4>
                        <span class="c-demo-description">All controls inside the form must be bind to <b>UpsertData</b>(the model form bind to it) properties.</span>
                    </div>
                    <div class="col-md-7">
                        <CaspianForm Model="UpsertData">
                            <div class="data-form-container p-4">
                                <div class="row c-controls">
                                    <div class="col-md-4">
                                        <label>Product category</label>
                                    </div>
                                    <div class="col-md-8">
                                        <ComboBox TEntity="ProductCategory" TValue="int" @bind-Value=UpsertData.ProductCategoryId TextExpression="t => t.Title" />
                                    </div>
                                    <div class="col-md-4">
                                        <label>Title</label>
                                    </div>
                                    <div class="col-md-8">
                                        <StringTextBox @bind-Value="UpsertData.Title" />
                                    </div>
                                    <div class="col-md-4">
                                        <label>Price</label>
                                    </div>
                                    <div class="col-md-8">
                                        <NumericTextBox @bind-Value="UpsertData.Price" />
                                    </div>
                                    <div class="col-md-4">
                                        <label>Take out price</label>
                                    </div>
                                    <div class="col-md-8">
                                        <NumericTextBox @bind-Value="UpsertData.TakeoutPrice" />
                                    </div>
                                    <div class="col-md-4">
                                        <label>Meal</label>
                                    </div>
                                    <div class="col-md-8">
                                        <MultiSelectBox @bind-Value="UpsertData.Meal" />
                                    </div>
                                    <div class="col-md-4">
                                        <label>Status</label>
                                    </div>
                                    <div class="col-md-8">
                                        <DropdownList @bind-Value="UpsertData.ActiveType" />
                                    </div>
                                    <div class="col-md-12">
                                        <FormCommandButton SumitButtonTitle="Submit" />
                                    </div>
                                </div>
                            </div>
                        </CaspianForm>
                    </div>
                </div>
            </div>
        </TabPanelItem>
    </Tabs>
</TabPanel>


@code
{
    WindowStatus status;
    Product UpsertData = new Product();

    async Task FormSubmit()
    {
        await Alert("Form Submited");
    }

    void Reset()
    {
        ShowMessage("For is reset");
    }

    void InvalidSubmit()
    {
        ShowMessage("Product is invalid");
    }

    void ValidSubmit(EditContext context)
    {
        ShowMessage("product is Valid");
    }
}
