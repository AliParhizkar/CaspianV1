@page "/Demo/Window"
@namespace Demo.Web.Pages
@inherits BasePage
@{
    base.BuildRenderTree(__builder);
}
<h2>Window</h2>
<p>
    We can <b>have multiple cascading windows</b>, use <b>medallion window</b>, <b>draggable, resizable, custom title</b>, etc.
</p>
<h3 class="pt-3">Genaral properties</h3>
<p>
    We can specify general properties like <b>width, and title, modal, draggable</b>, etc.
</p>
<div class="d-price">

</div>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <div class="row">
                    <div class="col-md-6">
                        <h4>Width property</h4>
                        <span class="c-demo-description">By setting the <b>Style</b> parameter, we can easily <b>change width</b> and other css properties of the control. it has <b>intellisense</b> for css properties</span>
                    </div>
                    <div class="col-md-6">
                        <div class="row c-controls c-demo-control">
                            <div class="col-md-4">
                                <label>Control size</label>
                            </div>
                            <div class="col-md-8">
                                <DropdownList @bind-Value="controlSize" FilterFunc="t => t != ControlSize.Auto"/>
                            </div>
                            <div class="col-md-4">
                                <label>Window</label>
                            </div>
                            <div class="col-md-8 text-center">
                                <button class="c-btn c-primary" @onclick="() => { widthWindowStatus = WindowStatus.Open; }">...</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <h4>Modal & Draggable</h4>
                        <span class="c-demo-description">By setting the <b>Modal</b> parameter, we can easily <b>enable & disable modal</b>. This parameter is a <b>boolean</b> parameter. And we can also use the <b></b> to enable and disable <b>drag</b></span>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <div class="row c-controls c-demo-control">
                            <div class="col-md-4">
                                <label>Modal</label>
                            </div>
                            <div class="col-md-8">
                                <CheckBox @bind-Value="modal"  />
                            </div>
                            <div class="col-md-4">
                                <label>Draggable</label>
                            </div>
                            <div class="col-md-8">
                                <CheckBox @bind-Value="draggable" />
                            </div>
                            <div class="col-md-4">
                                <label>Window</label>
                            </div>
                            <div class="col-md-8 text-center">
                                <button class="c-btn c-primary" @onclick="() => { modalAndDraggableStatus = WindowStatus.Open; }">...</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <h4>Title & custom header</h4>
                        <span class="c-demo-description">By setting the <b>Title</b> parameter, we can easily <b>specify the title</b>. This parameter is a <b>string</b> parameter. And we can also <b>create custom header</b></span>
                    </div>
                    <div class="col-md-6">
                        <hr />
                        <div class="row c-controls c-demo-control">
                            <div class="col-md-4">
                                <label>Title</label>
                            </div>
                            <div class="col-md-8">
                                <StringTextBox @bind-Value="title" Disabled="customHeader" />
                            </div>
                            <div class="col-md-4">
                                <label>Custom header</label>
                            </div>
                            <div class="col-md-8">
                                <CheckBox @bind-Value="customHeader" />
                            </div>
                            <div class="col-md-4">
                                <label>Window</label>
                            </div>
                            <div class="col-md-8 text-center">
                                <button class="c-btn c-primary" @onclick="() => { headerWindowStatus = WindowStatus.Open; }">...</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Window" FileName="Generalproperties" />
        </TabPanelItem>
    </Tabs>
</TabPanel>

<h3 class="pt-3">Cascade windows</h3>
<p>
    We can use <b>windows in cascade</b>, for this purpose we need to <b>create each window inside another window</b>(as content)
</p>
<TabPanel>
    <Tabs>
        <TabPanelItem Title="<i class='fa fa-bar-chart'></i>Demo">
            <div class="d-content">
                <div class="row">
                    <div class="col-md-6">
                        <h4>Cascade windows</h4>
                        <span class="c-demo-description">In this example we have <b>three nested windows</b>, each one <b>created as another content</b>.</span>
                    </div>
                    <div class="col-md-6">
                        <div class="row c-controls c-demo-control">
                            <div class="col-md-4">
                                <label>Window</label>
                            </div>
                            <div class="col-md-8 text-center">
                                <button class="c-btn c-primary" @onclick="() => { status1 = WindowStatus.Open; }">...</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </TabPanelItem>
        <TabPanelItem Title="<i class='fa fa-code'></i>Razor">
            <Document FolderName="Window" FileName="CascadeWindow" />
        </TabPanelItem>
    </Tabs>
</TabPanel>
<Window @bind-Status="widthWindowStatus" Title="Width property window" Style="@(GetStyle())">
    <div class="p-5 text-center">
        <h3>@controlSize.EnumText()</h3>
    </div>
</Window>

<Window @bind-Status="modalAndDraggableStatus" Style="width:300px" Modal="modal" Draggable="draggable" Title="Modal & dragable window">
    <div class="p-5 text-center">
        <CheckBox @bind-Value="modal" Disabled Title="Modal" />
    </div>
    <div class="p-5 text-center">
        <CheckBox @bind-Value="draggable" Disabled Title="Draggable" />
    </div>
</Window>

<Window @bind-Status="headerWindowStatus" Title="@(title)" ShowCustomHeader="customHeader">
    <HeaderTemplate >
        <div class="d-window-header">
            <h5>Custom Header</h5>
            <button @onclick="() => headerWindowStatus = WindowStatus.Close">X</button>
        </div>
        <hr class="m-0" />
    </HeaderTemplate>
    <Content>
        <div class="p-5 text-center">
            @if (customHeader)
            {
                <div class="p-5 text-center">
                    <h3>Custom header</h3>
                </div>
            }
            else
            {
                <h3>Title:@(title)</h3>
            }
        </div>
    </Content>
</Window>

<Window @bind-Status="status1"  Title="Window 1" Style="width:700px;height:500px">
    <div class="row d-cascade">
        <div class="col-md-12">
            <h3>Cascade Window</h3>
        </div>
        <div class="col-md-6">
            <hr />
            <h6 class="d-window1">Window 1</h6>
        </div>
        <div class="col-md-6">
            <hr />
            <button class="c-btn c-success" @onclick="() => { status2 = WindowStatus.Open; }">Window 2</button>
        </div>
    </div>
    <Window @bind-Status="status2" Title="Window 2" Style="width:600px;height:400px">
        <div class="row d-cascade">
            <div class="col-md-12">
                <h3>Cascade Window</h3>
            </div>
            <div class="col-md-6">
                <hr />
                <h6 class="d-window2">Window 2</h6>
            </div>
            <div class="col-md-6">
                <hr />
                <button class="c-btn c-secondary" @onclick="() => { status3 = WindowStatus.Open; }">Window 3</button>
            </div>
        </div>
        <Window @bind-Status="status3" Title="Window 3" Style="width:500px;height:300px">
            <div class="row d-cascade">
                <div class="col-md-12">
                    <h3>Cascade Window</h3>
                </div>
                <div class="col-md-12">
                    <hr />
                    <h6 class="d-window3">Window 3</h6>
                </div>
            </div>
        </Window>
    </Window>
</Window>
@code {
    ControlSize controlSize = ControlSize.Medium;

    WindowStatus widthWindowStatus;
    WindowStatus modalAndDraggableStatus;
    WindowStatus headerWindowStatus;
    WindowStatus status1;
    WindowStatus status2;
    WindowStatus status3;
    bool draggable = true;
    bool customHeader;
    bool modal = true;
    bool resizeable;
    string title = "Title & custom header";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await base.BindTooltip();
        await base.OnAfterRenderAsync(firstRender);
    }

    string GetStyle()
    {
        switch (controlSize)
        {
            case ControlSize.Large:
                return "width:600px";
            case ControlSize.Medium:
                return "width:450px";
            case ControlSize.Small:
                return "width:300px";
        }
        throw new NotImplementedException();
    }
}
