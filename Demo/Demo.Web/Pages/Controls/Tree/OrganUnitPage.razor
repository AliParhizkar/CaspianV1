@page "/Demo/HierarchyTree"
@inherits BasePage
<div class="row d-head">
    <div class="col-md-6">
        <h3>Hierarchy Tree</h3>
    </div>
    <div class="d-source-btn col-md-6">
        <button @onclick="() => pdfStatus = WindowStatus.Open" class="c-btn c-primary">
            Source
            <i class="fa fa-code"></i>
        </button>
    </div>
</div>
<div class="d-body">
    <div class="row">
        <div class="col-md-6 d-control">
            <hr />
            <div class="d-container">
                <h4>Data-binding</h4>
                <div class="row">
                    <div class="col-md-1 d-tree-icon">
                        <span @onclick="async () => await ShowEditForm(null, false)" class="fa fa-plus"></span>
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-2">
                        <label>Status</label>
                    </div>
                    <div class="col-md-8">
                        <RadioList @bind-Value="@activeType" OnChange="async () => await tree.ReloadAsync()" Style="width:200px;" />
                    </div>
                    <div class="col-md-12">
                        <StringTextBox @bind-Value="@organSearch" OnChange="async () => await tree.ReloadAsync()" BindingType="BindingType.OnInput" placeholder="Search ..." />
                    </div>
                    <div class="col-md-12">
                        <CTreeView @ref="tree" TEntity="OrganUnit" style="height:calc(100vh - 230px)" TextFunc="t => t.Title" ParentNodeFilterFunc="t => t.ParentOrganId == null" FilterFunc="t => (!organSearch.HasValue() || t.Title.StartsWith(organSearch)) && t.ActiveType == activeType">
                            <Template>
                                <TreeNodeTemplate Levels="new byte[]{1, 2, 3, 4, 5, 6}">
                                    <span class="d-tree-icon">
                                        <span @onclick="async () => await ShowEditForm(context, false)" class="fa fa-plus"></span>
                                    </span>
                                    <span class="d-tree-icon" @onclick="async () => await ShowEditForm(context, true)">
                                        <span class="fa fa-pencil"></span>
                                    </span>
                                    <span class="d-tree-icon" @onclick="async () => await DeleteOrganUnit(context)">
                                        <span class="fa fa-trash"></span>
                                    </span>
                                </TreeNodeTemplate>
                            </Template>
                        </CTreeView>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 d-control">
            <hr />
            <div class="d-container">
                <h4>Autocomplete-Tree</h4>
                <div class="row">
                    <div class="col-md-12">
                        <AutoCompleteTree @bind-Value="values">
                            <CTreeView TEntity="OrganUnit" TextFunc="t => t.Title" Selectable
                                       ParentNodeFilterFunc="t => t.ParentOrganId == null"
                                       FilterFunc="t => (!context.HasValue() || t.Title.StartsWith(context))"
                                       style="margin:3px auto;width:350px;" />
                        </AutoCompleteTree>
                    </div>
                    <div class="col-md-12">
                        <AutoCompleteTree @bind-Value="value">
                            <CTreeView TEntity="OrganUnit" TextFunc="t => t.Title"
                                       ParentNodeFilterFunc="t => t.ParentOrganId == null"
                                       FilterFunc="t => (!context.HasValue() || t.Title.StartsWith(context))"
                                       style="margin:3px auto;width:350px;" />
                        </AutoCompleteTree>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<Window @bind-Status="status" Style="width:450px;" OnOpen="() => firstControl.Focus()">
    <Content>
        <CaspianForm Model="organUnit" OnValidSubmit="async t => await UpsertOrganUnit()">
            <CaspianValidationValidator ValidatorType="typeof(OrganUnitService)" />
            <div class="row c-controls ps-3 pe-3">
                <div class="col-md-3">
                    <label>Title</label>
                </div>
                <div class="col-md-9">
                    <StringTextBox @ref="firstControl" @bind-Value="organUnit.Title" />
                </div>
                <div class="col-md-3">
                    <label>Status</label>
                </div>
                <div class="col-md-9">
                    <DropdownList @bind-Value="organUnit.ActiveType" />
                </div>
                <div class="col-md-3"></div>
                <div class="col-md-9 text-ce">
                    <WindowCommandButtons />
                </div>
            </div>
        </CaspianForm>
    </Content>
</Window>


<CreatePdfComponent @bind-Status="pdfStatus" Title="Hierarchy Tree" FileName="HierarchyTree.pdf" />
@code 
{
    WindowStatus pdfStatus;
    int[] values;
    int? value;
    //----------------------
    ActiveType activeType = ActiveType.Enable;
    string organSearch;
    WindowStatus status;
    OrganUnit organUnit;
    CTreeView<OrganUnit> tree;
    IControl firstControl;

    async Task DeleteOrganUnit(TreeViewItem node)
    {
        var organUnitId = Convert.ToInt32(node.Value);
        using var scope = CreateScope();
        var service = new OrganUnitService(scope.ServiceProvider);
        var organUnit = await service.SingleAsync(organUnitId);
        var result = await service.ValidateRemoveAsync(organUnit);
        if (result.IsValid)
        {
            await service.RemoveAsync(organUnit);
            await service.SaveChangesAsync();
            tree.RemoveFromTree(organUnit);
        }
        else
            ShowMessage(result.Errors.First().ErrorMessage);
    }

    async Task ShowEditForm(TreeViewItem nodeView, bool isUpdate)
    {
        if (isUpdate)
        {
            ///در حالت ویرایش
            var organUnitId = Convert.ToInt32(nodeView.Value);
            using var scope = CreateScope();
            organUnit = await new OrganUnitService(scope.ServiceProvider).SingleAsync(organUnitId);
        }
        else
        {
            organUnit = new OrganUnit();
            organUnit.ActiveType = ActiveType.Enable;
            organUnit.ParentOrganId = nodeView == null ? null : Convert.ToInt32(nodeView.Value);
        }
        status = WindowStatus.Open;
    }

    async Task<bool> UpsertOrganUnit()
    {
        using var scope = CreateScope();
        var service = new OrganUnitService(scope.ServiceProvider);
        if (organUnit.Id == 0)
            await service.AddAsync(organUnit);
        else
            await service.UpdateAsync(organUnit);
        await service.SaveChangesAsync();
        tree.UpsertInTree(organUnit);
        status = WindowStatus.Close;
        StateHasChanged();
        return true;
    }
}
