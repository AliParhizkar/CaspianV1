@page "/Demo/NodeTemplate"
@inherits BasePage
<div style="padding:20px 40px 0 0">
    <h3>Tree View</h3>
</div>
<div style="display:flex;width:90%;margin:0 auto">
    <div style="display:table-cell;width:50%;padding-left:40px">
        <hr />
        <div style="padding:0 40px;">
            <h4>Custome Template</h4>
            <CTreeView TEntity="TreeViewItem" OnCollapsed="OnCollapsed" style="height:calc(100vh - 138px);margin-right:5px;" Source="source" OnExpanded="async node => await OnExpanded(node)">
                <Template>
                    <TreeNodeTemplate Level="1">
                        <span style="padding:0 8px 0 0;" class="t-grid-delete">
                            <span style="color:#0dcaf0" @onclick="() => ShowEditForm(context, false)" class="t-icon t-delete fa fa-plus"></span>
                        </span>
                    </TreeNodeTemplate>
                    <TreeNodeTemplate Level="2">
                        <span style="padding:0 8px 0 0;" class="t-grid-edit" @onclick="() => ShowEditForm(context, true)">
                            <span class="t-icon t-edit fa fa-pencil"></span>
                        </span>
                        <span class="t-grid-delete" @onclick="async () => await DeleteCity(context)">
                            <span class="t-icon t-delete fa fa-trash"></span>
                        </span>
                    </TreeNodeTemplate>
                </Template>
            </CTreeView>
            <Window @bind-Status="status" Style="width:350px;" OnOpen="() => firstControl.Focus()">
                <Content>
                    <CaspianForm Model="city" OnValidSubmit="async t => await UpsertCity()">
                        <CaspianValidationValidator ValidatorType="typeof(CityService)" />
                        <table style="width:90%;margin:0 auto">
                            <tr>
                                <td>
                                    <label>عنوان</label>
                                </td>
                                <td>
                                    <StringTextBox @ref="firstControl" @bind-Value="city.Title" />
                                </td>
                            </tr>
                            <tr>
                                <td></td>
                                <td style="text-align:center">
                                    <button type="submit" class="c-btn c-primary">ثبت</button>
                                    <button type="button" @onclick="() => status = WindowStatus.Close" class="c-btn c-danger">انصراف</button>
                                </td>
                            </tr>
                        </table>
                    </CaspianForm>
                </Content>
            </Window>
        </div>
    </div>
    <div style="display:table-cell;width:50%;padding-right:40px">
        <hr />
        <div style="padding:0 40px;">
            <h4 style="padding-right:40px;">Tree-Search</h4>
            <div style="text-align:center;padding:10px 0 3px 0">

                <StringTextBox placeholder="جستجوی شهرها" BindingType="BindingType.OnInput" Value="@strSearch" ValueChanged="SearchOnTree" />
            </div>
            <CTreeView TEntity="TreeViewItem" style="height:calc(100vh - 192px);margin-right:5px;" Source="searchSource" />
        </div>
    </div>
</div>


@code 
{
    //----- Custome Template -----
    IList<TreeViewItem> source;
    TreeViewItem node;
    WindowStatus status;
    City city;
    //----Search------------
    IList<TreeViewItem> searchSource;
    IControl firstControl;
    string strSearch;

    async Task<bool> UpsertCity()
    {
        using var scope = CreateScope();
        var service = new CityService(scope);
        TreeViewItem tempNode = null;
        if (city.Id == 0)
        {
            await service.AddAsync(city);
            ///نود انتخابی استان هست و باید تمامی فرزندان نود(شهرها) بارگذاری شوند
            tempNode = node;
        }
        else
        {
            await service.UpdateAsync(city);
            ///نود انتخابی شهر است و باید تمامی فرزندان نود پدر (فرزندان استان) بارگذاری شوند
            tempNode = node.Parent;
        }
        await service.SaveChangesAsync();
        status = WindowStatus.Close;
        tempNode.Items = await service.GetAll().Where(t => t.ProvinceId == city.ProvinceId)
            .Select(t => new TreeViewItem()
            {
                Collabsable = false,
                Expanded = false,
                Text = t.Title,
                Value = t.Id.ToString(),
                ShowTemplate = true
            }).ToListAsync();
        StateHasChanged();
        return true;
    }

    async Task ShowEditForm(TreeViewItem nodeView, bool isUpdate)
    {
        ///باز شدن ویندو 
        city = new City();
        city.ActiveType = ActiveType.Enable;
        if (isUpdate)
        {
            ///در حالت ویرایش
            var cityId = Convert.ToInt32(nodeView.Value);
            using var scope = CreateScope();
            var old = await new CityService(scope).SingleAsync(cityId);
            city.Id = cityId;
            city.ProvinceId = old.ProvinceId;
            city.Title = old.Title;
        }
        else
        {
            ///در حالت ثبت
            city.ProvinceId = Convert.ToInt32(nodeView.Value);
        }
        ///نود انتخاب شده
        node = nodeView;
        status = WindowStatus.Open;
    }

    protected override async Task OnInitializedAsync()
    {
        //----- Custome Template -----
        //این قسمت انتخابی است و میتواند به دو صورت بارگذاری در ابتدا و یا بارگذاری در باز کردن نود اعمال شود
        //برای اطلاعات بیشتر مراجعه شود به منوی قبلی
        using var scope = CreateScope();
        source = await new ProvinceService(scope).GetAll().Select(t => new TreeViewItem()
        { 
            Collabsable = true,
            Text = t.Title,
            Value = t.Id.ToString(),
            ShowTemplate = true
        }).ToListAsync();
        await SearchOnTree(null);
    }

    void OnCollapsed(TreeViewItem node)
    {
        ///در صورت بارگذاری در ابتدا نیازی به این بخش نیست
        node.Items = null;
        node.Selected = false;
    }

    async Task OnExpanded(TreeViewItem node)
    {
        ///در صورت بارگذاری در ابتدا نیازی به این بخش نیست
        using var scope = CreateScope();
        var provinceId = Convert.ToInt32(node.Value);
        node.Items = await new CityService(scope).GetAll()
            .Where(t => t.ProvinceId == provinceId).Select(t => new TreeViewItem()
                {
                    Collabsable = false,
                    Expanded = false,
                    Text = t.Title,
                    Value = t.Id.ToString(),
                    ShowTemplate = true
                }).ToListAsync();
    }

    async Task DeleteCity(TreeViewItem node)
    {
        var cityId = Convert.ToInt32(node.Value);
        using var scope = CreateScope();
        var service = new CityService(scope);
        var city = await service.SingleAsync(cityId);
        var result = await service.ValidateRemoveAsync(city);
        if (result.IsValid)
        {
            service.Remove(city);
            await service.SaveChangesAsync();
            ///پس از خذف شهر باید تمامی شهرهای استان(گره پرنت) دوباره بارگذاری شوند
            node.Parent.Items = await service.GetAll()
            .Where(t => t.ProvinceId == city.ProvinceId).Select(t => new TreeViewItem()
                {
                    Collabsable = false,
                    Expanded = false,
                    Text = t.Title,
                    Value = t.Id.ToString(),
                    ShowTemplate = true
                }).ToListAsync();
        }
        else
            ShowMessage(result.Errors.First().ErrorMessage);
    }

    //-----Search Method ---
    async Task SearchOnTree(string str)
    {
        if (str == "")
            str = null;
        using var scope = CreateScope();
        var query = new ProvinceService(scope).GetAll();
        if (str.HasValue())
            query = query.Where(t => t.Cities.Any(u => u.Title.Contains(str)));
        searchSource = await query.Select(t => new TreeViewItem()
            {
                Collabsable = true,
                Expanded = true,
                Text = t.Title,
                Value = t.Id.ToString(),
                Items = t.Cities.Where(u => str == null || u.Title.Contains(str)).Select(u => new TreeViewItem()
                {
                    Collabsable = false,
                    Text = u.Title,
                    Value = u.Id.ToString()
                }).ToList()
            }).ToListAsync();
        await base.OnInitializedAsync();
    }
}
