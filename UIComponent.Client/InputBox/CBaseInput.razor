@namespace Caspian.UI
@using System.Reflection 
@using System.Linq.Expressions
@typeparam TValue

@code
{
    bool valueIsChanged;
    protected bool disabled;

    public ElementReference? InputElement { get; protected set; }

    [Parameter]
    public BindingType BindingType { get; set; } = BindingType.OnChange;

    [Parameter]
    public Type DynamicType { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Search { get; set; }

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TValue>> ValueExpression { get; set; }

    [Parameter]
    public int? TabIndex { get; set; }

    protected override void OnInitialized()
    {
        if (Search)
            BindingType = BindingType.OnInput;
        base.OnInitialized();
    }

    public virtual async Task SetValue(object obj)
    {
        var readOnly = false;
        if (InputAttributes.ContainsKey("readonly"))
            readOnly = Convert.ToBoolean(InputAttributes["readonly"]);
        if (!disabled && !readOnly)
        {
            var type = DynamicType ?? typeof(TValue);
            if (type.IsNullableType() && obj != null)
                type = Nullable.GetUnderlyingType(type);
            Value = default(TValue);
            valueIsChanged = true;
            if (obj != null)
            {
                if (type.IsEnum)
                {
                    object value = default(TValue);
                    Enum.TryParse(type, obj.ToString(), out value);
                    Value = (TValue)value;
                }
                else
                    Value = (TValue)Convert.ChangeType(obj, type);
            }
            await ValueChanged.InvokeAsync(Value);
            if (OnChange.HasDelegate)
                await OnChange.InvokeAsync();
        }
    }

    [Parameter]
    public EventCallback OnChange{ get; set; }

    protected override void OnParametersSet()
    {
        if (InputAttributes == null)
            InputAttributes = new Dictionary<string, object>();
        if (TabIndex.HasValue)
            InputAttributes["tabindex"] = TabIndex;
        base.OnParametersSet();
    }

    public async Task FocusAsync()
    {
        if (InputElement.HasValue)
            await InputElement.Value.FocusAsync();
    }
}
