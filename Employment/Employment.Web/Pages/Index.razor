@page "/Employment"
@using Caspian.Engine
@using Caspian.Engine.Service
@inherits BasePage
@{
    base.BuildRenderTree(__builder);
}
<div style="margin:5px auto;width:90%">
    <fieldset class="t-widget">
        <legend>پارامترهای اصلی</legend>
        <div class="row">
            <div class="col-md-1"></div>
            <div style="padding-top:6px" class="col-md-1">
                <label>پایه تحصیلی</label>
            </div>
            <div class="col-md-4">
                <DropdownList @bind-Value="order.BaseStudy" OnChange="UpdateFormParameter" />
            </div>
        </div>
    </fieldset>
    <fieldset class="t-widget">
        <legend>پارامترهای کاربر</legend>
        <div class="row">
            @if (parameters != null)
            {
                foreach (var param in parameters.Where(t => t.CalculationType == CalculationType.UserData))
                {
                    object value = null;
                    if (parametersValue.ContainsKey(param.Id))
                        value = parametersValue[param.Id];
                    <div class="col-md-1"></div>
                    <div style="padding-top:6px;" class="col-md-1">
                        <label>@param.FaTitle</label>
                    </div>
                    <div class="col-md-4">
                        @switch (param.ControlType.Value)
                        {
                            case ControlType.Integer:
                                <NumericTextBox TValue="int?" Value="(int?)value" ValueChanged="value => SetParameterValue(param.Id, value)" />
                                break;
                            case ControlType.Numeric:
                                <NumericTextBox TValue="decimal?" Value="(decimal?)value" ValueChanged="value => SetParameterValue(param.Id, value)" NumberDigit=" param.DecimalNumber.Value" />
                                break;
                            case ControlType.CheckBox:
                                <CheckBox TValue="bool" Value="value?.Equals(true) == true" ValueChanged="value => SetParameterValue(param.Id, value)" />
                                break;
                            case ControlType.DropdownList:
                                var source = param.Options.Select(t => new SelectListItem()
                                {
                                    Text = t.FaTitle,
                                    Value = t.Value.ToString()
                                }).ToList();
                                <DropdownList TValue="int?" Value="(int?)value" ValueChanged="value => SetParameterValue(param.Id, value)" Source="source" />
                                break;
                        }
                        <div class="col-md-1"></div>
                    </div>
                }
            }
        </div>
    </fieldset>
    <fieldset class="t-widget">
        <legend>پارامترهای فرم</legend>
        <div class="row">
            @if (parameters != null)
            {
                foreach (var param in parameters.Where(t => t.CalculationType == CalculationType.FormData))
                {
                    decimal? value = null;
                    if (formParametersValue != null && formParametersValue.ContainsKey(param.Id))
                        value = formParametersValue[param.Id];
                    <div class="col-md-1"></div>
                    <div class="col-md-1">@param.FaTitle</div>
                    <div class="col-md-4">
                        <NumericTextBox Value="value" TValue="decimal?" NumberDigit="param.DecimalNumber ?? 2" />
                    </div>
                }
            }
        </div>
    </fieldset>
    <fieldset>
        <legend>پارامترهای محاسباتی</legend>
    </fieldset>
</div>

@code
{
    IList<DynamicParameter> parameters;
    IDictionary<int, object> parametersValue;
    EmploymentOrder order;
    DynamicFormCalculationService<EmploymentOrder> formCalculationService;
    IDictionary<int, decimal?> formParametersValue;

    void UpdateFormParameter()
    {
        formParametersValue = formCalculationService.GetFormData();
    }

    void SetParameterValue(int id, object value)
    {
        if (parametersValue.ContainsKey(id))
            parametersValue[id] = value;
        else
            parametersValue.Add(id, value);
        UpdateFormParameter();
    }

    protected override void OnInitialized()
    {
        parametersValue = new Dictionary<int, object>();
        order = new EmploymentOrder();
        formCalculationService = new DynamicFormCalculationService<EmploymentOrder>(parametersValue, order);
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        using var scope = CreateScope();
        parameters = await new DynamicParameterService(scope).GetAll().Include(t => t.Options).ToListAsync();
        await formCalculationService.InitializeAsync(scope);
        await base.OnInitializedAsync();
    }
}

