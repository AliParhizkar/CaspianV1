@page "/Employment/ParametricEmploymentOrder"
@using Caspian.Engine
@using Caspian.Engine.Service
@using Caspian.Engine.ShowRule
@inherits BasePage
@{
    base.BuildRenderTree(__builder);
}
<div style="margin:5px auto;width:90%">
    <fieldset class="t-widget">
        <legend>پارامترهای اصلی</legend>
        <div class="row">
            <div class="col-md-1"></div>
            <div style="padding-top:6px" class="col-md-1">
                <label>پایه تحصیلی</label>
            </div>
            <div class="col-md-4">
                <DropdownList @bind-Value="order.BaseStudy" OnChange="UpdateFormParameter" />
            </div>
        </div>
    </fieldset>
    <fieldset class="t-widget">
        <legend>پارامترهای کاربر</legend>
        <div class="row">
            @if (parameters != null)
            {
                foreach (var param in parameters.Where(t => t.CalculationType == CalculationType.UserData))
                {
                    object value = null;
                    if (parametersValue.ContainsKey(param.Id))
                        value = parametersValue[param.Id];
                    <div class="col-md-1"></div>
                    <div style="padding-top:6px;" class="col-md-2">
                        <label>@param.Title</label>
                    </div>
                    <div class="col-md-3">
                        @switch (param.ControlType.Value)
                        {
                            case ControlType.Integer:
                                <NumericTextBox TValue="int?" Value="(int?)value" ValueChanged="value => SetParameterValue(param.Id, value)" />
                                break;
                            case ControlType.Numeric:
                                <NumericTextBox TValue="decimal?" Value="(decimal?)value" ValueChanged="value => SetParameterValue(param.Id, value)" NumberDigit=" param.DecimalNumber.Value" />
                                break;
                            case ControlType.CheckBox:
                                <CheckBox TValue="bool" Value="value?.Equals(true) == true" ValueChanged="value => SetParameterValue(param.Id, value)" />
                                break;
                            case ControlType.DropdownList:
                                var source = param.Options.Select(t => new SelectListItem()
                            {
                                Text = t.FaTitle,
                                Value = t.Value.ToString()
                            }).ToList();
                                <DropdownList TValue="int?" Value="(int?)value" ValueChanged="value => SetParameterValue(param.Id, value)" Source="source" />
                                break;
                        }
                        <div class="col-md-1"></div>
                    </div>
                }
            }
        </div>
    </fieldset>
    <fieldset class="t-widget">
        <legend>پارامترهای میانی</legend>
        <div class="row c-trace-rules">
            @if (rules != null)
            {
                foreach (var rule in rules.Where(t => t.FormRule).OrderBy(t => t.Priority))
                {
                    <div class="col-md-1"></div>
                    <div class="col-md-3 c-title">
                        <span @onclick="() => ShowDetailsWindow(rule.Id)" class="c-rule-detail">
                            <i class="fa fa-info"></i>
                        </span>
                        <label>@rule.Title</label>
                    </div>
                    <div class="col-md-2 c-value">
                        @if (rulesValue != null && rulesValue.ContainsKey(rule.Id))
                        {
                            <span>@GetTextOfValue(rule, rulesValue[rule.Id])</span>
                        }
                    </div>
                }
            }
        </div>
    </fieldset>
    <fieldset class="t-widget">
        <legend>پارامترهای حقوقی</legend>
        @if (rules != null)
        {
            <div class="row c-trace-rules">
                @foreach (var rule in rules.Where(t => !t.FormRule).OrderBy(t => t.Priority))
                {
                    <div class="col-md-1"></div>
                    <div class="col-md-3 c-title">
                        <span @onclick="() => ShowDetailsWindow(rule.Id)" class="c-rule-detail">
                            <i class="fa fa-info"></i>
                        </span>
                        <label>@rule.Title</label>
                    </div>
                    <div class="col-md-2 c-value">
                        @if (rulesValue != null && rulesValue.ContainsKey(rule.Id))
                        {
                            <span>@GetTextOfValue(rule, rulesValue[rule.Id])</span>
                        }
                    </div>
                }
            </div>
        }
    </fieldset>
</div>
<Window @bind-Status="status" Title="ردیابی داده ها" Style="width:1200px">
    <Content>
        <MainComponent Model="order" FormParameters="formParameters" UserParametersValue="parametersValue"
                       DataParameterValues="dataParameterValues" RulesValue="rulesValue" RuleId="ruleId" Rules="rules" />
    </Content>
</Window>
@code
{
    int ruleId;
    WindowStatus status;
    IList<DynamicParameter> parameters;
    IDictionary<int, object> parametersValue;
    IDictionary<int, object> rulesValue;
    ParametricEmploymentOrder order;
    IDictionary<int, decimal?> formParametersValue;
    IList<Rule> rules;
    IList<DataParameter> formParameters;
    IList<DataParameterValue> dataParameterValues;

    string GetTextOfValue(Rule rule, object value)
    {
        switch(rule.ResultType)
        {
            case ValueTypeKind.Enum:
                var type = typeof(ParametricEmploymentOrder).GetProperty(rule.EnumTypeName).PropertyType;
                foreach (var field in type.GetFields().Where(t => !t.IsSpecialName))
                {
                    var enumValue = Convert.ToInt32(field.GetValue(null));
                    if (enumValue == Convert.ToInt32(value))
                        return ((Enum)field.GetValue(null)).FaText();
                }
                break;
            case ValueTypeKind.Int:
                return Convert.ToInt32(value).Seprate3Digit();
            default:
                return value.ToString();
        }
        return "";
    }

    void UpdateFormParameter()
    {
        rulesValue = new Dictionary<int, object>();
        foreach (var rule in rules.Where(t => t.Id <= 31))
        {
            var ruleEnginService = new RuleEngine(formParameters, dataParameterValues, order, parametersValue);
            ruleEnginService.Rulesvalue = rulesValue;
            var value = ruleEnginService.Calculate(rule.Tokens);
            rulesValue.Add(rule.Id, value);
        }
        //formParametersValue = formCalculationService.GetFormData();
    }

    void ShowDetailsWindow(int ruleId)
    {
        this.ruleId = ruleId;
        status = WindowStatus.Open;
    }

    void SetParameterValue(int id, object value)
    {
        if (parametersValue.ContainsKey(id))
            parametersValue[id] = value;
        else
            parametersValue.Add(id, value);
        UpdateFormParameter();
    }

    protected override void OnInitialized()
    {
        parametersValue = new Dictionary<int, object>();
        order = new ParametricEmploymentOrder();
        order.BaseStudy = BaseStudy.AssociateDegree;
        order.Year = 1401;
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        using var scope = CreateScope();
        parameters = await new DynamicParameterService(scope).GetAll().Include(t => t.Options).ToListAsync();
        new DynamicParameterService(scope).SetUserParametersDefault(parameters, parametersValue);
        if (!parametersValue.ContainsKey(23))
            parametersValue.Add(23, 5);
        rules = await new RuleService(scope).GetAll().OrderBy(t => t.Priority).Include(t => t.Tokens).ToListAsync();
        formParameters = await new DataParameterService(scope).GetAll().ToListAsync();
        dataParameterValues = await new DataParameterValueService(scope).GetAll().ToListAsync();
        UpdateFormParameter();
        await base.OnInitializedAsync();
    }
}